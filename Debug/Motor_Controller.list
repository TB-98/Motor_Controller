
Motor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800bcd0  0800bcd0  0001bcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c19c  0800c19c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a4  0800c1a4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a8  0800c1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c1ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000005ac  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000798  20000798  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011693  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff7  00000000  00000000  000318af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cbd  00000000  00000000  00035500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107ae  00000000  00000000  0005b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e930d  00000000  00000000  0006b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154c78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005304  00000000  00000000  00154ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bcb4 	.word	0x0800bcb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800bcb4 	.word	0x0800bcb4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)								/* for printf */
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE			// For printf Function
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);   // USB
 8001014:	1d39      	adds	r1, r7, #4
 8001016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101a:	2201      	movs	r2, #1
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <__io_putchar+0x20>)
 800101e:	f005 ff26 	bl	8006e6e <HAL_UART_Transmit>
	return ch;
 8001022:	687b      	ldr	r3, [r7, #4]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002d4 	.word	0x200002d4

08001030 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001036:	f003 f90b 	bl	8004250 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800103a:	f000 fbad 	bl	8001798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800103e:	f001 f92d 	bl	800229c <MX_GPIO_Init>
	MX_ADC1_Init();
 8001042:	f000 fc13 	bl	800186c <MX_ADC1_Init>
	MX_USART3_UART_Init();
 8001046:	f001 f8ff 	bl	8002248 <MX_USART3_UART_Init>
	MX_TIM11_Init();
 800104a:	f000 ffb5 	bl	8001fb8 <MX_TIM11_Init>
	MX_TIM4_Init();
 800104e:	f000 fd6d 	bl	8001b2c <MX_TIM4_Init>
	MX_TIM8_Init();
 8001052:	f000 fea1 	bl	8001d98 <MX_TIM8_Init>
	MX_TIM1_Init();
 8001056:	f000 fc69 	bl	800192c <MX_TIM1_Init>
	MX_TIM2_Init();
 800105a:	f000 fcbf 	bl	80019dc <MX_TIM2_Init>
	MX_TIM12_Init();
 800105e:	f000 fff7 	bl	8002050 <MX_TIM12_Init>
	MX_TIM3_Init();
 8001062:	f000 fd0f 	bl	8001a84 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001066:	f000 fdb5 	bl	8001bd4 <MX_TIM5_Init>
	MX_TIM10_Init();
 800106a:	f000 ff59 	bl	8001f20 <MX_TIM10_Init>
	MX_TIM13_Init();
 800106e:	f001 f851 	bl	8002114 <MX_TIM13_Init>
	MX_TIM7_Init();
 8001072:	f000 fe5b 	bl	8001d2c <MX_TIM7_Init>
	MX_TIM6_Init();
 8001076:	f000 fe23 	bl	8001cc0 <MX_TIM6_Init>
	MX_TIM14_Init();
 800107a:	f001 f897 	bl	80021ac <MX_TIM14_Init>
	MX_TIM9_Init();
 800107e:	f000 fee3 	bl	8001e48 <MX_TIM9_Init>
	/* USER CODE BEGIN 2 */
	//L_motor = tim12_CH2 R_motor = tim 11_CH1

	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001082:	2100      	movs	r1, #0
 8001084:	48b6      	ldr	r0, [pc, #728]	; (8001360 <main+0x330>)
 8001086:	f004 fddf 	bl	8005c48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800108a:	2104      	movs	r1, #4
 800108c:	48b5      	ldr	r0, [pc, #724]	; (8001364 <main+0x334>)
 800108e:	f004 fddb 	bl	8005c48 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8001092:	48b5      	ldr	r0, [pc, #724]	; (8001368 <main+0x338>)
 8001094:	f004 fd0e 	bl	8005ab4 <HAL_TIM_Base_Start_IT>


	//lim_base count 1sec
	HAL_TIM_Base_Start_IT(&htim7);
 8001098:	48b4      	ldr	r0, [pc, #720]	; (800136c <main+0x33c>)
 800109a:	f004 fd0b 	bl	8005ab4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800109e:	2104      	movs	r1, #4
 80010a0:	48b3      	ldr	r0, [pc, #716]	; (8001370 <main+0x340>)
 80010a2:	f004 ffaf 	bl	8006004 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010a6:	2104      	movs	r1, #4
 80010a8:	48b2      	ldr	r0, [pc, #712]	; (8001374 <main+0x344>)
 80010aa:	f004 ffab 	bl	8006004 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010ae:	2104      	movs	r1, #4
 80010b0:	48b1      	ldr	r0, [pc, #708]	; (8001378 <main+0x348>)
 80010b2:	f004 ffa7 	bl	8006004 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010b6:	2104      	movs	r1, #4
 80010b8:	48b0      	ldr	r0, [pc, #704]	; (800137c <main+0x34c>)
 80010ba:	f004 ffa3 	bl	8006004 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010be:	2104      	movs	r1, #4
 80010c0:	48af      	ldr	r0, [pc, #700]	; (8001380 <main+0x350>)
 80010c2:	f004 ff9f 	bl	8006004 <HAL_TIM_Encoder_Start>

	main_loop_on=0;
 80010c6:	4baf      	ldr	r3, [pc, #700]	; (8001384 <main+0x354>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	motor_dir_flag=0;
 80010cc:	4bae      	ldr	r3, [pc, #696]	; (8001388 <main+0x358>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
	uint8_t unknown_flag=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t flag_stand_first=0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	717b      	strb	r3, [r7, #5]
	uint8_t cali_flag=0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
	uint8_t test_alpha =0;
 80010de:	2300      	movs	r3, #0
 80010e0:	713b      	strb	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_Delay(10000);
 80010e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80010e6:	f003 f925 	bl	8004334 <HAL_Delay>
#if !only_activate_linMotor_test_10mm

#if	!only_activate_linMotor_Set

#if !only_activate_Motor
		if(HAL_GPIO_ReadPin(state_controller_GPIO_Port, state_controller_Pin)==GPIO_PIN_SET ){
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	48a7      	ldr	r0, [pc, #668]	; (800138c <main+0x35c>)
 80010ee:	f003 ffeb 	bl	80050c8 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <main+0xd4>
			main_loop_on=1;
 80010f8:	4ba2      	ldr	r3, [pc, #648]	; (8001384 <main+0x354>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			cali_flag=0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71bb      	strb	r3, [r7, #6]
 8001102:	e00d      	b.n	8001120 <main+0xf0>

		}
		else{
			main_loop_on=0;
 8001104:	4b9f      	ldr	r3, [pc, #636]	; (8001384 <main+0x354>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
			if(!cali_flag){
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d107      	bne.n	8001120 <main+0xf0>
				runway_Up();
 8001110:	f002 fadc 	bl	80036cc <runway_Up>
				stage_PUSH();
 8001114:	f001 ff70 	bl	8002ff8 <stage_PUSH>
				calibration_4();
 8001118:	f002 f9aa 	bl	8003470 <calibration_4>
				cali_flag=1;
 800111c:	2301      	movs	r3, #1
 800111e:	71bb      	strb	r3, [r7, #6]
			}
		}
		if(main_loop_on){
 8001120:	4b98      	ldr	r3, [pc, #608]	; (8001384 <main+0x354>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0e0      	beq.n	80010ea <main+0xba>
#endif
			if(n_pwm_L ==0 && n_PWM_R == 0){
 8001128:	4b99      	ldr	r3, [pc, #612]	; (8001390 <main+0x360>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d169      	bne.n	8001204 <main+0x1d4>
 8001130:	4b98      	ldr	r3, [pc, #608]	; (8001394 <main+0x364>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d165      	bne.n	8001204 <main+0x1d4>
				if(HAL_GPIO_ReadPin(motor_speed_up_GPIO_Port, motor_speed_up_Pin)==GPIO_PIN_SET ){
 8001138:	2104      	movs	r1, #4
 800113a:	4897      	ldr	r0, [pc, #604]	; (8001398 <main+0x368>)
 800113c:	f003 ffc4 	bl	80050c8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d106      	bne.n	8001154 <main+0x124>
					speed=3.0;
 8001146:	4995      	ldr	r1, [pc, #596]	; (800139c <main+0x36c>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b94      	ldr	r3, [pc, #592]	; (80013a0 <main+0x370>)
 800114e:	e9c1 2300 	strd	r2, r3, [r1]
 8001152:	e015      	b.n	8001180 <main+0x150>

				}
				else if(HAL_GPIO_ReadPin(motor_speed_down_GPIO_Port, motor_speed_down_Pin)==GPIO_PIN_SET ){
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	488f      	ldr	r0, [pc, #572]	; (8001398 <main+0x368>)
 800115a:	f003 ffb5 	bl	80050c8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <main+0x142>
					speed=1.0;
 8001164:	498d      	ldr	r1, [pc, #564]	; (800139c <main+0x36c>)
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b8e      	ldr	r3, [pc, #568]	; (80013a4 <main+0x374>)
 800116c:	e9c1 2300 	strd	r2, r3, [r1]
 8001170:	e006      	b.n	8001180 <main+0x150>
				}
				else{
					speed=2.0;
 8001172:	498a      	ldr	r1, [pc, #552]	; (800139c <main+0x36c>)
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
				}

				if(speed == 1){
 8001180:	4b86      	ldr	r3, [pc, #536]	; (800139c <main+0x36c>)
 8001182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b86      	ldr	r3, [pc, #536]	; (80013a4 <main+0x374>)
 800118c:	f7ff fcac 	bl	8000ae8 <__aeabi_dcmpeq>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <main+0x17c>
					HAL_GPIO_WritePin(share_speed_GPIO_Port, share_speed_Pin, SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2102      	movs	r1, #2
 800119a:	4883      	ldr	r0, [pc, #524]	; (80013a8 <main+0x378>)
 800119c:	f003 ffac 	bl	80050f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(share_speed_1_GPIO_Port, share_speed_1_Pin, RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4879      	ldr	r0, [pc, #484]	; (800138c <main+0x35c>)
 80011a6:	f003 ffa7 	bl	80050f8 <HAL_GPIO_WritePin>
 80011aa:	e02b      	b.n	8001204 <main+0x1d4>

				}

				else if(speed == 2){
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <main+0x36c>)
 80011ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ba:	f7ff fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00a      	beq.n	80011da <main+0x1aa>
					HAL_GPIO_WritePin(share_speed_GPIO_Port, share_speed_Pin, RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2102      	movs	r1, #2
 80011c8:	4877      	ldr	r0, [pc, #476]	; (80013a8 <main+0x378>)
 80011ca:	f003 ff95 	bl	80050f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(share_speed_1_GPIO_Port, share_speed_1_Pin, SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2120      	movs	r1, #32
 80011d2:	486e      	ldr	r0, [pc, #440]	; (800138c <main+0x35c>)
 80011d4:	f003 ff90 	bl	80050f8 <HAL_GPIO_WritePin>
 80011d8:	e014      	b.n	8001204 <main+0x1d4>

				}

				else if(speed == 3){
 80011da:	4b70      	ldr	r3, [pc, #448]	; (800139c <main+0x36c>)
 80011dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <main+0x370>)
 80011e6:	f7ff fc7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <main+0x1d4>
					HAL_GPIO_WritePin(share_speed_GPIO_Port, share_speed_Pin, SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2102      	movs	r1, #2
 80011f4:	486c      	ldr	r0, [pc, #432]	; (80013a8 <main+0x378>)
 80011f6:	f003 ff7f 	bl	80050f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(share_speed_1_GPIO_Port, share_speed_1_Pin, SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2120      	movs	r1, #32
 80011fe:	4863      	ldr	r0, [pc, #396]	; (800138c <main+0x35c>)
 8001200:	f003 ff7a 	bl	80050f8 <HAL_GPIO_WritePin>
			}
#endif
#if !only_activate_Motor

#if	!only_activate_linMotor_Set
			if(HAL_GPIO_ReadPin(share_default_set_GPIO_Port, share_default_set_Pin)==GPIO_PIN_SET){
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	4868      	ldr	r0, [pc, #416]	; (80013ac <main+0x37c>)
 800120a:	f003 ff5d 	bl	80050c8 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d14c      	bne.n	80012ae <main+0x27e>
#endif
#if !only_activate_linMotor_2
				stage_PULL();
 8001214:	f001 ff26 	bl	8003064 <stage_PULL>
				new_standing_method(standing);
 8001218:	2002      	movs	r0, #2
 800121a:	f002 f9a1 	bl	8003560 <new_standing_method>

				walker_flag=0;
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <main+0x380>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
				delay_sec=0;
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <main+0x384>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
				default_set_flag=0;
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <main+0x388>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

				runway_Down();
 8001230:	f002 fa76 	bl	8003720 <runway_Down>
				walker_release();
 8001234:	f001 fece 	bl	8002fd4 <walker_release>
				while(!walker_flag){
 8001238:	e014      	b.n	8001264 <main+0x234>
#if	!only_activate_linMotor_Set

					if(HAL_GPIO_ReadPin(Walker_in_GPIO_Port, Walker_in_Pin)==GPIO_PIN_SET){
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	485b      	ldr	r0, [pc, #364]	; (80013ac <main+0x37c>)
 8001240:	f003 ff42 	bl	80050c8 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10c      	bne.n	8001264 <main+0x234>
						HAL_Delay(250);
 800124a:	20fa      	movs	r0, #250	; 0xfa
 800124c:	f003 f872 	bl	8004334 <HAL_Delay>
						walker_hold();
 8001250:	f001 feae 	bl	8002fb0 <walker_hold>
						runway_Up();
 8001254:	f002 fa3a 	bl	80036cc <runway_Up>
#endif
						walker_flag=1;
 8001258:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <main+0x380>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
						default_set_flag=1;
 800125e:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <main+0x388>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
				while(!walker_flag){
 8001264:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <main+0x380>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0e6      	beq.n	800123a <main+0x20a>
					//					if(delay_sec>=120){
					//						walker_flag=1;
					//						default_set_flag=0;
					//					}
				}
				HAL_Delay(5000);
 800126c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001270:	f003 f860 	bl	8004334 <HAL_Delay>
				stage_PUSH();
 8001274:	f001 fec0 	bl	8002ff8 <stage_PUSH>

				new_standing_method(sit);
 8001278:	2003      	movs	r0, #3
 800127a:	f002 f971 	bl	8003560 <new_standing_method>

				//				act time = ?????????
				if(default_set_flag){
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <main+0x388>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <main+0x27e>

					HAL_GPIO_WritePin(share_default_state_GPIO_Port, share_default_state_Pin, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128c:	4847      	ldr	r0, [pc, #284]	; (80013ac <main+0x37c>)
 800128e:	f003 ff33 	bl	80050f8 <HAL_GPIO_WritePin>
					delay_sec=0;
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <main+0x384>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
					//control board recognize time _5sec
					while(delay_sec<5);
 8001298:	bf00      	nop
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <main+0x384>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d9fb      	bls.n	800129a <main+0x26a>
					HAL_GPIO_WritePin(share_default_state_GPIO_Port, share_default_state_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4840      	ldr	r0, [pc, #256]	; (80013ac <main+0x37c>)
 80012aa:	f003 ff25 	bl	80050f8 <HAL_GPIO_WritePin>
			}
#endif
#endif
#if	!only_activate_linMotor_Set

			HAL_ADC_Start(&hadc1);
 80012ae:	4843      	ldr	r0, [pc, #268]	; (80013bc <main+0x38c>)
 80012b0:	f003 f8a8 	bl	8004404 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 200);
 80012b4:	21c8      	movs	r1, #200	; 0xc8
 80012b6:	4841      	ldr	r0, [pc, #260]	; (80013bc <main+0x38c>)
 80012b8:	f003 f976 	bl	80045a8 <HAL_ADC_PollForConversion>
			while((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) != HAL_ADC_STATE_REG_EOC);
 80012bc:	bf00      	nop
 80012be:	483f      	ldr	r0, [pc, #252]	; (80013bc <main+0x38c>)
 80012c0:	f003 fb3c 	bl	800493c <HAL_ADC_GetState>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ce:	d1f6      	bne.n	80012be <main+0x28e>
			joy_x=HAL_ADC_GetValue(&hadc1);
 80012d0:	483a      	ldr	r0, [pc, #232]	; (80013bc <main+0x38c>)
 80012d2:	f003 f9f4 	bl	80046be <HAL_ADC_GetValue>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <main+0x390>)
 80012dc:	801a      	strh	r2, [r3, #0]

			HAL_ADC_Start(&hadc1);
 80012de:	4837      	ldr	r0, [pc, #220]	; (80013bc <main+0x38c>)
 80012e0:	f003 f890 	bl	8004404 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 200);
 80012e4:	21c8      	movs	r1, #200	; 0xc8
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <main+0x38c>)
 80012e8:	f003 f95e 	bl	80045a8 <HAL_ADC_PollForConversion>
			while((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) != HAL_ADC_STATE_REG_EOC);
 80012ec:	bf00      	nop
 80012ee:	4833      	ldr	r0, [pc, #204]	; (80013bc <main+0x38c>)
 80012f0:	f003 fb24 	bl	800493c <HAL_ADC_GetState>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fe:	d1f6      	bne.n	80012ee <main+0x2be>
			joy_y=HAL_ADC_GetValue(&hadc1);
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <main+0x38c>)
 8001302:	f003 f9dc 	bl	80046be <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <main+0x394>)
 800130c:	801a      	strh	r2, [r3, #0]


			if(joy_x<800)	dir_motor_LR=right;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <main+0x390>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001316:	d203      	bcs.n	8001320 <main+0x2f0>
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <main+0x398>)
 800131a:	2203      	movs	r2, #3
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e00b      	b.n	8001338 <main+0x308>
			else if(joy_x>3200)	dir_motor_LR=left;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <main+0x390>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001328:	d903      	bls.n	8001332 <main+0x302>
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <main+0x398>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e002      	b.n	8001338 <main+0x308>
			else	dir_motor_LR=middle;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <main+0x398>)
 8001334:	2204      	movs	r2, #4
 8001336:	701a      	strb	r2, [r3, #0]
			if(joy_y>3400)	dir_motor_FB=backword;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <main+0x394>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f640 5248 	movw	r2, #3400	; 0xd48
 8001340:	4293      	cmp	r3, r2
 8001342:	d903      	bls.n	800134c <main+0x31c>
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <main+0x39c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e044      	b.n	80013d6 <main+0x3a6>
			else if(joy_y<1000)	dir_motor_FB=forword;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <main+0x394>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001354:	d23c      	bcs.n	80013d0 <main+0x3a0>
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <main+0x39c>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e03b      	b.n	80013d6 <main+0x3a6>
 800135e:	bf00      	nop
 8001360:	200004b4 	.word	0x200004b4
 8001364:	20000698 	.word	0x20000698
 8001368:	20000518 	.word	0x20000518
 800136c:	200006e4 	.word	0x200006e4
 8001370:	20000560 	.word	0x20000560
 8001374:	200005f4 	.word	0x200005f4
 8001378:	200003d4 	.word	0x200003d4
 800137c:	20000288 	.word	0x20000288
 8001380:	20000240 	.word	0x20000240
 8001384:	20000744 	.word	0x20000744
 8001388:	20000220 	.word	0x20000220
 800138c:	40020c00 	.word	0x40020c00
 8001390:	20000210 	.word	0x20000210
 8001394:	20000214 	.word	0x20000214
 8001398:	40021400 	.word	0x40021400
 800139c:	20000000 	.word	0x20000000
 80013a0:	40080000 	.word	0x40080000
 80013a4:	3ff00000 	.word	0x3ff00000
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	200006e0 	.word	0x200006e0
 80013b4:	20000224 	.word	0x20000224
 80013b8:	2000072e 	.word	0x2000072e
 80013bc:	20000420 	.word	0x20000420
 80013c0:	200005f2 	.word	0x200005f2
 80013c4:	2000041c 	.word	0x2000041c
 80013c8:	2000023c 	.word	0x2000023c
 80013cc:	20000468 	.word	0x20000468
			else dir_motor_FB=middle;
 80013d0:	4b8a      	ldr	r3, [pc, #552]	; (80015fc <main+0x5cc>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	701a      	strb	r2, [r3, #0]
#endif

#if !only_activate_Motor
#if	!only_activate_linMotor_Set

			if(n_PWM_R ==0 && n_pwm_L ==0){
 80013d6:	4b8a      	ldr	r3, [pc, #552]	; (8001600 <main+0x5d0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10a      	bne.n	80013f4 <main+0x3c4>
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <main+0x5d4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <main+0x3c4>
				HAL_GPIO_WritePin(share_stop_out_GPIO_Port, share_stop_out_Pin, SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ec:	4886      	ldr	r0, [pc, #536]	; (8001608 <main+0x5d8>)
 80013ee:	f003 fe83 	bl	80050f8 <HAL_GPIO_WritePin>
 80013f2:	e005      	b.n	8001400 <main+0x3d0>
			}
			else{
				HAL_GPIO_WritePin(share_stop_out_GPIO_Port, share_stop_out_Pin, RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fa:	4883      	ldr	r0, [pc, #524]	; (8001608 <main+0x5d8>)
 80013fc:	f003 fe7c 	bl	80050f8 <HAL_GPIO_WritePin>
			}


			if(HAL_GPIO_ReadPin(share_seat_in_GPIO_Port,share_seat_in_Pin) == GPIO_PIN_SET){
 8001400:	2108      	movs	r1, #8
 8001402:	4882      	ldr	r0, [pc, #520]	; (800160c <main+0x5dc>)
 8001404:	f003 fe60 	bl	80050c8 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <main+0x3ea>
				seat=1;
 800140e:	4b80      	ldr	r3, [pc, #512]	; (8001610 <main+0x5e0>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
				unknown_flag=1;
 8001414:	2301      	movs	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	e01f      	b.n	800145a <main+0x42a>
			}
			else{
				if(n_PWM_R ==0 && n_pwm_L ==0){
 800141a:	4b79      	ldr	r3, [pc, #484]	; (8001600 <main+0x5d0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d11b      	bne.n	800145a <main+0x42a>
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <main+0x5d4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d117      	bne.n	800145a <main+0x42a>
					seat=0;
 800142a:	4b79      	ldr	r3, [pc, #484]	; (8001610 <main+0x5e0>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
					unknown_flag=0;
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
					if(dir_motor_FB==middle &&  dir_motor_LR==middle){
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <main+0x5cc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d109      	bne.n	8001450 <main+0x420>
 800143c:	4b75      	ldr	r3, [pc, #468]	; (8001614 <main+0x5e4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d105      	bne.n	8001450 <main+0x420>
						HAL_GPIO_WritePin(share_seat_joy_out_GPIO_Port, share_seat_joy_out_Pin, SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2101      	movs	r1, #1
 8001448:	4870      	ldr	r0, [pc, #448]	; (800160c <main+0x5dc>)
 800144a:	f003 fe55 	bl	80050f8 <HAL_GPIO_WritePin>
 800144e:	e004      	b.n	800145a <main+0x42a>
					}
					else{
						HAL_GPIO_WritePin(share_seat_joy_out_GPIO_Port, share_seat_joy_out_Pin, RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2101      	movs	r1, #1
 8001454:	486d      	ldr	r0, [pc, #436]	; (800160c <main+0x5dc>)
 8001456:	f003 fe4f 	bl	80050f8 <HAL_GPIO_WritePin>
			}
#endif

#if	!only_activate_linMotor_Set
			///////////////////////////////////////////////////////////////////////////////////////
			if(HAL_GPIO_ReadPin(share_standing_method_GPIO_Port, share_standing_method_Pin)==GPIO_PIN_SET){
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	486e      	ldr	r0, [pc, #440]	; (8001618 <main+0x5e8>)
 8001460:	f003 fe32 	bl	80050c8 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b01      	cmp	r3, #1
 8001468:	d146      	bne.n	80014f8 <main+0x4c8>
#endif
#if !only_activate_linMotor_1

				stage_PULL();
 800146a:	f001 fdfb 	bl	8003064 <stage_PULL>

				walker_flag=0;
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <main+0x5ec>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
				delay_sec=0;
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <main+0x5f0>)
 8001476:	2200      	movs	r2, #0
 8001478:	801a      	strh	r2, [r3, #0]
				standing_complete_flag=0;
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <main+0x5f4>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

				new_standing_method(standing);
 8001480:	2002      	movs	r0, #2
 8001482:	f002 f86d 	bl	8003560 <new_standing_method>

				runway_Down();
 8001486:	f002 f94b 	bl	8003720 <runway_Down>
				walker_release();
 800148a:	f001 fda3 	bl	8002fd4 <walker_release>


				while(!walker_flag){
 800148e:	e011      	b.n	80014b4 <main+0x484>
#if	!only_activate_linMotor_Set
					if(HAL_GPIO_ReadPin(Walker_in_GPIO_Port, Walker_in_Pin)==GPIO_PIN_RESET){
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	485d      	ldr	r0, [pc, #372]	; (800160c <main+0x5dc>)
 8001496:	f003 fe17 	bl	80050c8 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <main+0x47e>
#endif
						walker_flag=1;
 80014a0:	4b5e      	ldr	r3, [pc, #376]	; (800161c <main+0x5ec>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
						standing_complete_flag=1;
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <main+0x5f4>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e002      	b.n	80014b4 <main+0x484>

#if	!only_activate_linMotor_Set
					}
					else{
						walker_flag=0;
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <main+0x5ec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
				while(!walker_flag){
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <main+0x5ec>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e9      	beq.n	8001490 <main+0x460>
					}

#endif
				}

				delay_sec=0;
 80014bc:	4b58      	ldr	r3, [pc, #352]	; (8001620 <main+0x5f0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]
				if(standing_complete_flag == 1){
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <main+0x5f4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d116      	bne.n	80014f8 <main+0x4c8>
					HAL_GPIO_WritePin(share_standing_complete_GPIO_Port, share_standing_complete_Pin, SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	484e      	ldr	r0, [pc, #312]	; (800160c <main+0x5dc>)
 80014d2:	f003 fe11 	bl	80050f8 <HAL_GPIO_WritePin>
					//control board recognize time _5sec
					while(delay_sec<10);
 80014d6:	bf00      	nop
 80014d8:	4b51      	ldr	r3, [pc, #324]	; (8001620 <main+0x5f0>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d9fb      	bls.n	80014d8 <main+0x4a8>
					HAL_GPIO_WritePin(share_standing_complete_GPIO_Port, share_standing_complete_Pin, RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e6:	4849      	ldr	r0, [pc, #292]	; (800160c <main+0x5dc>)
 80014e8:	f003 fe06 	bl	80050f8 <HAL_GPIO_WritePin>
					runway_Up();
 80014ec:	f002 f8ee 	bl	80036cc <runway_Up>
					HAL_Delay(10000);
 80014f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80014f4:	f002 ff1e 	bl	8004334 <HAL_Delay>
#if only_activate_Motor
			unknown_flag=1;
#endif
#if	!only_activate_linMotor_Set

			if(unknown_flag==1){
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	f47f adf5 	bne.w	80010ea <main+0xba>
#if !only_activate_Motor
				HAL_GPIO_WritePin(share_seat_joy_out_GPIO_Port, share_seat_joy_out_Pin, SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2101      	movs	r1, #1
 8001504:	4841      	ldr	r0, [pc, #260]	; (800160c <main+0x5dc>)
 8001506:	f003 fdf7 	bl	80050f8 <HAL_GPIO_WritePin>
#endif
				//motor control
				if(dir_motor_FB == forword){
 800150a:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <main+0x5cc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d124      	bne.n	800155c <main+0x52c>
					motor_dir_flag=1;
 8001512:	4b45      	ldr	r3, [pc, #276]	; (8001628 <main+0x5f8>)
 8001514:	2201      	movs	r2, #1
 8001516:	801a      	strh	r2, [r3, #0]
					if(dir_motor_LR == middle){
 8001518:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <main+0x5e4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d106      	bne.n	800152e <main+0x4fe>
						pwm_L=100;
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <main+0x5fc>)
 8001522:	2264      	movs	r2, #100	; 0x64
 8001524:	601a      	str	r2, [r3, #0]
						PWM_R=100;
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <main+0x600>)
 8001528:	2264      	movs	r2, #100	; 0x64
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e093      	b.n	8001656 <main+0x626>
					}
					else if(dir_motor_LR == left){
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <main+0x5e4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d106      	bne.n	8001544 <main+0x514>
						pwm_L=100-20;
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <main+0x5fc>)
 8001538:	2250      	movs	r2, #80	; 0x50
 800153a:	601a      	str	r2, [r3, #0]
						PWM_R=100;
 800153c:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <main+0x600>)
 800153e:	2264      	movs	r2, #100	; 0x64
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e088      	b.n	8001656 <main+0x626>
					}
					else if(dir_motor_LR == right){
 8001544:	4b33      	ldr	r3, [pc, #204]	; (8001614 <main+0x5e4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b03      	cmp	r3, #3
 800154a:	f040 8084 	bne.w	8001656 <main+0x626>
						pwm_L=100;
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <main+0x5fc>)
 8001550:	2264      	movs	r2, #100	; 0x64
 8001552:	601a      	str	r2, [r3, #0]
						PWM_R=100-20;
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <main+0x600>)
 8001556:	2250      	movs	r2, #80	; 0x50
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e07c      	b.n	8001656 <main+0x626>
					}
				}
				else if(dir_motor_FB == backword){
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <main+0x5cc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d129      	bne.n	80015b8 <main+0x588>
					motor_dir_flag=2;
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <main+0x5f8>)
 8001566:	2202      	movs	r2, #2
 8001568:	801a      	strh	r2, [r3, #0]

					if(dir_motor_LR == middle){
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <main+0x5e4>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b04      	cmp	r3, #4
 8001570:	d108      	bne.n	8001584 <main+0x554>
						pwm_L=-100.0*backword_speed;
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <main+0x5fc>)
 8001574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001578:	601a      	str	r2, [r3, #0]
						PWM_R=-100.0*backword_speed;
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <main+0x600>)
 800157c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e068      	b.n	8001656 <main+0x626>
					}
					else if(dir_motor_LR == left){
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <main+0x5e4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d108      	bne.n	800159e <main+0x56e>
						pwm_L=-(100.0-20.0)*backword_speed;
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <main+0x5fc>)
 800158e:	f06f 0233 	mvn.w	r2, #51	; 0x33
 8001592:	601a      	str	r2, [r3, #0]
						PWM_R=-100.0*backword_speed;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <main+0x600>)
 8001596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e05b      	b.n	8001656 <main+0x626>
					}
					else if(dir_motor_LR == right){
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <main+0x5e4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d157      	bne.n	8001656 <main+0x626>
						pwm_L=-100.0*backword_speed;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <main+0x5fc>)
 80015a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015ac:	601a      	str	r2, [r3, #0]
						PWM_R=-(100.0-20.0)*backword_speed;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <main+0x600>)
 80015b0:	f06f 0233 	mvn.w	r2, #51	; 0x33
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e04e      	b.n	8001656 <main+0x626>
					}
				}
				else if(dir_motor_FB == middle){
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <main+0x5cc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d14a      	bne.n	8001656 <main+0x626>

					if(dir_motor_LR == middle){
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <main+0x5e4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d10b      	bne.n	80015e0 <main+0x5b0>
						motor_dir_flag=3;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <main+0x5f8>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	801a      	strh	r2, [r3, #0]
						pwm_L=pre_pwm_L;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <main+0x604>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <main+0x5fc>)
 80015d4:	6013      	str	r3, [r2, #0]
						PWM_R=pre_PWM_R;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <main+0x608>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <main+0x600>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e03a      	b.n	8001656 <main+0x626>
					}
					else if(dir_motor_LR == left){
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <main+0x5e4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d129      	bne.n	800163c <main+0x60c>
						motor_dir_flag=1;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <main+0x5f8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	801a      	strh	r2, [r3, #0]
						pwm_L=40;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <main+0x5fc>)
 80015f0:	2228      	movs	r2, #40	; 0x28
 80015f2:	601a      	str	r2, [r3, #0]
						PWM_R=80;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <main+0x600>)
 80015f6:	2250      	movs	r2, #80	; 0x50
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e02c      	b.n	8001656 <main+0x626>
 80015fc:	20000468 	.word	0x20000468
 8001600:	20000214 	.word	0x20000214
 8001604:	20000210 	.word	0x20000210
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	20000222 	.word	0x20000222
 8001614:	2000023c 	.word	0x2000023c
 8001618:	40021400 	.word	0x40021400
 800161c:	200006e0 	.word	0x200006e0
 8001620:	20000224 	.word	0x20000224
 8001624:	200005f0 	.word	0x200005f0
 8001628:	20000220 	.word	0x20000220
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000218 	.word	0x20000218
 8001638:	2000021c 	.word	0x2000021c
					}
					else if(dir_motor_LR == right){
 800163c:	4b49      	ldr	r3, [pc, #292]	; (8001764 <main+0x734>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d108      	bne.n	8001656 <main+0x626>
						motor_dir_flag=1;
 8001644:	4b48      	ldr	r3, [pc, #288]	; (8001768 <main+0x738>)
 8001646:	2201      	movs	r2, #1
 8001648:	801a      	strh	r2, [r3, #0]
						pwm_L=80;
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <main+0x73c>)
 800164c:	2250      	movs	r2, #80	; 0x50
 800164e:	601a      	str	r2, [r3, #0]
						PWM_R=40;
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <main+0x740>)
 8001652:	2228      	movs	r2, #40	; 0x28
 8001654:	601a      	str	r2, [r3, #0]
					}
				}
				if(motor_dir_flag==1 || motor_dir_flag==2)
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <main+0x738>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <main+0x636>
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <main+0x738>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d107      	bne.n	8001676 <main+0x646>
				{
					pre_PWM_R=PWM_R;
 8001666:	4b42      	ldr	r3, [pc, #264]	; (8001770 <main+0x740>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a42      	ldr	r2, [pc, #264]	; (8001774 <main+0x744>)
 800166c:	6013      	str	r3, [r2, #0]
					pre_pwm_L=pwm_L;
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <main+0x73c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a41      	ldr	r2, [pc, #260]	; (8001778 <main+0x748>)
 8001674:	6013      	str	r3, [r2, #0]
				}


#if !only_disable_Motor

				pwm_L = (double)pwm_L*(double)speed/3.0;
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <main+0x73c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff62 	bl	8000544 <__aeabi_i2d>
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <main+0x74c>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffc7 	bl	8000618 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <main+0x750>)
 8001698:	f7ff f8e8 	bl	800086c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa68 	bl	8000b78 <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <main+0x73c>)
 80016ac:	6013      	str	r3, [r2, #0]
				//				if(PWM_R > 0)
				PWM_R = (double)PWM_R*(double)speed/3.0;
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <main+0x740>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff46 	bl	8000544 <__aeabi_i2d>
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <main+0x74c>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ffab 	bl	8000618 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <main+0x750>)
 80016d0:	f7ff f8cc 	bl	800086c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa4c 	bl	8000b78 <__aeabi_d2iz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a23      	ldr	r2, [pc, #140]	; (8001770 <main+0x740>)
 80016e4:	6013      	str	r3, [r2, #0]
				pwm_L=0;
				PWM_R=0;
#endif


				if(dir_motor_LR == right){
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <main+0x734>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d106      	bne.n	80016fc <main+0x6cc>
					HAL_GPIO_WritePin(share_Right_GPIO_Port, share_Right_Pin, SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <main+0x754>)
 80016f6:	f003 fcff 	bl	80050f8 <HAL_GPIO_WritePin>
 80016fa:	e005      	b.n	8001708 <main+0x6d8>
				}
				else{
					HAL_GPIO_WritePin(share_Right_GPIO_Port, share_Right_Pin, RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	4820      	ldr	r0, [pc, #128]	; (8001784 <main+0x754>)
 8001704:	f003 fcf8 	bl	80050f8 <HAL_GPIO_WritePin>
				}
				if(dir_motor_LR == left){
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <main+0x734>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d106      	bne.n	800171e <main+0x6ee>
					HAL_GPIO_WritePin(share_Left_GPIO_Port, share_Left_Pin, SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001716:	481c      	ldr	r0, [pc, #112]	; (8001788 <main+0x758>)
 8001718:	f003 fcee 	bl	80050f8 <HAL_GPIO_WritePin>
 800171c:	e005      	b.n	800172a <main+0x6fa>
				}
				else{
					HAL_GPIO_WritePin(share_Left_GPIO_Port, share_Left_Pin, RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <main+0x758>)
 8001726:	f003 fce7 	bl	80050f8 <HAL_GPIO_WritePin>
				}
				if((n_PWM_R<=0 || n_pwm_L<=0) && dir_motor_FB == backword){
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <main+0x75c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd03      	ble.n	800173a <main+0x70a>
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <main+0x760>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc0a      	bgt.n	8001750 <main+0x720>
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <main+0x764>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <main+0x720>
					HAL_GPIO_WritePin(share_Back_GPIO_Port, share_Back_Pin, SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <main+0x754>)
 800174a:	f003 fcd5 	bl	80050f8 <HAL_GPIO_WritePin>
 800174e:	e005      	b.n	800175c <main+0x72c>
				}
				else{
					HAL_GPIO_WritePin(share_Back_GPIO_Port, share_Back_Pin, RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <main+0x754>)
 8001758:	f003 fcce 	bl	80050f8 <HAL_GPIO_WritePin>
				//				printf("x:%d y:%d \r\n",dir_motor_LR,dir_motor_FB);
				//				printf("pwm_L:%d PWM_R:%d \r\n",pwm_L,PWM_R);
				//				printf("speed:%d \r\n",speed);
				//				printf("n_R:%d n_L:%d \r\n",n_PWM_R,n_pwm_L);

				HAL_Delay(100);
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	f002 fde9 	bl	8004334 <HAL_Delay>
		if(HAL_GPIO_ReadPin(state_controller_GPIO_Port, state_controller_Pin)==GPIO_PIN_SET ){
 8001762:	e4c2      	b.n	80010ea <main+0xba>
 8001764:	2000023c 	.word	0x2000023c
 8001768:	20000220 	.word	0x20000220
 800176c:	20000208 	.word	0x20000208
 8001770:	2000020c 	.word	0x2000020c
 8001774:	2000021c 	.word	0x2000021c
 8001778:	20000218 	.word	0x20000218
 800177c:	20000000 	.word	0x20000000
 8001780:	40080000 	.word	0x40080000
 8001784:	40020400 	.word	0x40020400
 8001788:	40021000 	.word	0x40021000
 800178c:	20000214 	.word	0x20000214
 8001790:	20000210 	.word	0x20000210
 8001794:	20000468 	.word	0x20000468

08001798 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fe54 	bl	8007454 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <SystemClock_Config+0xcc>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <SystemClock_Config+0xcc>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <SystemClock_Config+0xcc>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <SystemClock_Config+0xd0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <SystemClock_Config+0xd0>)
 80017e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <SystemClock_Config+0xd0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	2302      	movs	r3, #2
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001808:	2304      	movs	r3, #4
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800180c:	23a8      	movs	r3, #168	; 0xa8
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fc85 	bl	800512c <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001828:	f001 ffb2 	bl	8003790 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2105      	movs	r1, #5
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fee6 	bl	800561c <HAL_RCC_ClockConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001856:	f001 ff9b 	bl	8003790 <Error_Handler>
	}
}
 800185a:	bf00      	nop
 800185c:	3750      	adds	r7, #80	; 0x50
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000

0800186c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_ADC1_Init+0xb4>)
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <MX_ADC1_Init+0xb8>)
 8001882:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <MX_ADC1_Init+0xb4>)
 8001886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MX_ADC1_Init+0xb4>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <MX_ADC1_Init+0xb4>)
 8001894:	2201      	movs	r2, #1
 8001896:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_ADC1_Init+0xb4>)
 800189a:	2200      	movs	r2, #0
 800189c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <MX_ADC1_Init+0xbc>)
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018ce:	f002 fd55 	bl	800437c <HAL_ADC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80018d8:	f001 ff5a 	bl	8003790 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80018dc:	2305      	movs	r3, #5
 80018de:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018e4:	2303      	movs	r3, #3
 80018e6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	4619      	mov	r1, r3
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <MX_ADC1_Init+0xb4>)
 80018ee:	f002 fef3 	bl	80046d8 <HAL_ADC_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80018f8:	f001 ff4a 	bl	8003790 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80018fc:	2306      	movs	r3, #6
 80018fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_ADC1_Init+0xb4>)
 800190a:	f002 fee5 	bl	80046d8 <HAL_ADC_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001914:	f001 ff3c 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000420 	.word	0x20000420
 8001924:	40012000 	.word	0x40012000
 8001928:	0f000001 	.word	0x0f000001

0800192c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	2224      	movs	r2, #36	; 0x24
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fd8a 	bl	8007454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_TIM1_Init+0xa8>)
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <MX_TIM1_Init+0xac>)
 800194c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <MX_TIM1_Init+0xa8>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM1_Init+0xa8>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_TIM1_Init+0xa8>)
 800195c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001960:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM1_Init+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM1_Init+0xa8>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_TIM1_Init+0xa8>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001974:	2303      	movs	r3, #3
 8001976:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800197c:	2301      	movs	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM1_Init+0xa8>)
 80019a0:	f004 fa8a 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 80019aa:	f001 fef1 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM1_Init+0xa8>)
 80019bc:	f005 f97a 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 80019c6:	f001 fee3 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000560 	.word	0x20000560
 80019d8:	40010000 	.word	0x40010000

080019dc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fd32 	bl	8007454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_TIM2_Init+0xa4>)
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a12:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a20:	2303      	movs	r3, #3
 8001a22:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a4c:	f004 fa34 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001a56:	f001 fe9b 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <MX_TIM2_Init+0xa4>)
 8001a68:	f005 f924 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8001a72:	f001 fe8d 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200005f4 	.word	0x200005f4

08001a84 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2224      	movs	r2, #36	; 0x24
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fcde 	bl	8007454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <MX_TIM3_Init+0xa4>)
 8001aa4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001af2:	f004 f9e1 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8001afc:	f001 fe48 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM3_Init+0xa0>)
 8001b0e:	f005 f8d1 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001b18:	f001 fe3a 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3730      	adds	r7, #48	; 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003d4 	.word	0x200003d4
 8001b28:	40000400 	.word	0x40000400

08001b2c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fc8a 	bl	8007454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b4c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b60:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001b9a:	f004 f98d 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8001ba4:	f001 fdf4 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_TIM4_Init+0xa0>)
 8001bb6:	f005 f87d 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 8001bc0:	f001 fde6 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000288 	.word	0x20000288
 8001bd0:	40000800 	.word	0x40000800

08001bd4 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <MX_TIM5_Init+0xe8>)
 8001c08:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 42-1;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c0c:	2229      	movs	r2, #41	; 0x29
 8001c0e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 100-1;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c18:	2263      	movs	r2, #99	; 0x63
 8001c1a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c28:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c2a:	f003 fef3 	bl	8005a14 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM5_Init+0x64>
	{
		Error_Handler();
 8001c34:	f001 fdac 	bl	8003790 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c46:	f004 fc35 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM5_Init+0x80>
	{
		Error_Handler();
 8001c50:	f001 fd9e 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c56:	f003 ff9d 	bl	8005b94 <HAL_TIM_PWM_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM5_Init+0x90>
	{
		Error_Handler();
 8001c60:	f001 fd96 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c74:	f005 f81e 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM5_Init+0xae>
	{
		Error_Handler();
 8001c7e:	f001 fd87 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	220c      	movs	r2, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001c9a:	f004 fb49 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM5_Init+0xd4>
	{
		Error_Handler();
 8001ca4:	f001 fd74 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM5_Init+0xe4>)
 8001caa:	f002 f811 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8001cae:	bf00      	nop
 8001cb0:	3738      	adds	r7, #56	; 0x38
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000038c 	.word	0x2000038c
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <MX_TIM6_Init+0x68>)
 8001cd2:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 8400-1;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001cd6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001cda:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000-1;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce8:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001cf2:	f003 fe8f 	bl	8005a14 <HAL_TIM_Base_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001cfc:	f001 fd48 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_TIM6_Init+0x64>)
 8001d0e:	f004 ffd1 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001d18:	f001 fd3a 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000518 	.word	0x20000518
 8001d28:	40001000 	.word	0x40001000

08001d2c <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_TIM7_Init+0x68>)
 8001d3e:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 8400-1;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d42:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001d46:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000-1;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d50:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d54:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d5e:	f003 fe59 	bl	8005a14 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 8001d68:	f001 fd12 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_TIM7_Init+0x64>)
 8001d7a:	f004 ff9b 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 8001d84:	f001 fd04 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200006e4 	.word	0x200006e4
 8001d94:	40001400 	.word	0x40001400

08001d98 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 fb54 	bl	8007454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <MX_TIM8_Init+0xac>)
 8001db8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001de0:	2303      	movs	r3, #3
 8001de2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001de8:	2301      	movs	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001e0c:	f004 f854 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM8_Init+0x82>
	{
		Error_Handler();
 8001e16:	f001 fcbb 	bl	8003790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <MX_TIM8_Init+0xa8>)
 8001e28:	f004 ff44 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM8_Init+0x9e>
	{
		Error_Handler();
 8001e32:	f001 fcad 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	3730      	adds	r7, #48	; 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000240 	.word	0x20000240
 8001e44:	40010400 	.word	0x40010400

08001e48 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e70:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <MX_TIM9_Init+0xd4>)
 8001e72:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 84-1;
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e76:	2253      	movs	r2, #83	; 0x53
 8001e78:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 100-1;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e82:	2263      	movs	r2, #99	; 0x63
 8001e84:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e92:	4821      	ldr	r0, [pc, #132]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001e94:	f003 fdbe 	bl	8005a14 <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM9_Init+0x5a>
	{
		Error_Handler();
 8001e9e:	f001 fc77 	bl	8003790 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4619      	mov	r1, r3
 8001eae:	481a      	ldr	r0, [pc, #104]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001eb0:	f004 fb00 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM9_Init+0x76>
	{
		Error_Handler();
 8001eba:	f001 fc69 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ebe:	4816      	ldr	r0, [pc, #88]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001ec0:	f003 fe68 	bl	8005b94 <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM9_Init+0x86>
	{
		Error_Handler();
 8001eca:	f001 fc61 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	; 0x60
 8001ed0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001ee6:	f004 fa23 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM9_Init+0xac>
	{
		Error_Handler();
 8001ef0:	f001 fc4e 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001efc:	f004 fa18 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM9_Init+0xc2>
	{
		Error_Handler();
 8001f06:	f001 fc43 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <MX_TIM9_Init+0xd0>)
 8001f0c:	f001 fee0 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200005a8 	.word	0x200005a8
 8001f1c:	40014000 	.word	0x40014000

08001f20 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <MX_TIM10_Init+0x94>)
 8001f3c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 84-1;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f40:	2253      	movs	r2, #83	; 0x53
 8001f42:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 100-1;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f4c:	2263      	movs	r2, #99	; 0x63
 8001f4e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f5e:	f003 fd59 	bl	8005a14 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM10_Init+0x4c>
	{
		Error_Handler();
 8001f68:	f001 fc12 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f6e:	f003 fe11 	bl	8005b94 <HAL_TIM_PWM_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM10_Init+0x5c>
	{
		Error_Handler();
 8001f78:	f001 fc0a 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001f94:	f004 f9cc 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM10_Init+0x82>
	{
		Error_Handler();
 8001f9e:	f001 fbf7 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM10_Init+0x90>)
 8001fa4:	f001 fe94 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000031c 	.word	0x2000031c
 8001fb4:	40014400 	.word	0x40014400

08001fb8 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <MX_TIM11_Init+0x90>)
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <MX_TIM11_Init+0x94>)
 8001fd4:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 84-1;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <MX_TIM11_Init+0x90>)
 8001fd8:	2253      	movs	r2, #83	; 0x53
 8001fda:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_TIM11_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 100-1;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <MX_TIM11_Init+0x90>)
 8001fe4:	2263      	movs	r2, #99	; 0x63
 8001fe6:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_TIM11_Init+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_TIM11_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <MX_TIM11_Init+0x90>)
 8001ff6:	f003 fd0d 	bl	8005a14 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM11_Init+0x4c>
	{
		Error_Handler();
 8002000:	f001 fbc6 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002004:	4810      	ldr	r0, [pc, #64]	; (8002048 <MX_TIM11_Init+0x90>)
 8002006:	f003 fdc5 	bl	8005b94 <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM11_Init+0x5c>
	{
		Error_Handler();
 8002010:	f001 fbbe 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002014:	2360      	movs	r3, #96	; 0x60
 8002016:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	4807      	ldr	r0, [pc, #28]	; (8002048 <MX_TIM11_Init+0x90>)
 800202c:	f004 f980 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM11_Init+0x82>
	{
		Error_Handler();
 8002036:	f001 fbab 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <MX_TIM11_Init+0x90>)
 800203c:	f001 fe48 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200004b4 	.word	0x200004b4
 800204c:	40014800 	.word	0x40014800

08002050 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0320 	add.w	r3, r7, #32
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <MX_TIM12_Init+0xbc>)
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <MX_TIM12_Init+0xc0>)
 800207a:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 42-1;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <MX_TIM12_Init+0xbc>)
 800207e:	2229      	movs	r2, #41	; 0x29
 8002080:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <MX_TIM12_Init+0xbc>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <MX_TIM12_Init+0xbc>)
 800208a:	2263      	movs	r2, #99	; 0x63
 800208c:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_TIM12_Init+0xbc>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_TIM12_Init+0xbc>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800209a:	481c      	ldr	r0, [pc, #112]	; (800210c <MX_TIM12_Init+0xbc>)
 800209c:	f003 fcba 	bl	8005a14 <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM12_Init+0x5a>
	{
		Error_Handler();
 80020a6:	f001 fb73 	bl	8003790 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ae:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0320 	add.w	r3, r7, #32
 80020b4:	4619      	mov	r1, r3
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <MX_TIM12_Init+0xbc>)
 80020b8:	f004 f9fc 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM12_Init+0x76>
	{
		Error_Handler();
 80020c2:	f001 fb65 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80020c6:	4811      	ldr	r0, [pc, #68]	; (800210c <MX_TIM12_Init+0xbc>)
 80020c8:	f003 fd64 	bl	8005b94 <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM12_Init+0x86>
	{
		Error_Handler();
 80020d2:	f001 fb5d 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	; 0x60
 80020d8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2204      	movs	r2, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <MX_TIM12_Init+0xbc>)
 80020ee:	f004 f91f 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM12_Init+0xac>
	{
		Error_Handler();
 80020f8:	f001 fb4a 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <MX_TIM12_Init+0xbc>)
 80020fe:	f001 fde7 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8002102:	bf00      	nop
 8002104:	3730      	adds	r7, #48	; 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000698 	.word	0x20000698
 8002110:	40001800 	.word	0x40001800

08002114 <MX_TIM13_Init>:
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]
 800212a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_TIM13_Init+0x90>)
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <MX_TIM13_Init+0x94>)
 8002130:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 42-1;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002134:	2229      	movs	r2, #41	; 0x29
 8002136:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_TIM13_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 100-1;
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002140:	2263      	movs	r2, #99	; 0x63
 8002142:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_TIM13_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002150:	4814      	ldr	r0, [pc, #80]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002152:	f003 fc5f 	bl	8005a14 <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM13_Init+0x4c>
	{
		Error_Handler();
 800215c:	f001 fb18 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002160:	4810      	ldr	r0, [pc, #64]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002162:	f003 fd17 	bl	8005b94 <HAL_TIM_PWM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM13_Init+0x5c>
	{
		Error_Handler();
 800216c:	f001 fb10 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002170:	2360      	movs	r3, #96	; 0x60
 8002172:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002188:	f004 f8d2 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM13_Init+0x82>
	{
		Error_Handler();
 8002192:	f001 fafd 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM13_Init+0x90>)
 8002198:	f001 fd9a 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000046c 	.word	0x2000046c
 80021a8:	40001c00 	.word	0x40001c00

080021ac <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_TIM14_Init+0x94>)
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <MX_TIM14_Init+0x98>)
 80021c8:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 1280-1;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_TIM14_Init+0x94>)
 80021cc:	f240 42ff 	movw	r2, #1279	; 0x4ff
 80021d0:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_TIM14_Init+0x94>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 100-1;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_TIM14_Init+0x94>)
 80021da:	2263      	movs	r2, #99	; 0x63
 80021dc:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_TIM14_Init+0x94>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_TIM14_Init+0x94>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80021ea:	4815      	ldr	r0, [pc, #84]	; (8002240 <MX_TIM14_Init+0x94>)
 80021ec:	f003 fc12 	bl	8005a14 <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM14_Init+0x4e>
	{
		Error_Handler();
 80021f6:	f001 facb 	bl	8003790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <MX_TIM14_Init+0x94>)
 80021fc:	f003 fcca 	bl	8005b94 <HAL_TIM_PWM_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM14_Init+0x5e>
	{
		Error_Handler();
 8002206:	f001 fac3 	bl	8003790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220a:	2360      	movs	r3, #96	; 0x60
 800220c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 20;
 800220e:	2314      	movs	r3, #20
 8002210:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM14_Init+0x94>)
 8002222:	f004 f885 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM14_Init+0x84>
	{
		Error_Handler();
 800222c:	f001 fab0 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
	HAL_TIM_MspPostInit(&htim14);
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM14_Init+0x94>)
 8002232:	f001 fd4d 	bl	8003cd0 <HAL_TIM_MspPostInit>

}
 8002236:	bf00      	nop
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000063c 	.word	0x2000063c
 8002244:	40002000 	.word	0x40002000

08002248 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART3_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART3_UART_Init+0x4c>)
 8002280:	f004 fda8 	bl	8006dd4 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800228a:	f001 fa81 	bl	8003790 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002d4 	.word	0x200002d4
 8002298:	40004800 	.word	0x40004800

0800229c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	4b97      	ldr	r3, [pc, #604]	; (8002514 <MX_GPIO_Init+0x278>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <MX_GPIO_Init+0x278>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b94      	ldr	r3, [pc, #592]	; (8002514 <MX_GPIO_Init+0x278>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	4b90      	ldr	r3, [pc, #576]	; (8002514 <MX_GPIO_Init+0x278>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a8f      	ldr	r2, [pc, #572]	; (8002514 <MX_GPIO_Init+0x278>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <MX_GPIO_Init+0x278>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b89      	ldr	r3, [pc, #548]	; (8002514 <MX_GPIO_Init+0x278>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a88      	ldr	r2, [pc, #544]	; (8002514 <MX_GPIO_Init+0x278>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b86      	ldr	r3, [pc, #536]	; (8002514 <MX_GPIO_Init+0x278>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <MX_GPIO_Init+0x278>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <MX_GPIO_Init+0x278>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <MX_GPIO_Init+0x278>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <MX_GPIO_Init+0x278>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <MX_GPIO_Init+0x278>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <MX_GPIO_Init+0x278>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b74      	ldr	r3, [pc, #464]	; (8002514 <MX_GPIO_Init+0x278>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a73      	ldr	r2, [pc, #460]	; (8002514 <MX_GPIO_Init+0x278>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b71      	ldr	r3, [pc, #452]	; (8002514 <MX_GPIO_Init+0x278>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <MX_GPIO_Init+0x278>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <MX_GPIO_Init+0x278>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <MX_GPIO_Init+0x278>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	4b66      	ldr	r3, [pc, #408]	; (8002514 <MX_GPIO_Init+0x278>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <MX_GPIO_Init+0x278>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <MX_GPIO_Init+0x278>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, motor_L_DIR_Pin|motor_L_break_Pin|motor_R_DIR_Pin|share_Left_Pin, GPIO_PIN_RESET);
 8002392:	2200      	movs	r2, #0
 8002394:	f248 011c 	movw	r1, #32796	; 0x801c
 8002398:	485f      	ldr	r0, [pc, #380]	; (8002518 <MX_GPIO_Init+0x27c>)
 800239a:	f002 fead 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, DIR_linear_4_Pin|DIR_linear_5_Pin, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2103      	movs	r1, #3
 80023a2:	485e      	ldr	r0, [pc, #376]	; (800251c <MX_GPIO_Init+0x280>)
 80023a4:	f002 fea8 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, share_seat_joy_out_Pin|motor_R_break_Pin|share_default_state_Pin|share_standing_complete_Pin, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	f240 7101 	movw	r1, #1793	; 0x701
 80023ae:	485c      	ldr	r0, [pc, #368]	; (8002520 <MX_GPIO_Init+0x284>)
 80023b0:	f002 fea2 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, DIR_linear_3_Pin|share_speed_Pin|lin_Wheel_Dir_Pin, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	210b      	movs	r1, #11
 80023b8:	485a      	ldr	r0, [pc, #360]	; (8002524 <MX_GPIO_Init+0x288>)
 80023ba:	f002 fe9d 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, share_Right_Pin|share_Back_Pin|LD2_Pin|share_stop_out_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 80023c4:	4858      	ldr	r0, [pc, #352]	; (8002528 <MX_GPIO_Init+0x28c>)
 80023c6:	f002 fe97 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, runway_in1_Pin|runway_in2_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80023d0:	4855      	ldr	r0, [pc, #340]	; (8002528 <MX_GPIO_Init+0x28c>)
 80023d2:	f002 fe91 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, runway1_in1_Pin|runway1_in2_Pin|Walker_motor_in1_Pin|lin_Wheel_En_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	f24c 0184 	movw	r1, #49284	; 0xc084
 80023dc:	4853      	ldr	r0, [pc, #332]	; (800252c <MX_GPIO_Init+0x290>)
 80023de:	f002 fe8b 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Walker_motor_in2_GPIO_Port, Walker_motor_in2_Pin, GPIO_PIN_SET);
 80023e2:	2201      	movs	r2, #1
 80023e4:	2104      	movs	r1, #4
 80023e6:	484f      	ldr	r0, [pc, #316]	; (8002524 <MX_GPIO_Init+0x288>)
 80023e8:	f002 fe86 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, DIR_linear_1_Pin|DIR_linear_2_Pin|share_speed_1_Pin, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2123      	movs	r1, #35	; 0x23
 80023f0:	484e      	ldr	r0, [pc, #312]	; (800252c <MX_GPIO_Init+0x290>)
 80023f2:	f002 fe81 	bl	80050f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : motor_L_DIR_Pin motor_L_break_Pin motor_R_DIR_Pin share_Left_Pin */
	GPIO_InitStruct.Pin = motor_L_DIR_Pin|motor_L_break_Pin|motor_R_DIR_Pin|share_Left_Pin;
 80023f6:	f248 031c 	movw	r3, #32796	; 0x801c
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240c:	4619      	mov	r1, r3
 800240e:	4842      	ldr	r0, [pc, #264]	; (8002518 <MX_GPIO_Init+0x27c>)
 8002410:	f002 fcae 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_linear_4_Pin DIR_linear_5_Pin */
	GPIO_InitStruct.Pin = DIR_linear_4_Pin|DIR_linear_5_Pin;
 8002414:	2303      	movs	r3, #3
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002418:	2301      	movs	r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	483c      	ldr	r0, [pc, #240]	; (800251c <MX_GPIO_Init+0x280>)
 800242c:	f002 fca0 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : motor_speed_up_Pin motor_speed_down_Pin share_standing_method_Pin */
	GPIO_InitStruct.Pin = motor_speed_up_Pin|motor_speed_down_Pin|share_standing_method_Pin;
 8002430:	f241 2304 	movw	r3, #4612	; 0x1204
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	4619      	mov	r1, r3
 8002444:	4835      	ldr	r0, [pc, #212]	; (800251c <MX_GPIO_Init+0x280>)
 8002446:	f002 fc93 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : share_seat_joy_out_Pin motor_R_break_Pin share_default_state_Pin share_standing_complete_Pin */
	GPIO_InitStruct.Pin = share_seat_joy_out_Pin|motor_R_break_Pin|share_default_state_Pin|share_standing_complete_Pin;
 800244a:	f240 7301 	movw	r3, #1793	; 0x701
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002460:	4619      	mov	r1, r3
 8002462:	482f      	ldr	r0, [pc, #188]	; (8002520 <MX_GPIO_Init+0x284>)
 8002464:	f002 fc84 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : share_seat_in_Pin share_default_set_Pin Walker_in_Pin */
	GPIO_InitStruct.Pin = share_seat_in_Pin|share_default_set_Pin|Walker_in_Pin;
 8002468:	f641 0308 	movw	r3, #6152	; 0x1808
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	4619      	mov	r1, r3
 800247c:	4828      	ldr	r0, [pc, #160]	; (8002520 <MX_GPIO_Init+0x284>)
 800247e:	f002 fc77 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_linear_3_Pin share_speed_Pin Walker_motor_in2_Pin lin_Wheel_Dir_Pin */
	GPIO_InitStruct.Pin = DIR_linear_3_Pin|share_speed_Pin|Walker_motor_in2_Pin|lin_Wheel_Dir_Pin;
 8002482:	230f      	movs	r3, #15
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	4822      	ldr	r0, [pc, #136]	; (8002524 <MX_GPIO_Init+0x288>)
 800249a:	f002 fc69 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pin : stage_PULL_SW_Pin */
	GPIO_InitStruct.Pin = stage_PULL_SW_Pin;
 800249e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(stage_PULL_SW_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	4819      	ldr	r0, [pc, #100]	; (8002518 <MX_GPIO_Init+0x27c>)
 80024b4:	f002 fc5c 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : share_Right_Pin share_Back_Pin runway_in1_Pin runway_in2_Pin
                           LD2_Pin share_stop_out_Pin */
	GPIO_InitStruct.Pin = share_Right_Pin|share_Back_Pin|runway_in1_Pin|runway_in2_Pin
 80024b8:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
			|LD2_Pin|share_stop_out_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4815      	ldr	r0, [pc, #84]	; (8002528 <MX_GPIO_Init+0x28c>)
 80024d2:	f002 fc4d 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : runway1_in1_Pin runway1_in2_Pin DIR_linear_1_Pin DIR_linear_2_Pin
                           Walker_motor_in1_Pin share_speed_1_Pin lin_Wheel_En_Pin */
	GPIO_InitStruct.Pin = runway1_in1_Pin|runway1_in2_Pin|DIR_linear_1_Pin|DIR_linear_2_Pin
 80024d6:	f24c 03a7 	movw	r3, #49319	; 0xc0a7
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
			|Walker_motor_in1_Pin|share_speed_1_Pin|lin_Wheel_En_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <MX_GPIO_Init+0x290>)
 80024f0:	f002 fc3e 	bl	8004d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : default_Pin state_controller_Pin */
	GPIO_InitStruct.Pin = default_Pin|state_controller_Pin;
 80024f4:	2348      	movs	r3, #72	; 0x48
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	; (800252c <MX_GPIO_Init+0x290>)
 8002508:	f002 fc32 	bl	8004d70 <HAL_GPIO_Init>

}
 800250c:	bf00      	nop
 800250e:	3738      	adds	r7, #56	; 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40020800 	.word	0x40020800
 8002524:	40021800 	.word	0x40021800
 8002528:	40020400 	.word	0x40020400
 800252c:	40020c00 	.word	0x40020c00

08002530 <HAL_TIM_PeriodElapsedCallback>:
uint16_t C_pwm_L=0,C_pwm_R=0;


uint8_t any_stop_flag_TIM=0;
float loop_stop_constant = 5.0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	if(htim->Instance ==TIM7){
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4aa6      	ldr	r2, [pc, #664]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d13a      	bne.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x88>
		delay_sec+=1;
 8002542:	4ba6      	ldr	r3, [pc, #664]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	4ba4      	ldr	r3, [pc, #656]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800254c:	801a      	strh	r2, [r3, #0]
		if(stage_delay_act){
 800254e:	4ba4      	ldr	r3, [pc, #656]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d029      	beq.n	80025aa <HAL_TIM_PeriodElapsedCallback+0x7a>
			delay_sec_stage+=1;
 8002556:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	4ba1      	ldr	r3, [pc, #644]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002560:	801a      	strh	r2, [r3, #0]
			if(stage_status == status_Stage_PULL){
 8002562:	4ba1      	ldr	r3, [pc, #644]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x44>
				SET_Lin_Stage_Movement_Time=SET_Lin_Stage_PULL;
 800256a:	4ba0      	ldr	r3, [pc, #640]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	4ba0      	ldr	r3, [pc, #640]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e006      	b.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x52>
			}
			else if(stage_status == status_Stage_PUSH){
 8002574:	4b9c      	ldr	r3, [pc, #624]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x52>
				SET_Lin_Stage_Movement_Time=Default_Lin_Stage_Movement_Time;
 800257c:	4b9c      	ldr	r3, [pc, #624]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800257e:	2210      	movs	r2, #16
 8002580:	701a      	strb	r2, [r3, #0]
			}

			if(delay_sec_stage>=SET_Lin_Stage_Movement_Time){
 8002582:	4b9b      	ldr	r3, [pc, #620]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b96      	ldr	r3, [pc, #600]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d813      	bhi.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x88>
				HAL_GPIO_WritePin(lin_Wheel_En_GPIO_Port, lin_Wheel_En_Pin, SET);
 8002590:	2201      	movs	r2, #1
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	4897      	ldr	r0, [pc, #604]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002596:	f002 fdaf 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800259a:	2100      	movs	r1, #0
 800259c:	4896      	ldr	r0, [pc, #600]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800259e:	f003 fc1b 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				stage_delay_act=0;
 80025a2:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e006      	b.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x88>
			}
		}
		else{
			delay_sec_stage=0;
 80025aa:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim14,0);
 80025b0:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}


	if(htim->Instance == TIM6){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a8f      	ldr	r2, [pc, #572]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	f040 842b 	bne.w	8002e1a <HAL_TIM_PeriodElapsedCallback+0x8ea>
		if(pwm_L<0){
 80025c4:	4b8e      	ldr	r3, [pc, #568]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da3c      	bge.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x116>
			timing_loop_Start_L=-pwm_L/100.0*30.0;
 80025cc:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	425b      	negs	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffb6 	bl	8000544 <__aeabi_i2d>
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b89      	ldr	r3, [pc, #548]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80025de:	f7fe f945 	bl	800086c <__aeabi_ddiv>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b86      	ldr	r3, [pc, #536]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80025f0:	f7fe f812 	bl	8000618 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe fae4 	bl	8000bc8 <__aeabi_d2uiz>
 8002600:	4603      	mov	r3, r0
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002606:	801a      	strh	r2, [r3, #0]
			timing_loop_Stop_L=-pwm_L/100.0*20.0;
 8002608:	4b7d      	ldr	r3, [pc, #500]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	425b      	negs	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff98 	bl	8000544 <__aeabi_i2d>
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800261a:	f7fe f927 	bl	800086c <__aeabi_ddiv>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b79      	ldr	r3, [pc, #484]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800262c:	f7fd fff4 	bl	8000618 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fac6 	bl	8000bc8 <__aeabi_d2uiz>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	e039      	b.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x18a>
		}
		else{
			timing_loop_Start_L=pwm_L/100.0*30.0;
 8002646:	4b6e      	ldr	r3, [pc, #440]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff7a 	bl	8000544 <__aeabi_i2d>
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002656:	f7fe f909 	bl	800086c <__aeabi_ddiv>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002668:	f7fd ffd6 	bl	8000618 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe faa8 	bl	8000bc8 <__aeabi_d2uiz>
 8002678:	4603      	mov	r3, r0
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800267e:	801a      	strh	r2, [r3, #0]
			timing_loop_Stop_L=pwm_L/100.0*20.0;
 8002680:	4b5f      	ldr	r3, [pc, #380]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff5d 	bl	8000544 <__aeabi_i2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002690:	f7fe f8ec 	bl	800086c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80026a2:	f7fd ffb9 	bl	8000618 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa8b 	bl	8000bc8 <__aeabi_d2uiz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80026b8:	801a      	strh	r2, [r3, #0]

		}
		if(PWM_R<0){
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da3c      	bge.n	800273c <HAL_TIM_PeriodElapsedCallback+0x20c>
			timing_loop_Start_R=-PWM_R/100.0*30.0;
 80026c2:	4b55      	ldr	r3, [pc, #340]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	425b      	negs	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff3b 	bl	8000544 <__aeabi_i2d>
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80026d4:	f7fe f8ca 	bl	800086c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	4b48      	ldr	r3, [pc, #288]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80026e6:	f7fd ff97 	bl	8000618 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa69 	bl	8000bc8 <__aeabi_d2uiz>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b48      	ldr	r3, [pc, #288]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80026fc:	801a      	strh	r2, [r3, #0]
			timing_loop_Stop_R=-PWM_R/100.0*20.0;
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	425b      	negs	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff1d 	bl	8000544 <__aeabi_i2d>
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002710:	f7fe f8ac 	bl	800086c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002722:	f7fd ff79 	bl	8000618 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa4b 	bl	8000bc8 <__aeabi_d2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b3a      	ldr	r3, [pc, #232]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e039      	b.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x280>
		}
		else{
			timing_loop_Start_R=PWM_R/100.0*30.0;
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feff 	bl	8000544 <__aeabi_i2d>
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800274c:	f7fe f88e 	bl	800086c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800275e:	f7fd ff5b 	bl	8000618 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe fa2d 	bl	8000bc8 <__aeabi_d2uiz>
 800276e:	4603      	mov	r3, r0
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002774:	801a      	strh	r2, [r3, #0]
			timing_loop_Stop_R=PWM_R/100.0*20.0;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fee2 	bl	8000544 <__aeabi_i2d>
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002786:	f7fe f871 	bl	800086c <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002798:	f7fd ff3e 	bl	8000618 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f7fe fa10 	bl	8000bc8 <__aeabi_d2uiz>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80027ae:	801a      	strh	r2, [r3, #0]
		}




		if(timing_loop_Start_L>=timing_loop_Start_R){
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80027b2:	881a      	ldrh	r2, [r3, #0]
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d333      	bcc.n	8002824 <HAL_TIM_PeriodElapsedCallback+0x2f4>
			if(timing_loop_Start_L<=timing_loop_Start_R+10)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	330a      	adds	r3, #10
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dc37      	bgt.n	800283c <HAL_TIM_PeriodElapsedCallback+0x30c>
				timing_loop_Start_R=timing_loop_Start_L;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e032      	b.n	800283c <HAL_TIM_PeriodElapsedCallback+0x30c>
 80027d6:	bf00      	nop
 80027d8:	40001400 	.word	0x40001400
 80027dc:	20000224 	.word	0x20000224
 80027e0:	20000228 	.word	0x20000228
 80027e4:	20000226 	.word	0x20000226
 80027e8:	20000009 	.word	0x20000009
 80027ec:	2000000b 	.word	0x2000000b
 80027f0:	20000229 	.word	0x20000229
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	2000063c 	.word	0x2000063c
 80027fc:	40001000 	.word	0x40001000
 8002800:	20000208 	.word	0x20000208
 8002804:	40590000 	.word	0x40590000
 8002808:	403e0000 	.word	0x403e0000
 800280c:	200002d0 	.word	0x200002d0
 8002810:	40340000 	.word	0x40340000
 8002814:	20000318 	.word	0x20000318
 8002818:	2000020c 	.word	0x2000020c
 800281c:	2000072c 	.word	0x2000072c
 8002820:	200006e2 	.word	0x200006e2
		}
		else{
			if(timing_loop_Start_R<=timing_loop_Start_L+10)
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	330a      	adds	r3, #10
 8002830:	429a      	cmp	r2, r3
 8002832:	dc03      	bgt.n	800283c <HAL_TIM_PeriodElapsedCallback+0x30c>
				timing_loop_Start_L=timing_loop_Start_R;
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800283a:	801a      	strh	r2, [r3, #0]
		}

		if(timing_loop_Stop_L>=timing_loop_Stop_R){
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d30c      	bcc.n	8002862 <HAL_TIM_PeriodElapsedCallback+0x332>
			if(timing_loop_Stop_L<=timing_loop_Stop_R+7)
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	3307      	adds	r3, #7
 8002854:	429a      	cmp	r2, r3
 8002856:	dc10      	bgt.n	800287a <HAL_TIM_PeriodElapsedCallback+0x34a>
				timing_loop_Stop_R=timing_loop_Stop_L;
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800285a:	881a      	ldrh	r2, [r3, #0]
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	e00b      	b.n	800287a <HAL_TIM_PeriodElapsedCallback+0x34a>
		}
		else{
			if(timing_loop_Stop_R<=timing_loop_Stop_L+7)
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	3307      	adds	r3, #7
 800286e:	429a      	cmp	r2, r3
 8002870:	dc03      	bgt.n	800287a <HAL_TIM_PeriodElapsedCallback+0x34a>
				timing_loop_Stop_L=timing_loop_Stop_R;
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002878:	801a      	strh	r2, [r3, #0]
		}

		if(timing_loop_Start_L == 0) timing_loop_Start_L=1;
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_TIM_PeriodElapsedCallback+0x358>
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002884:	2201      	movs	r2, #1
 8002886:	801a      	strh	r2, [r3, #0]
		if(timing_loop_Start_R == 0) timing_loop_Start_R=1;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_TIM_PeriodElapsedCallback+0x366>
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002892:	2201      	movs	r2, #1
 8002894:	801a      	strh	r2, [r3, #0]
		if(timing_loop_Stop_L == 0) timing_loop_Stop_L=1;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_TIM_PeriodElapsedCallback+0x374>
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	801a      	strh	r2, [r3, #0]
		if(timing_loop_Stop_R == 0) timing_loop_Stop_R=1;
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x382>
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	801a      	strh	r2, [r3, #0]

		if(motor_dir_flag == 3 && (n_pwm_L == 0 || n_PWM_R == 0)){
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d121      	bne.n	80028fe <HAL_TIM_PeriodElapsedCallback+0x3ce>
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_PeriodElapsedCallback+0x39a>
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_TIM_PeriodElapsedCallback+0x3ce>
			if(n_pwm_L ==0){
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d112      	bne.n	80028f8 <HAL_TIM_PeriodElapsedCallback+0x3c8>
				timing_loop_Stop_R = 5;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80028d4:	2205      	movs	r2, #5
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	e011      	b.n	80028fe <HAL_TIM_PeriodElapsedCallback+0x3ce>
 80028da:	bf00      	nop
 80028dc:	2000072c 	.word	0x2000072c
 80028e0:	200002d0 	.word	0x200002d0
 80028e4:	20000318 	.word	0x20000318
 80028e8:	200006e2 	.word	0x200006e2
 80028ec:	20000220 	.word	0x20000220
 80028f0:	20000210 	.word	0x20000210
 80028f4:	20000214 	.word	0x20000214
			}
			else{
				timing_loop_Stop_L = 5;
 80028f8:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x614>)
 80028fa:	2205      	movs	r2, #5
 80028fc:	801a      	strh	r2, [r3, #0]
			timing_loop_Stop_R=PWM_R/10.0*2.0;
		}*/



		if(motor_dir_flag==1){
 80028fe:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d171      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x4ba>
			if(n_pwm_L<pwm_L){
 8002906:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	da0a      	bge.n	8002928 <HAL_TIM_PeriodElapsedCallback+0x3f8>
				n_pwm_L +=pwm_L/timing_loop_Start_L;
 8002912:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a8f      	ldr	r2, [pc, #572]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	fb93 f2f2 	sdiv	r2, r3, r2
 800291e:	4b8b      	ldr	r3, [pc, #556]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a89      	ldr	r2, [pc, #548]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002926:	6013      	str	r3, [r2, #0]

			}

			if(n_pwm_L>pwm_L){
 8002928:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	dd21      	ble.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x448>
				if(pwm_L<0)
 8002934:	4b86      	ldr	r3, [pc, #536]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da12      	bge.n	8002962 <HAL_TIM_PeriodElapsedCallback+0x432>
					timing_loop_Start_L=timing_loop_Start_L*2.0;
 800293c:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fdff 	bl	8000544 <__aeabi_i2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	f7fd fcaf 	bl	80002ac <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f937 	bl	8000bc8 <__aeabi_d2uiz>
 800295a:	4603      	mov	r3, r0
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002960:	801a      	strh	r2, [r3, #0]
				n_pwm_L -=pwm_L/timing_loop_Start_L;
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	497a      	ldr	r1, [pc, #488]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800296c:	8809      	ldrh	r1, [r1, #0]
 800296e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a75      	ldr	r2, [pc, #468]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002976:	6013      	str	r3, [r2, #0]

			}
			if(n_PWM_R<PWM_R){
 8002978:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	da0a      	bge.n	800299a <HAL_TIM_PeriodElapsedCallback+0x46a>
				n_PWM_R +=PWM_R/timing_loop_Start_R;
 8002984:	4b75      	ldr	r3, [pc, #468]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002990:	4b71      	ldr	r3, [pc, #452]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4413      	add	r3, r2
 8002996:	4a70      	ldr	r2, [pc, #448]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002998:	6013      	str	r3, [r2, #0]
			}
			if(n_PWM_R>PWM_R){
 800299a:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dd21      	ble.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x4ba>
				if(PWM_R<0)
 80029a6:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da12      	bge.n	80029d4 <HAL_TIM_PeriodElapsedCallback+0x4a4>
					timing_loop_Start_R=timing_loop_Start_R*2.0;
 80029ae:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fdc6 	bl	8000544 <__aeabi_i2d>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	f7fd fc76 	bl	80002ac <__adddf3>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f8fe 	bl	8000bc8 <__aeabi_d2uiz>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80029d2:	801a      	strh	r2, [r3, #0]
				n_PWM_R -=PWM_R/timing_loop_Start_R;
 80029d4:	4b60      	ldr	r3, [pc, #384]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b60      	ldr	r3, [pc, #384]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4960      	ldr	r1, [pc, #384]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80029de:	8809      	ldrh	r1, [r1, #0]
 80029e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4a5c      	ldr	r2, [pc, #368]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80029e8:	6013      	str	r3, [r2, #0]
			}
		}
		if(motor_dir_flag==2){
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d171      	bne.n	8002ad6 <HAL_TIM_PeriodElapsedCallback+0x5a6>
			if(n_pwm_L<pwm_L){
 80029f2:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	da0a      	bge.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x4e4>
				n_pwm_L -=pwm_L/timing_loop_Start_L;
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4953      	ldr	r1, [pc, #332]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002a08:	8809      	ldrh	r1, [r1, #0]
 8002a0a:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002a12:	6013      	str	r3, [r2, #0]

			}
			if(n_pwm_L>pwm_L){
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dd21      	ble.n	8002a64 <HAL_TIM_PeriodElapsedCallback+0x534>
				if(pwm_L>0)
 8002a20:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	dd12      	ble.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x51e>
					timing_loop_Start_L=timing_loop_Start_L*2.0;
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd89 	bl	8000544 <__aeabi_i2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	f7fd fc39 	bl	80002ac <__adddf3>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f8c1 	bl	8000bc8 <__aeabi_d2uiz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002a4c:	801a      	strh	r2, [r3, #0]
				n_pwm_L +=(pwm_L/timing_loop_Start_L);
 8002a4e:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	fb93 f2f2 	sdiv	r2, r3, r2
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002a62:	6013      	str	r3, [r2, #0]

			}
			if(n_PWM_R<PWM_R){
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b3c      	ldr	r3, [pc, #240]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	da0a      	bge.n	8002a86 <HAL_TIM_PeriodElapsedCallback+0x556>
				n_PWM_R -=PWM_R/timing_loop_Start_R;
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4939      	ldr	r1, [pc, #228]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002a7a:	8809      	ldrh	r1, [r1, #0]
 8002a7c:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002a84:	6013      	str	r3, [r2, #0]
			}

			if(n_PWM_R>PWM_R){
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	dd21      	ble.n	8002ad6 <HAL_TIM_PeriodElapsedCallback+0x5a6>
				if(PWM_R>0)
 8002a92:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dd12      	ble.n	8002ac0 <HAL_TIM_PeriodElapsedCallback+0x590>
					timing_loop_Start_R=timing_loop_Start_R*2.0;
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fd50 	bl	8000544 <__aeabi_i2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f7fd fc00 	bl	80002ac <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f888 	bl	8000bc8 <__aeabi_d2uiz>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002abe:	801a      	strh	r2, [r3, #0]
				n_PWM_R +=PWM_R/timing_loop_Start_R;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	fb93 f2f2 	sdiv	r2, r3, r2
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002ad4:	6013      	str	r3, [r2, #0]
			}
		}


		if(motor_dir_flag==3){
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	f040 80cb 	bne.w	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>

			if(pwm_L>=0){
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db3d      	blt.n	8002b64 <HAL_TIM_PeriodElapsedCallback+0x634>
				if(n_pwm_L>=0){
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db13      	blt.n	8002b18 <HAL_TIM_PeriodElapsedCallback+0x5e8>
					if(n_pwm_L>10){
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b0a      	cmp	r3, #10
 8002af6:	dd0b      	ble.n	8002b10 <HAL_TIM_PeriodElapsedCallback+0x5e0>
						n_pwm_L -= pwm_L/timing_loop_Stop_L;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4910      	ldr	r1, [pc, #64]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8002b02:	8809      	ldrh	r1, [r1, #0]
 8002b04:	fb93 f3f1 	sdiv	r3, r3, r1
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e055      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
					else{
						n_pwm_L=0;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e051      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
				}
				else{
					if(n_pwm_L<-10){
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f113 0f0a 	cmn.w	r3, #10
 8002b20:	da0b      	bge.n	8002b3a <HAL_TIM_PeriodElapsedCallback+0x60a>
						n_pwm_L += pwm_L/timing_loop_Stop_L;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8002b28:	8812      	ldrh	r2, [r2, #0]
 8002b2a:	fb93 f2f2 	sdiv	r2, r3, r2
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e040      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
					else{
						n_pwm_L=0;
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e03c      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
 8002b42:	bf00      	nop
 8002b44:	20000318 	.word	0x20000318
 8002b48:	20000220 	.word	0x20000220
 8002b4c:	20000210 	.word	0x20000210
 8002b50:	20000208 	.word	0x20000208
 8002b54:	200002d0 	.word	0x200002d0
 8002b58:	20000214 	.word	0x20000214
 8002b5c:	2000020c 	.word	0x2000020c
 8002b60:	2000072c 	.word	0x2000072c
					}
				}
			}
			else{
				if(n_pwm_L>=0){
 8002b64:	4b93      	ldr	r3, [pc, #588]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db13      	blt.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x664>
					if(n_pwm_L>10){
 8002b6c:	4b91      	ldr	r3, [pc, #580]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b0a      	cmp	r3, #10
 8002b72:	dd0b      	ble.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x65c>
						n_pwm_L += pwm_L/timing_loop_Stop_L;
 8002b74:	4b90      	ldr	r3, [pc, #576]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a90      	ldr	r2, [pc, #576]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002b80:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a8b      	ldr	r2, [pc, #556]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e017      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
					else{
						n_pwm_L=0;
 8002b8c:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e013      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
				}
				else{
					if(n_pwm_L<-10){
 8002b94:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f113 0f0a 	cmn.w	r3, #10
 8002b9c:	da0b      	bge.n	8002bb6 <HAL_TIM_PeriodElapsedCallback+0x686>
						n_pwm_L -= pwm_L/timing_loop_Stop_L;
 8002b9e:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b85      	ldr	r3, [pc, #532]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4985      	ldr	r1, [pc, #532]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002ba8:	8809      	ldrh	r1, [r1, #0]
 8002baa:	fb93 f3f1 	sdiv	r3, r3, r1
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a80      	ldr	r2, [pc, #512]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e002      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
					}
					else{
						n_pwm_L=0;
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if(PWM_R>=0){
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db2c      	blt.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x6ee>
				if(n_PWM_R>=0){
 8002bc4:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db13      	blt.n	8002bf4 <HAL_TIM_PeriodElapsedCallback+0x6c4>
					if(n_PWM_R>10){
 8002bcc:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b0a      	cmp	r3, #10
 8002bd2:	dd0b      	ble.n	8002bec <HAL_TIM_PeriodElapsedCallback+0x6bc>
						n_PWM_R -= PWM_R/timing_loop_Stop_R;
 8002bd4:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b79      	ldr	r3, [pc, #484]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	497a      	ldr	r1, [pc, #488]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8002bde:	8809      	ldrh	r1, [r1, #0]
 8002be0:	fb93 f3f1 	sdiv	r3, r3, r1
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4a77      	ldr	r2, [pc, #476]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e044      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
					else{
						n_PWM_R=0;
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e040      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
				}
				else{
					if(n_PWM_R<-10){
 8002bf4:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f113 0f0a 	cmn.w	r3, #10
 8002bfc:	da0b      	bge.n	8002c16 <HAL_TIM_PeriodElapsedCallback+0x6e6>
						n_PWM_R += PWM_R/timing_loop_Stop_R;
 8002bfe:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8002c04:	8812      	ldrh	r2, [r2, #0]
 8002c06:	fb93 f2f2 	sdiv	r2, r3, r2
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02f      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
					else{
						n_PWM_R=0;
 8002c16:	4b6b      	ldr	r3, [pc, #428]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e02b      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
				}
			}
			else{
				if(n_PWM_R>=0){
 8002c1e:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db13      	blt.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x71e>
					if(n_PWM_R>10){
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	dd0b      	ble.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x716>
						n_PWM_R += PWM_R/timing_loop_Stop_R;
 8002c2e:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a65      	ldr	r2, [pc, #404]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	fb93 f2f2 	sdiv	r2, r3, r2
 8002c3a:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e017      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
					else{
						n_PWM_R=0;
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e013      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
				}
				else{
					if(n_PWM_R<-10){
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f113 0f0a 	cmn.w	r3, #10
 8002c56:	da0b      	bge.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x740>
						n_PWM_R -= PWM_R/timing_loop_Stop_R;
 8002c58:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4959      	ldr	r1, [pc, #356]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8002c62:	8809      	ldrh	r1, [r1, #0]
 8002c64:	fb93 f3f1 	sdiv	r3, r3, r1
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e002      	b.n	8002c76 <HAL_TIM_PeriodElapsedCallback+0x746>
					}
					else{
						n_PWM_R=0;
 8002c70:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}

		if(speed ==1){
 8002c76:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8002c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8002c82:	f7fd ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x764>
			limit=50;
 8002c8c:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002c8e:	2232      	movs	r2, #50	; 0x32
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	e012      	b.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x78a>
		}
		else if(speed ==2){
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8002c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ca2:	f7fd ff21 	bl	8000ae8 <__aeabi_dcmpeq>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x784>
			limit=80;
 8002cac:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002cae:	2250      	movs	r2, #80	; 0x50
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	e002      	b.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x78a>
		}
		else{
			limit=110;
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002cb6:	226e      	movs	r2, #110	; 0x6e
 8002cb8:	801a      	strh	r2, [r3, #0]
		}
		if(n_PWM_R>limit || n_pwm_L>limit || n_pwm_L<-limit || n_PWM_R<-limit){
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	db14      	blt.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0x7c2>
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	db0d      	blt.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0x7c2>
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	425a      	negs	r2, r3
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dc06      	bgt.n	8002cf2 <HAL_TIM_PeriodElapsedCallback+0x7c2>
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	425a      	negs	r2, r3
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	dd09      	ble.n	8002d06 <HAL_TIM_PeriodElapsedCallback+0x7d6>
			n_PWM_R=0;
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
			n_pwm_L=0;
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
			motor_dir_flag=3;
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 8002d00:	2203      	movs	r2, #3
 8002d02:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(motor_R_DIR_GPIO_Port, motor_R_DIR_Pin, RESET);
				__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,n_PWM_R);
			}
		}
	}
}
 8002d04:	e089      	b.n	8002e1a <HAL_TIM_PeriodElapsedCallback+0x8ea>
			if(n_PWM_R == 0 && n_pwm_L == 0){
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x7fe>
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x7fe>
				HAL_GPIO_WritePin(motor_L_break_GPIO_Port,motor_L_break_Pin, break_on);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2108      	movs	r1, #8
 8002d1a:	4830      	ldr	r0, [pc, #192]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002d1c:	f002 f9ec 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor_R_break_GPIO_Port,motor_R_break_Pin, break_on);
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d26:	482e      	ldr	r0, [pc, #184]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8002d28:	f002 f9e6 	bl	80050f8 <HAL_GPIO_WritePin>
 8002d2c:	e00a      	b.n	8002d44 <HAL_TIM_PeriodElapsedCallback+0x814>
				HAL_GPIO_WritePin(motor_L_break_GPIO_Port,motor_L_break_Pin, break_Release);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2108      	movs	r1, #8
 8002d32:	482a      	ldr	r0, [pc, #168]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002d34:	f002 f9e0 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor_R_break_GPIO_Port,motor_R_break_Pin, break_Release);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d3e:	4828      	ldr	r0, [pc, #160]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8002d40:	f002 f9da 	bl	80050f8 <HAL_GPIO_WritePin>
			if(n_pwm_L<0){
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da0b      	bge.n	8002d64 <HAL_TIM_PeriodElapsedCallback+0x834>
				HAL_GPIO_WritePin(motor_L_DIR_GPIO_Port, motor_L_DIR_Pin, SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2104      	movs	r1, #4
 8002d50:	4822      	ldr	r0, [pc, #136]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002d52:	f002 f9d1 	bl	80050f8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,-n_pwm_L);
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	425a      	negs	r2, r3
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
 8002d62:	e016      	b.n	8002d92 <HAL_TIM_PeriodElapsedCallback+0x862>
			else if(n_pwm_L==0){
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x84e>
				__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COUNTER(&htim12,1);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d7c:	e009      	b.n	8002d92 <HAL_TIM_PeriodElapsedCallback+0x862>
				HAL_GPIO_WritePin(motor_L_DIR_GPIO_Port, motor_L_DIR_Pin, RESET);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2104      	movs	r1, #4
 8002d82:	4816      	ldr	r0, [pc, #88]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002d84:	f002 f9b8 	bl	80050f8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,n_pwm_L);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
			if(n_PWM_R<0){
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da28      	bge.n	8002dec <HAL_TIM_PeriodElapsedCallback+0x8bc>
				HAL_GPIO_WritePin(motor_R_DIR_GPIO_Port, motor_R_DIR_Pin, SET);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	480f      	ldr	r0, [pc, #60]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002da0:	f002 f9aa 	bl	80050f8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,-n_PWM_R);
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	425a      	negs	r2, r3
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002db0:	e033      	b.n	8002e1a <HAL_TIM_PeriodElapsedCallback+0x8ea>
 8002db2:	bf00      	nop
 8002db4:	20000210 	.word	0x20000210
 8002db8:	20000208 	.word	0x20000208
 8002dbc:	20000318 	.word	0x20000318
 8002dc0:	2000020c 	.word	0x2000020c
 8002dc4:	20000214 	.word	0x20000214
 8002dc8:	200006e2 	.word	0x200006e2
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	3ff00000 	.word	0x3ff00000
 8002dd4:	2000022a 	.word	0x2000022a
 8002dd8:	20000220 	.word	0x20000220
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40020800 	.word	0x40020800
 8002de4:	20000698 	.word	0x20000698
 8002de8:	200004b4 	.word	0x200004b4
			else if(n_PWM_R==0){
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d108      	bne.n	8002e06 <HAL_TIM_PeriodElapsedCallback+0x8d6>
				__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,0);
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COUNTER(&htim11,1);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e04:	e009      	b.n	8002e1a <HAL_TIM_PeriodElapsedCallback+0x8ea>
				HAL_GPIO_WritePin(motor_R_DIR_GPIO_Port, motor_R_DIR_Pin, RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4808      	ldr	r0, [pc, #32]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002e0c:	f002 f974 	bl	80050f8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,n_PWM_R);
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000214 	.word	0x20000214
 8002e28:	200004b4 	.word	0x200004b4
 8002e2c:	40021000 	.word	0x40021000

08002e30 <lin_motor_Down>:
	__HAL_TIM_SET_COUNTER(&htim4,1);
	__HAL_TIM_SET_COUNTER(&htim8,1);
}

//all=9, each 1~5
		void lin_motor_Down(uint8_t pos){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
			switch(pos){
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d84c      	bhi.n	8002edc <lin_motor_Down+0xac>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <lin_motor_Down+0x18>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002ea1 	.word	0x08002ea1
 8002e4c:	08002ead 	.word	0x08002ead
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002ec5 	.word	0x08002ec5
 8002e58:	08002ed1 	.word	0x08002ed1
 8002e5c:	08002edd 	.word	0x08002edd
 8002e60:	08002edd 	.word	0x08002edd
 8002e64:	08002edd 	.word	0x08002edd
 8002e68:	08002e6d 	.word	0x08002e6d
			case 9:
				HAL_GPIO_WritePin(DIR_linear_1_GPIO_Port, DIR_linear_1_Pin, CW);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2101      	movs	r1, #1
 8002e70:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <lin_motor_Down+0xb4>)
 8002e72:	f002 f941 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_2_GPIO_Port, DIR_linear_2_Pin, CW);
 8002e76:	2201      	movs	r2, #1
 8002e78:	2102      	movs	r1, #2
 8002e7a:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <lin_motor_Down+0xb4>)
 8002e7c:	f002 f93c 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_3_GPIO_Port, DIR_linear_3_Pin, CW);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2101      	movs	r1, #1
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <lin_motor_Down+0xb8>)
 8002e86:	f002 f937 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_4_GPIO_Port, DIR_linear_4_Pin, CW);
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4817      	ldr	r0, [pc, #92]	; (8002eec <lin_motor_Down+0xbc>)
 8002e90:	f002 f932 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_5_GPIO_Port, DIR_linear_5_Pin, CW);
 8002e94:	2201      	movs	r2, #1
 8002e96:	2102      	movs	r1, #2
 8002e98:	4814      	ldr	r0, [pc, #80]	; (8002eec <lin_motor_Down+0xbc>)
 8002e9a:	f002 f92d 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002e9e:	e01d      	b.n	8002edc <lin_motor_Down+0xac>
			case 1:
				HAL_GPIO_WritePin(DIR_linear_1_GPIO_Port, DIR_linear_1_Pin, CW);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <lin_motor_Down+0xb4>)
 8002ea6:	f002 f927 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002eaa:	e017      	b.n	8002edc <lin_motor_Down+0xac>
			case 2:
				HAL_GPIO_WritePin(DIR_linear_2_GPIO_Port, DIR_linear_2_Pin, CW);
 8002eac:	2201      	movs	r2, #1
 8002eae:	2102      	movs	r1, #2
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <lin_motor_Down+0xb4>)
 8002eb2:	f002 f921 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002eb6:	e011      	b.n	8002edc <lin_motor_Down+0xac>
			case 3:
				HAL_GPIO_WritePin(DIR_linear_3_GPIO_Port, DIR_linear_3_Pin, CW);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2101      	movs	r1, #1
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <lin_motor_Down+0xb8>)
 8002ebe:	f002 f91b 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002ec2:	e00b      	b.n	8002edc <lin_motor_Down+0xac>
			case 4:
				HAL_GPIO_WritePin(DIR_linear_4_GPIO_Port, DIR_linear_4_Pin, CW);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4808      	ldr	r0, [pc, #32]	; (8002eec <lin_motor_Down+0xbc>)
 8002eca:	f002 f915 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002ece:	e005      	b.n	8002edc <lin_motor_Down+0xac>
			case 5:
				HAL_GPIO_WritePin(DIR_linear_5_GPIO_Port, DIR_linear_5_Pin, CW);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4805      	ldr	r0, [pc, #20]	; (8002eec <lin_motor_Down+0xbc>)
 8002ed6:	f002 f90f 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002eda:	bf00      	nop
			}
		}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021400 	.word	0x40021400

08002ef0 <lin_motor_Up>:

		//all=9, each 1~5
		void lin_motor_Up(uint8_t pos){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
			switch(pos){
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d84c      	bhi.n	8002f9c <lin_motor_Up+0xac>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <lin_motor_Up+0x18>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f61 	.word	0x08002f61
 8002f0c:	08002f6d 	.word	0x08002f6d
 8002f10:	08002f79 	.word	0x08002f79
 8002f14:	08002f85 	.word	0x08002f85
 8002f18:	08002f91 	.word	0x08002f91
 8002f1c:	08002f9d 	.word	0x08002f9d
 8002f20:	08002f9d 	.word	0x08002f9d
 8002f24:	08002f9d 	.word	0x08002f9d
 8002f28:	08002f2d 	.word	0x08002f2d
			case 9:
				HAL_GPIO_WritePin(DIR_linear_1_GPIO_Port, DIR_linear_1_Pin, CCW);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2101      	movs	r1, #1
 8002f30:	481c      	ldr	r0, [pc, #112]	; (8002fa4 <lin_motor_Up+0xb4>)
 8002f32:	f002 f8e1 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_2_GPIO_Port, DIR_linear_2_Pin, CCW);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2102      	movs	r1, #2
 8002f3a:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <lin_motor_Up+0xb4>)
 8002f3c:	f002 f8dc 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_3_GPIO_Port, DIR_linear_3_Pin, CCW);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2101      	movs	r1, #1
 8002f44:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <lin_motor_Up+0xb8>)
 8002f46:	f002 f8d7 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_4_GPIO_Port, DIR_linear_4_Pin, CCW);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4817      	ldr	r0, [pc, #92]	; (8002fac <lin_motor_Up+0xbc>)
 8002f50:	f002 f8d2 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_linear_5_GPIO_Port, DIR_linear_5_Pin, CCW);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2102      	movs	r1, #2
 8002f58:	4814      	ldr	r0, [pc, #80]	; (8002fac <lin_motor_Up+0xbc>)
 8002f5a:	f002 f8cd 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f5e:	e01d      	b.n	8002f9c <lin_motor_Up+0xac>
			case 1:
				HAL_GPIO_WritePin(DIR_linear_1_GPIO_Port, DIR_linear_1_Pin, CCW);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2101      	movs	r1, #1
 8002f64:	480f      	ldr	r0, [pc, #60]	; (8002fa4 <lin_motor_Up+0xb4>)
 8002f66:	f002 f8c7 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f6a:	e017      	b.n	8002f9c <lin_motor_Up+0xac>
			case 2:
				HAL_GPIO_WritePin(DIR_linear_2_GPIO_Port, DIR_linear_2_Pin, CCW);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2102      	movs	r1, #2
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <lin_motor_Up+0xb4>)
 8002f72:	f002 f8c1 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f76:	e011      	b.n	8002f9c <lin_motor_Up+0xac>
			case 3:
				HAL_GPIO_WritePin(DIR_linear_3_GPIO_Port, DIR_linear_3_Pin, CCW);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	480a      	ldr	r0, [pc, #40]	; (8002fa8 <lin_motor_Up+0xb8>)
 8002f7e:	f002 f8bb 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f82:	e00b      	b.n	8002f9c <lin_motor_Up+0xac>
			case 4:
				HAL_GPIO_WritePin(DIR_linear_4_GPIO_Port, DIR_linear_4_Pin, CCW);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2101      	movs	r1, #1
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <lin_motor_Up+0xbc>)
 8002f8a:	f002 f8b5 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f8e:	e005      	b.n	8002f9c <lin_motor_Up+0xac>
			case 5:
				HAL_GPIO_WritePin(DIR_linear_5_GPIO_Port, DIR_linear_5_Pin, CCW);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2102      	movs	r1, #2
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <lin_motor_Up+0xbc>)
 8002f96:	f002 f8af 	bl	80050f8 <HAL_GPIO_WritePin>
				break;
 8002f9a:	bf00      	nop
			}
		}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021800 	.word	0x40021800
 8002fac:	40021400 	.word	0x40021400

08002fb0 <walker_hold>:
		int32_t mmToPulse(int32_t mm){
			return mm/3.0*16.0*2.0;
		}
		//###############################################################################################

		void walker_hold(){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(Walker_motor_in1_GPIO_Port, Walker_motor_in1_Pin, SET);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4804      	ldr	r0, [pc, #16]	; (8002fcc <walker_hold+0x1c>)
 8002fba:	f002 f89d 	bl	80050f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Walker_motor_in2_GPIO_Port, Walker_motor_in2_Pin, RESET);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <walker_hold+0x20>)
 8002fc4:	f002 f898 	bl	80050f8 <HAL_GPIO_WritePin>
			//wait for process complete
		}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021800 	.word	0x40021800

08002fd4 <walker_release>:
		void walker_release(){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(Walker_motor_in1_GPIO_Port, Walker_motor_in1_Pin, RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2104      	movs	r1, #4
 8002fdc:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <walker_release+0x1c>)
 8002fde:	f002 f88b 	bl	80050f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Walker_motor_in2_GPIO_Port, Walker_motor_in2_Pin, SET);
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <walker_release+0x20>)
 8002fe8:	f002 f886 	bl	80050f8 <HAL_GPIO_WritePin>
			//wait for process complete
		}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40021800 	.word	0x40021800

08002ff8 <stage_PUSH>:

		void stage_PUSH(){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
#if !stage_disable
			if(stage_status != status_Stage_PUSH){
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <stage_PUSH+0x54>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d021      	beq.n	8003048 <stage_PUSH+0x50>
				if(HAL_GPIO_ReadPin(stage_PULL_SW_GPIO_Port, stage_PULL_SW_Pin)==GPIO_PIN_RESET){
 8003004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003008:	4811      	ldr	r0, [pc, #68]	; (8003050 <stage_PUSH+0x58>)
 800300a:	f002 f85d 	bl	80050c8 <HAL_GPIO_ReadPin>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <stage_PUSH+0x20>
					stage_PULL();
 8003014:	f000 f826 	bl	8003064 <stage_PULL>
				}
				HAL_Delay(3500);
 8003018:	f640 50ac 	movw	r0, #3500	; 0xdac
 800301c:	f001 f98a 	bl	8004334 <HAL_Delay>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003020:	2100      	movs	r1, #0
 8003022:	480c      	ldr	r0, [pc, #48]	; (8003054 <stage_PUSH+0x5c>)
 8003024:	f002 fe10 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(lin_Wheel_Dir_GPIO_Port, lin_Wheel_Dir_Pin, CCW);
 8003028:	2200      	movs	r2, #0
 800302a:	2108      	movs	r1, #8
 800302c:	480a      	ldr	r0, [pc, #40]	; (8003058 <stage_PUSH+0x60>)
 800302e:	f002 f863 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lin_Wheel_En_GPIO_Port, lin_Wheel_En_Pin, RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	4809      	ldr	r0, [pc, #36]	; (800305c <stage_PUSH+0x64>)
 8003038:	f002 f85e 	bl	80050f8 <HAL_GPIO_WritePin>
				stage_status=status_Stage_PUSH;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <stage_PUSH+0x54>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]

				stage_delay_act=1;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <stage_PUSH+0x68>)
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
			}
#endif
		}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000009 	.word	0x20000009
 8003050:	40021000 	.word	0x40021000
 8003054:	2000063c 	.word	0x2000063c
 8003058:	40021800 	.word	0x40021800
 800305c:	40020c00 	.word	0x40020c00
 8003060:	20000228 	.word	0x20000228

08003064 <stage_PULL>:

		uint8_t flag_stage;
		void stage_PULL(){
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
#if !stage_disable

			if(stage_status != status_Stage_PULL){
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <stage_PULL+0x80>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d036      	beq.n	80030de <stage_PULL+0x7a>
				flag_stage=1;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <stage_PULL+0x84>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003076:	2100      	movs	r1, #0
 8003078:	481c      	ldr	r0, [pc, #112]	; (80030ec <stage_PULL+0x88>)
 800307a:	f002 fde5 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(lin_Wheel_Dir_GPIO_Port, lin_Wheel_Dir_Pin, CW);
 800307e:	2201      	movs	r2, #1
 8003080:	2108      	movs	r1, #8
 8003082:	481b      	ldr	r0, [pc, #108]	; (80030f0 <stage_PULL+0x8c>)
 8003084:	f002 f838 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lin_Wheel_En_GPIO_Port, lin_Wheel_En_Pin, RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	4819      	ldr	r0, [pc, #100]	; (80030f4 <stage_PULL+0x90>)
 800308e:	f002 f833 	bl	80050f8 <HAL_GPIO_WritePin>
				stage_status=status_Stage_PULL;
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <stage_PULL+0x80>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
				stage_delay_act=1;
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <stage_PULL+0x94>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]

				while(flag_stage){
 800309e:	e01a      	b.n	80030d6 <stage_PULL+0x72>
					if(HAL_GPIO_ReadPin(stage_PULL_SW_GPIO_Port, stage_PULL_SW_Pin)==GPIO_PIN_RESET){
 80030a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a4:	4815      	ldr	r0, [pc, #84]	; (80030fc <stage_PULL+0x98>)
 80030a6:	f002 f80f 	bl	80050c8 <HAL_GPIO_ReadPin>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <stage_PULL+0x54>
						HAL_Delay(50);
 80030b0:	2032      	movs	r0, #50	; 0x32
 80030b2:	f001 f93f 	bl	8004334 <HAL_Delay>
 80030b6:	e007      	b.n	80030c8 <stage_PULL+0x64>
					}
					else{
						delay_sec_stage=SET_Lin_Stage_PULL;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <stage_PULL+0x9c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <stage_PULL+0xa0>)
 80030c0:	801a      	strh	r2, [r3, #0]
						flag_stage=0;
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <stage_PULL+0x84>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
					}

					if(stage_delay_act == 0){
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <stage_PULL+0x94>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <stage_PULL+0x72>
						flag_stage=0;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <stage_PULL+0x84>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
				while(flag_stage){
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <stage_PULL+0x84>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e0      	bne.n	80030a0 <stage_PULL+0x3c>

				}

			}
#endif
		}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000009 	.word	0x20000009
 80030e8:	200005f1 	.word	0x200005f1
 80030ec:	2000063c 	.word	0x2000063c
 80030f0:	40021800 	.word	0x40021800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	20000228 	.word	0x20000228
 80030fc:	40021000 	.word	0x40021000
 8003100:	2000000b 	.word	0x2000000b
 8003104:	20000226 	.word	0x20000226

08003108 <new_pwm_en>:


		void new_pwm_en(uint8_t sel){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
			switch(sel){
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	3b01      	subs	r3, #1
 8003116:	2b08      	cmp	r3, #8
 8003118:	d842      	bhi.n	80031a0 <new_pwm_en+0x98>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <new_pwm_en+0x18>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003145 	.word	0x08003145
 8003124:	0800314f 	.word	0x0800314f
 8003128:	08003159 	.word	0x08003159
 800312c:	08003163 	.word	0x08003163
 8003130:	0800316d 	.word	0x0800316d
 8003134:	080031a1 	.word	0x080031a1
 8003138:	080031a1 	.word	0x080031a1
 800313c:	080031a1 	.word	0x080031a1
 8003140:	08003177 	.word	0x08003177
			case 1:
				HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003144:	210c      	movs	r1, #12
 8003146:	4818      	ldr	r0, [pc, #96]	; (80031a8 <new_pwm_en+0xa0>)
 8003148:	f002 fd7e 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 800314c:	e028      	b.n	80031a0 <new_pwm_en+0x98>
			case 2:
				HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800314e:	2100      	movs	r1, #0
 8003150:	4816      	ldr	r0, [pc, #88]	; (80031ac <new_pwm_en+0xa4>)
 8003152:	f002 fd79 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 8003156:	e023      	b.n	80031a0 <new_pwm_en+0x98>
			case 3:
				HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003158:	2104      	movs	r1, #4
 800315a:	4814      	ldr	r0, [pc, #80]	; (80031ac <new_pwm_en+0xa4>)
 800315c:	f002 fd74 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 8003160:	e01e      	b.n	80031a0 <new_pwm_en+0x98>
			case 4:
				HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8003162:	2100      	movs	r1, #0
 8003164:	4812      	ldr	r0, [pc, #72]	; (80031b0 <new_pwm_en+0xa8>)
 8003166:	f002 fd6f 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 800316a:	e019      	b.n	80031a0 <new_pwm_en+0x98>
			case 5:
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800316c:	2100      	movs	r1, #0
 800316e:	4811      	ldr	r0, [pc, #68]	; (80031b4 <new_pwm_en+0xac>)
 8003170:	f002 fd6a 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 8003174:	e014      	b.n	80031a0 <new_pwm_en+0x98>
			case 9:
				HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003176:	210c      	movs	r1, #12
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <new_pwm_en+0xa0>)
 800317a:	f002 fd65 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800317e:	2100      	movs	r1, #0
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <new_pwm_en+0xa4>)
 8003182:	f002 fd61 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003186:	2104      	movs	r1, #4
 8003188:	4808      	ldr	r0, [pc, #32]	; (80031ac <new_pwm_en+0xa4>)
 800318a:	f002 fd5d 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800318e:	2100      	movs	r1, #0
 8003190:	4807      	ldr	r0, [pc, #28]	; (80031b0 <new_pwm_en+0xa8>)
 8003192:	f002 fd59 	bl	8005c48 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8003196:	2100      	movs	r1, #0
 8003198:	4806      	ldr	r0, [pc, #24]	; (80031b4 <new_pwm_en+0xac>)
 800319a:	f002 fd55 	bl	8005c48 <HAL_TIM_PWM_Start>
				break;
 800319e:	bf00      	nop
			}
		}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000038c 	.word	0x2000038c
 80031ac:	200005a8 	.word	0x200005a8
 80031b0:	2000031c 	.word	0x2000031c
 80031b4:	2000046c 	.word	0x2000046c

080031b8 <new_pwm_stop>:

		void new_pwm_stop(uint8_t sel){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
			switch(sel){
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d842      	bhi.n	8003250 <new_pwm_stop+0x98>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <new_pwm_stop+0x18>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	08003209 	.word	0x08003209
 80031dc:	08003213 	.word	0x08003213
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	08003251 	.word	0x08003251
 80031e8:	08003251 	.word	0x08003251
 80031ec:	08003251 	.word	0x08003251
 80031f0:	08003227 	.word	0x08003227
			case 1:
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80031f4:	210c      	movs	r1, #12
 80031f6:	4818      	ldr	r0, [pc, #96]	; (8003258 <new_pwm_stop+0xa0>)
 80031f8:	f002 fdee 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 80031fc:	e028      	b.n	8003250 <new_pwm_stop+0x98>
			case 2:
				HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 80031fe:	2100      	movs	r1, #0
 8003200:	4816      	ldr	r0, [pc, #88]	; (800325c <new_pwm_stop+0xa4>)
 8003202:	f002 fde9 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 8003206:	e023      	b.n	8003250 <new_pwm_stop+0x98>
			case 3:
				HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_2);
 8003208:	2104      	movs	r1, #4
 800320a:	4814      	ldr	r0, [pc, #80]	; (800325c <new_pwm_stop+0xa4>)
 800320c:	f002 fde4 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 8003210:	e01e      	b.n	8003250 <new_pwm_stop+0x98>
			case 4:
				HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8003212:	2100      	movs	r1, #0
 8003214:	4812      	ldr	r0, [pc, #72]	; (8003260 <new_pwm_stop+0xa8>)
 8003216:	f002 fddf 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 800321a:	e019      	b.n	8003250 <new_pwm_stop+0x98>
			case 5:
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800321c:	2100      	movs	r1, #0
 800321e:	4811      	ldr	r0, [pc, #68]	; (8003264 <new_pwm_stop+0xac>)
 8003220:	f002 fdda 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 8003224:	e014      	b.n	8003250 <new_pwm_stop+0x98>
			case 9:
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8003226:	210c      	movs	r1, #12
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <new_pwm_stop+0xa0>)
 800322a:	f002 fdd5 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 800322e:	2100      	movs	r1, #0
 8003230:	480a      	ldr	r0, [pc, #40]	; (800325c <new_pwm_stop+0xa4>)
 8003232:	f002 fdd1 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_2);
 8003236:	2104      	movs	r1, #4
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <new_pwm_stop+0xa4>)
 800323a:	f002 fdcd 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 800323e:	2100      	movs	r1, #0
 8003240:	4807      	ldr	r0, [pc, #28]	; (8003260 <new_pwm_stop+0xa8>)
 8003242:	f002 fdc9 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8003246:	2100      	movs	r1, #0
 8003248:	4806      	ldr	r0, [pc, #24]	; (8003264 <new_pwm_stop+0xac>)
 800324a:	f002 fdc5 	bl	8005dd8 <HAL_TIM_PWM_Stop>
				break;
 800324e:	bf00      	nop
			}
		}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000038c 	.word	0x2000038c
 800325c:	200005a8 	.word	0x200005a8
 8003260:	2000031c 	.word	0x2000031c
 8003264:	2000046c 	.word	0x2000046c

08003268 <new_pwm_set>:

		void new_pwm_set(uint8_t lin1,uint8_t lin2,uint8_t lin3,uint8_t lin4,uint8_t lin5){
 8003268:	b490      	push	{r4, r7}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4604      	mov	r4, r0
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4623      	mov	r3, r4
 8003278:	71fb      	strb	r3, [r7, #7]
 800327a:	4603      	mov	r3, r0
 800327c:	71bb      	strb	r3, [r7, #6]
 800327e:	460b      	mov	r3, r1
 8003280:	717b      	strb	r3, [r7, #5]
 8003282:	4613      	mov	r3, r2
 8003284:	713b      	strb	r3, [r7, #4]
			if(lin1 != 0)	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, lin1);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <new_pwm_set+0x2e>
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <new_pwm_set+0xac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
 8003294:	e004      	b.n	80032a0 <new_pwm_set+0x38>
			else	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, idle_pwm);
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <new_pwm_set+0xb0>)
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <new_pwm_set+0xac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

			if(lin2 != 0)	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, lin2);
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <new_pwm_set+0x48>
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <new_pwm_set+0xb4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	79ba      	ldrb	r2, [r7, #6]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34
 80032ae:	e004      	b.n	80032ba <new_pwm_set+0x52>
			else	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, idle_pwm);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <new_pwm_set+0xb0>)
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <new_pwm_set+0xb4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34

			if(lin3 != 0)	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, lin3);
 80032ba:	797b      	ldrb	r3, [r7, #5]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <new_pwm_set+0x62>
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <new_pwm_set+0xb4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	797a      	ldrb	r2, [r7, #5]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
 80032c8:	e004      	b.n	80032d4 <new_pwm_set+0x6c>
			else	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, idle_pwm);
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <new_pwm_set+0xb0>)
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <new_pwm_set+0xb4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38

			if(lin4 != 0)	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, lin4);
 80032d4:	793b      	ldrb	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <new_pwm_set+0x7c>
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <new_pwm_set+0xb8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	793a      	ldrb	r2, [r7, #4]
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
 80032e2:	e004      	b.n	80032ee <new_pwm_set+0x86>
			else	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, idle_pwm);
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <new_pwm_set+0xb0>)
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <new_pwm_set+0xb8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34

			if(lin5 != 0)	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, lin5);
 80032ee:	7c3b      	ldrb	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <new_pwm_set+0x96>
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <new_pwm_set+0xbc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	7c3a      	ldrb	r2, [r7, #16]
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34
			else	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, idle_pwm);
		}
 80032fc:	e004      	b.n	8003308 <new_pwm_set+0xa0>
			else	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, idle_pwm);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <new_pwm_set+0xb0>)
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <new_pwm_set+0xbc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
		}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bc90      	pop	{r4, r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000038c 	.word	0x2000038c
 8003318:	20000008 	.word	0x20000008
 800331c:	200005a8 	.word	0x200005a8
 8003320:	2000031c 	.word	0x2000031c
 8003324:	2000046c 	.word	0x2000046c

08003328 <new_delay_cal>:

		uint8_t c_load = 0.7;
		void new_delay_cal(float mm,float Load, float pwm){
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003332:	edc7 0a02 	vstr	s1, [r7, #8]
 8003336:	ed87 1a01 	vstr	s2, [r7, #4]
			float cal_time;
			if(Load == 1){
 800333a:	edd7 7a02 	vldr	s15, [r7, #8]
 800333e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003342:	eef4 7a47 	vcmp.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d148      	bne.n	80033de <new_delay_cal+0xb6>
				cal_time = ((mm/10.0)*(1.0/c_load)*(1.0/(pwm/100.0)))*1000.0;
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7fd f90b 	bl	8000568 <__aeabi_f2d>
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <new_delay_cal+0x134>)
 8003358:	f7fd fa88 	bl	800086c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <new_delay_cal+0x138>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f8eb 	bl	8000544 <__aeabi_i2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	493b      	ldr	r1, [pc, #236]	; (8003464 <new_delay_cal+0x13c>)
 8003378:	f7fd fa78 	bl	800086c <__aeabi_ddiv>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fd f948 	bl	8000618 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd f8e9 	bl	8000568 <__aeabi_f2d>
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <new_delay_cal+0x140>)
 800339c:	f7fd fa66 	bl	800086c <__aeabi_ddiv>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	492e      	ldr	r1, [pc, #184]	; (8003464 <new_delay_cal+0x13c>)
 80033aa:	f7fd fa5f 	bl	800086c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fd f92f 	bl	8000618 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <new_delay_cal+0x144>)
 80033c8:	f7fd f926 	bl	8000618 <__aeabi_dmul>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fd fc18 	bl	8000c08 <__aeabi_d2f>
 80033d8:	4603      	mov	r3, r0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e031      	b.n	8003442 <new_delay_cal+0x11a>
			}
			else{
				cal_time = ((mm/10.0)*(1.0/(pwm/100.0)))*1000.0;
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7fd f8c2 	bl	8000568 <__aeabi_f2d>
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <new_delay_cal+0x134>)
 80033ea:	f7fd fa3f 	bl	800086c <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	461d      	mov	r5, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd f8b6 	bl	8000568 <__aeabi_f2d>
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <new_delay_cal+0x140>)
 8003402:	f7fd fa33 	bl	800086c <__aeabi_ddiv>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	4915      	ldr	r1, [pc, #84]	; (8003464 <new_delay_cal+0x13c>)
 8003410:	f7fd fa2c 	bl	800086c <__aeabi_ddiv>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4620      	mov	r0, r4
 800341a:	4629      	mov	r1, r5
 800341c:	f7fd f8fc 	bl	8000618 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <new_delay_cal+0x144>)
 800342e:	f7fd f8f3 	bl	8000618 <__aeabi_dmul>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fbe5 	bl	8000c08 <__aeabi_d2f>
 800343e:	4603      	mov	r3, r0
 8003440:	617b      	str	r3, [r7, #20]
			}
			HAL_Delay(cal_time);
 8003442:	edd7 7a05 	vldr	s15, [r7, #20]
 8003446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344a:	ee17 0a90 	vmov	r0, s15
 800344e:	f000 ff71 	bl	8004334 <HAL_Delay>

		}
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bdb0      	pop	{r4, r5, r7, pc}
 800345a:	bf00      	nop
 800345c:	40240000 	.word	0x40240000
 8003460:	2000022c 	.word	0x2000022c
 8003464:	3ff00000 	.word	0x3ff00000
 8003468:	40590000 	.word	0x40590000
 800346c:	408f4000 	.word	0x408f4000

08003470 <calibration_4>:

		void calibration_4(){
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af02      	add	r7, sp, #8

			new_pwm_set(100,100,100,100,100);
 8003476:	2364      	movs	r3, #100	; 0x64
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2364      	movs	r3, #100	; 0x64
 800347c:	2264      	movs	r2, #100	; 0x64
 800347e:	2164      	movs	r1, #100	; 0x64
 8003480:	2064      	movs	r0, #100	; 0x64
 8003482:	f7ff fef1 	bl	8003268 <new_pwm_set>

			lin_motor_Down(9);
 8003486:	2009      	movs	r0, #9
 8003488:	f7ff fcd2 	bl	8002e30 <lin_motor_Down>
			new_pwm_en(9);
 800348c:	2009      	movs	r0, #9
 800348e:	f7ff fe3b 	bl	8003108 <new_pwm_en>
			new_delay_cal(195, 0, 75);
 8003492:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8003550 <calibration_4+0xe0>
 8003496:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003554 <calibration_4+0xe4>
 800349a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003558 <calibration_4+0xe8>
 800349e:	f7ff ff43 	bl	8003328 <new_delay_cal>
			new_pwm_stop(9);
 80034a2:	2009      	movs	r0, #9
 80034a4:	f7ff fe88 	bl	80031b8 <new_pwm_stop>

			new_pwm_set(75, 75, 73,75, 75);
 80034a8:	234b      	movs	r3, #75	; 0x4b
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	234b      	movs	r3, #75	; 0x4b
 80034ae:	2249      	movs	r2, #73	; 0x49
 80034b0:	214b      	movs	r1, #75	; 0x4b
 80034b2:	204b      	movs	r0, #75	; 0x4b
 80034b4:	f7ff fed8 	bl	8003268 <new_pwm_set>

			lin_motor_Up(9);
 80034b8:	2009      	movs	r0, #9
 80034ba:	f7ff fd19 	bl	8002ef0 <lin_motor_Up>
			new_pwm_en(1);
 80034be:	2001      	movs	r0, #1
 80034c0:	f7ff fe22 	bl	8003108 <new_pwm_en>
			new_delay_cal(3, 0, 75);
 80034c4:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8003550 <calibration_4+0xe0>
 80034c8:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003554 <calibration_4+0xe4>
 80034cc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80034d0:	f7ff ff2a 	bl	8003328 <new_delay_cal>
			new_pwm_en(2);
 80034d4:	2002      	movs	r0, #2
 80034d6:	f7ff fe17 	bl	8003108 <new_pwm_en>
			new_delay_cal(12, 0, 75);
 80034da:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8003550 <calibration_4+0xe0>
 80034de:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003554 <calibration_4+0xe4>
 80034e2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80034e6:	f7ff ff1f 	bl	8003328 <new_delay_cal>
			new_pwm_en(4);
 80034ea:	2004      	movs	r0, #4
 80034ec:	f7ff fe0c 	bl	8003108 <new_pwm_en>
			new_delay_cal(7, 0, 75);
 80034f0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8003550 <calibration_4+0xe0>
 80034f4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003554 <calibration_4+0xe4>
 80034f8:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80034fc:	f7ff ff14 	bl	8003328 <new_delay_cal>

			new_pwm_en(3);
 8003500:	2003      	movs	r0, #3
 8003502:	f7ff fe01 	bl	8003108 <new_pwm_en>

			new_delay_cal(0, 0, 75);
 8003506:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003550 <calibration_4+0xe0>
 800350a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003554 <calibration_4+0xe4>
 800350e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003554 <calibration_4+0xe4>
 8003512:	f7ff ff09 	bl	8003328 <new_delay_cal>

			new_pwm_en(5);
 8003516:	2005      	movs	r0, #5
 8003518:	f7ff fdf6 	bl	8003108 <new_pwm_en>
			new_delay_cal(40, 0, 75);
 800351c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003550 <calibration_4+0xe0>
 8003520:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003554 <calibration_4+0xe4>
 8003524:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800355c <calibration_4+0xec>
 8003528:	f7ff fefe 	bl	8003328 <new_delay_cal>
			new_pwm_stop(3);
 800352c:	2003      	movs	r0, #3
 800352e:	f7ff fe43 	bl	80031b8 <new_pwm_stop>
			new_pwm_stop(4);
 8003532:	2004      	movs	r0, #4
 8003534:	f7ff fe40 	bl	80031b8 <new_pwm_stop>
			new_pwm_stop(5);
 8003538:	2005      	movs	r0, #5
 800353a:	f7ff fe3d 	bl	80031b8 <new_pwm_stop>
			new_pwm_stop(2);
 800353e:	2002      	movs	r0, #2
 8003540:	f7ff fe3a 	bl	80031b8 <new_pwm_stop>
			new_pwm_stop(1);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff fe37 	bl	80031b8 <new_pwm_stop>
		}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	42960000 	.word	0x42960000
 8003554:	00000000 	.word	0x00000000
 8003558:	43430000 	.word	0x43430000
 800355c:	42200000 	.word	0x42200000

08003560 <new_standing_method>:

		void new_standing_method(uint8_t step){
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af02      	add	r7, sp, #8
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
			switch (step){
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d002      	beq.n	8003576 <new_standing_method+0x16>
 8003570:	2b03      	cmp	r3, #3
 8003572:	d04c      	beq.n	800360e <new_standing_method+0xae>
				new_pwm_stop(3);
				new_pwm_stop(4);
				new_pwm_stop(5);
				break;
			}
		}
 8003574:	e09d      	b.n	80036b2 <new_standing_method+0x152>
				new_pwm_set(75, 75, 73,75, 75);
 8003576:	234b      	movs	r3, #75	; 0x4b
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	234b      	movs	r3, #75	; 0x4b
 800357c:	2249      	movs	r2, #73	; 0x49
 800357e:	214b      	movs	r1, #75	; 0x4b
 8003580:	204b      	movs	r0, #75	; 0x4b
 8003582:	f7ff fe71 	bl	8003268 <new_pwm_set>
				lin_motor_Up(9);
 8003586:	2009      	movs	r0, #9
 8003588:	f7ff fcb2 	bl	8002ef0 <lin_motor_Up>
				new_pwm_en(9);
 800358c:	2009      	movs	r0, #9
 800358e:	f7ff fdbb 	bl	8003108 <new_pwm_en>
				lin_motor_Down(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f7ff fc4c 	bl	8002e30 <lin_motor_Down>
				new_delay_cal(62, 0, 75);
 8003598:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80036bc <new_standing_method+0x15c>
 800359c:	eddf 0a48 	vldr	s1, [pc, #288]	; 80036c0 <new_standing_method+0x160>
 80035a0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80036c4 <new_standing_method+0x164>
 80035a4:	f7ff fec0 	bl	8003328 <new_delay_cal>
				lin_motor_Up(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7ff fca1 	bl	8002ef0 <lin_motor_Up>
				new_delay_cal(55, 0, 75);
 80035ae:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80036bc <new_standing_method+0x15c>
 80035b2:	eddf 0a43 	vldr	s1, [pc, #268]	; 80036c0 <new_standing_method+0x160>
 80035b6:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80036c8 <new_standing_method+0x168>
 80035ba:	f7ff feb5 	bl	8003328 <new_delay_cal>
				new_pwm_stop(1);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7ff fdfa 	bl	80031b8 <new_pwm_stop>
				new_delay_cal(3, 0, 75);
 80035c4:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80036bc <new_standing_method+0x15c>
 80035c8:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80036c0 <new_standing_method+0x160>
 80035cc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80035d0:	f7ff feaa 	bl	8003328 <new_delay_cal>
				new_pwm_stop(3);
 80035d4:	2003      	movs	r0, #3
 80035d6:	f7ff fdef 	bl	80031b8 <new_pwm_stop>
				new_pwm_stop(4);
 80035da:	2004      	movs	r0, #4
 80035dc:	f7ff fdec 	bl	80031b8 <new_pwm_stop>
				new_delay_cal(10, 0, 75);
 80035e0:	ed9f 1a36 	vldr	s2, [pc, #216]	; 80036bc <new_standing_method+0x15c>
 80035e4:	eddf 0a36 	vldr	s1, [pc, #216]	; 80036c0 <new_standing_method+0x160>
 80035e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80035ec:	f7ff fe9c 	bl	8003328 <new_delay_cal>
				new_pwm_stop(2);
 80035f0:	2002      	movs	r0, #2
 80035f2:	f7ff fde1 	bl	80031b8 <new_pwm_stop>
				new_delay_cal(10, 0, 75);
 80035f6:	ed9f 1a31 	vldr	s2, [pc, #196]	; 80036bc <new_standing_method+0x15c>
 80035fa:	eddf 0a31 	vldr	s1, [pc, #196]	; 80036c0 <new_standing_method+0x160>
 80035fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003602:	f7ff fe91 	bl	8003328 <new_delay_cal>
				new_pwm_stop(5);
 8003606:	2005      	movs	r0, #5
 8003608:	f7ff fdd6 	bl	80031b8 <new_pwm_stop>
				break;
 800360c:	e051      	b.n	80036b2 <new_standing_method+0x152>
				new_pwm_set(75, 75, 73,75, 75);
 800360e:	234b      	movs	r3, #75	; 0x4b
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	234b      	movs	r3, #75	; 0x4b
 8003614:	2249      	movs	r2, #73	; 0x49
 8003616:	214b      	movs	r1, #75	; 0x4b
 8003618:	204b      	movs	r0, #75	; 0x4b
 800361a:	f7ff fe25 	bl	8003268 <new_pwm_set>
				lin_motor_Down(9);
 800361e:	2009      	movs	r0, #9
 8003620:	f7ff fc06 	bl	8002e30 <lin_motor_Down>
				new_pwm_en(5);
 8003624:	2005      	movs	r0, #5
 8003626:	f7ff fd6f 	bl	8003108 <new_pwm_en>
				new_delay_cal(10, 0, 75);
 800362a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80036bc <new_standing_method+0x15c>
 800362e:	eddf 0a24 	vldr	s1, [pc, #144]	; 80036c0 <new_standing_method+0x160>
 8003632:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003636:	f7ff fe77 	bl	8003328 <new_delay_cal>
				new_pwm_en(2);
 800363a:	2002      	movs	r0, #2
 800363c:	f7ff fd64 	bl	8003108 <new_pwm_en>
				new_delay_cal(10, 0, 75);
 8003640:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80036bc <new_standing_method+0x15c>
 8003644:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80036c0 <new_standing_method+0x160>
 8003648:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800364c:	f7ff fe6c 	bl	8003328 <new_delay_cal>
				lin_motor_Up(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f7ff fc4d 	bl	8002ef0 <lin_motor_Up>
				new_pwm_en(9);
 8003656:	2009      	movs	r0, #9
 8003658:	f7ff fd56 	bl	8003108 <new_pwm_en>
				new_delay_cal(62, 0, 75);
 800365c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80036bc <new_standing_method+0x15c>
 8003660:	eddf 0a17 	vldr	s1, [pc, #92]	; 80036c0 <new_standing_method+0x160>
 8003664:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80036c4 <new_standing_method+0x164>
 8003668:	f7ff fe5e 	bl	8003328 <new_delay_cal>
				lin_motor_Down(1);
 800366c:	2001      	movs	r0, #1
 800366e:	f7ff fbdf 	bl	8002e30 <lin_motor_Down>
				new_delay_cal(55, 0, 75);
 8003672:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80036bc <new_standing_method+0x15c>
 8003676:	eddf 0a12 	vldr	s1, [pc, #72]	; 80036c0 <new_standing_method+0x160>
 800367a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80036c8 <new_standing_method+0x168>
 800367e:	f7ff fe53 	bl	8003328 <new_delay_cal>
				new_pwm_stop(1);
 8003682:	2001      	movs	r0, #1
 8003684:	f7ff fd98 	bl	80031b8 <new_pwm_stop>
				new_delay_cal(3, 0, 75);
 8003688:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80036bc <new_standing_method+0x15c>
 800368c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80036c0 <new_standing_method+0x160>
 8003690:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003694:	f7ff fe48 	bl	8003328 <new_delay_cal>
				new_pwm_stop(2);
 8003698:	2002      	movs	r0, #2
 800369a:	f7ff fd8d 	bl	80031b8 <new_pwm_stop>
				new_pwm_stop(3);
 800369e:	2003      	movs	r0, #3
 80036a0:	f7ff fd8a 	bl	80031b8 <new_pwm_stop>
				new_pwm_stop(4);
 80036a4:	2004      	movs	r0, #4
 80036a6:	f7ff fd87 	bl	80031b8 <new_pwm_stop>
				new_pwm_stop(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f7ff fd84 	bl	80031b8 <new_pwm_stop>
				break;
 80036b0:	bf00      	nop
		}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	42960000 	.word	0x42960000
 80036c0:	00000000 	.word	0x00000000
 80036c4:	42780000 	.word	0x42780000
 80036c8:	425c0000 	.word	0x425c0000

080036cc <runway_Up>:



		void runway_Up(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
			if(runway_status != status_runway_UP){
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <runway_Up+0x48>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01a      	beq.n	800370e <runway_Up+0x42>
				HAL_GPIO_WritePin(runway1_in1_GPIO_Port, runway1_in1_Pin, RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <runway_Up+0x4c>)
 80036e0:	f001 fd0a 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(runway_in1_GPIO_Port, runway_in1_Pin, RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036ea:	480c      	ldr	r0, [pc, #48]	; (800371c <runway_Up+0x50>)
 80036ec:	f001 fd04 	bl	80050f8 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(runway1_in2_GPIO_Port, runway1_in2_Pin, SET);
 80036f0:	2201      	movs	r2, #1
 80036f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f6:	4808      	ldr	r0, [pc, #32]	; (8003718 <runway_Up+0x4c>)
 80036f8:	f001 fcfe 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(runway_in2_GPIO_Port, runway_in2_Pin, SET);
 80036fc:	2201      	movs	r2, #1
 80036fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003702:	4806      	ldr	r0, [pc, #24]	; (800371c <runway_Up+0x50>)
 8003704:	f001 fcf8 	bl	80050f8 <HAL_GPIO_WritePin>
				runway_status=status_runway_UP;
 8003708:	4b02      	ldr	r3, [pc, #8]	; (8003714 <runway_Up+0x48>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
			}
		}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000000a 	.word	0x2000000a
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40020400 	.word	0x40020400

08003720 <runway_Down>:
		void runway_Down(){
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
			if(runway_status != status_runway_Down){
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <runway_Down+0x64>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d029      	beq.n	8003780 <runway_Down+0x60>
				HAL_GPIO_WritePin(runway1_in1_GPIO_Port, runway1_in1_Pin, SET);
 800372c:	2201      	movs	r2, #1
 800372e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003732:	4815      	ldr	r0, [pc, #84]	; (8003788 <runway_Down+0x68>)
 8003734:	f001 fce0 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(runway_in1_GPIO_Port, runway_in1_Pin, SET);
 8003738:	2201      	movs	r2, #1
 800373a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800373e:	4813      	ldr	r0, [pc, #76]	; (800378c <runway_Down+0x6c>)
 8003740:	f001 fcda 	bl	80050f8 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(runway1_in2_GPIO_Port, runway1_in2_Pin, RESET);
 8003744:	2200      	movs	r2, #0
 8003746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800374a:	480f      	ldr	r0, [pc, #60]	; (8003788 <runway_Down+0x68>)
 800374c:	f001 fcd4 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(runway_in2_GPIO_Port, runway_in2_Pin, RESET);
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003756:	480d      	ldr	r0, [pc, #52]	; (800378c <runway_Down+0x6c>)
 8003758:	f001 fcce 	bl	80050f8 <HAL_GPIO_WritePin>

				//Preventing slope breakage
				HAL_Delay(250);
 800375c:	20fa      	movs	r0, #250	; 0xfa
 800375e:	f000 fde9 	bl	8004334 <HAL_Delay>
				//
				HAL_GPIO_WritePin(runway1_in2_GPIO_Port, runway1_in2_Pin, SET);
 8003762:	2201      	movs	r2, #1
 8003764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003768:	4807      	ldr	r0, [pc, #28]	; (8003788 <runway_Down+0x68>)
 800376a:	f001 fcc5 	bl	80050f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(runway_in2_GPIO_Port, runway_in2_Pin, SET);
 800376e:	2201      	movs	r2, #1
 8003770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <runway_Down+0x6c>)
 8003776:	f001 fcbf 	bl	80050f8 <HAL_GPIO_WritePin>
				runway_status=status_runway_Down;
 800377a:	4b02      	ldr	r3, [pc, #8]	; (8003784 <runway_Down+0x64>)
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
			}
		}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	2000000a 	.word	0x2000000a
 8003788:	40020c00 	.word	0x40020c00
 800378c:	40020400 	.word	0x40020400

08003790 <Error_Handler>:
		/**
		 * @brief  This function is executed in case of error occurrence.
		 * @retval None
		 */
		void Error_Handler(void)
		{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
			/* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1)
 8003798:	e7fe      	b.n	8003798 <Error_Handler+0x8>
	...

0800379c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_MspInit+0x4c>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_MspInit+0x4c>)
 80037ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b0:	6453      	str	r3, [r2, #68]	; 0x44
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_MspInit+0x4c>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_MspInit+0x4c>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_MspInit+0x4c>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_MspInit+0x4c>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_ADC_MspInit+0x7c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d127      	bne.n	800385e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_ADC_MspInit+0x80>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_ADC_MspInit+0x80>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_ADC_MspInit+0x80>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <HAL_ADC_MspInit+0x80>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_ADC_MspInit+0x80>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_ADC_MspInit+0x80>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003846:	2360      	movs	r3, #96	; 0x60
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384a:	2303      	movs	r3, #3
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	4619      	mov	r1, r3
 8003858:	4805      	ldr	r0, [pc, #20]	; (8003870 <HAL_ADC_MspInit+0x84>)
 800385a:	f001 fa89 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40012000 	.word	0x40012000
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000

08003874 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b092      	sub	sp, #72	; 0x48
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a91      	ldr	r2, [pc, #580]	; (8003ad8 <HAL_TIM_Encoder_MspInit+0x264>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d12d      	bne.n	80038f2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	4b90      	ldr	r3, [pc, #576]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a8f      	ldr	r2, [pc, #572]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b8d      	ldr	r3, [pc, #564]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	4b89      	ldr	r3, [pc, #548]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a88      	ldr	r2, [pc, #544]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80038bc:	f043 0310 	orr.w	r3, r3, #16
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b86      	ldr	r3, [pc, #536]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80038ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038e8:	4619      	mov	r1, r3
 80038ea:	487d      	ldr	r0, [pc, #500]	; (8003ae0 <HAL_TIM_Encoder_MspInit+0x26c>)
 80038ec:	f001 fa40 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80038f0:	e0ee      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x25c>
  else if(htim_encoder->Instance==TIM2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d14b      	bne.n	8003994 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003900:	4b76      	ldr	r3, [pc, #472]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	4a75      	ldr	r2, [pc, #468]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6413      	str	r3, [r2, #64]	; 0x40
 800390c:	4b73      	ldr	r3, [pc, #460]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	4b6f      	ldr	r3, [pc, #444]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6313      	str	r3, [r2, #48]	; 0x30
 8003928:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a67      	ldr	r2, [pc, #412]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003962:	2301      	movs	r3, #1
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800396a:	4619      	mov	r1, r3
 800396c:	485d      	ldr	r0, [pc, #372]	; (8003ae4 <HAL_TIM_Encoder_MspInit+0x270>)
 800396e:	f001 f9ff 	bl	8004d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003972:	2308      	movs	r3, #8
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397e:	2303      	movs	r3, #3
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003982:	2301      	movs	r3, #1
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800398a:	4619      	mov	r1, r3
 800398c:	4856      	ldr	r0, [pc, #344]	; (8003ae8 <HAL_TIM_Encoder_MspInit+0x274>)
 800398e:	f001 f9ef 	bl	8004d70 <HAL_GPIO_Init>
}
 8003992:	e09d      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x25c>
  else if(htim_encoder->Instance==TIM3)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a54      	ldr	r2, [pc, #336]	; (8003aec <HAL_TIM_Encoder_MspInit+0x278>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d12c      	bne.n	80039f8 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a4d      	ldr	r2, [pc, #308]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	4b47      	ldr	r3, [pc, #284]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a46      	ldr	r2, [pc, #280]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b44      	ldr	r3, [pc, #272]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039d6:	2330      	movs	r3, #48	; 0x30
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039e6:	2302      	movs	r3, #2
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039ee:	4619      	mov	r1, r3
 80039f0:	483d      	ldr	r0, [pc, #244]	; (8003ae8 <HAL_TIM_Encoder_MspInit+0x274>)
 80039f2:	f001 f9bd 	bl	8004d70 <HAL_GPIO_Init>
}
 80039f6:	e06b      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x25c>
  else if(htim_encoder->Instance==TIM4)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3c      	ldr	r2, [pc, #240]	; (8003af0 <HAL_TIM_Encoder_MspInit+0x27c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d12d      	bne.n	8003a5e <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b32      	ldr	r3, [pc, #200]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a54:	4619      	mov	r1, r3
 8003a56:	4827      	ldr	r0, [pc, #156]	; (8003af4 <HAL_TIM_Encoder_MspInit+0x280>)
 8003a58:	f001 f98a 	bl	8004d70 <HAL_GPIO_Init>
}
 8003a5c:	e038      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x25c>
  else if(htim_encoder->Instance==TIM8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <HAL_TIM_Encoder_MspInit+0x284>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d133      	bne.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x25c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a72:	f043 0302 	orr.w	r3, r3, #2
 8003a76:	6453      	str	r3, [r2, #68]	; 0x44
 8003a78:	4b18      	ldr	r3, [pc, #96]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_TIM_Encoder_MspInit+0x268>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aa0:	23c0      	movs	r3, #192	; 0xc0
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aac:	2303      	movs	r3, #3
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4810      	ldr	r0, [pc, #64]	; (8003afc <HAL_TIM_Encoder_MspInit+0x288>)
 8003abc:	f001 f958 	bl	8004d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	202d      	movs	r0, #45	; 0x2d
 8003ac6:	f001 f91c 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003aca:	202d      	movs	r0, #45	; 0x2d
 8003acc:	f001 f935 	bl	8004d3a <HAL_NVIC_EnableIRQ>
}
 8003ad0:	bf00      	nop
 8003ad2:	3748      	adds	r7, #72	; 0x48
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40020c00 	.word	0x40020c00
 8003af8:	40010400 	.word	0x40010400
 8003afc:	40020800 	.word	0x40020800

08003b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a66      	ldr	r2, [pc, #408]	; (8003ca8 <HAL_TIM_Base_MspInit+0x1a8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4a64      	ldr	r2, [pc, #400]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	6413      	str	r3, [r2, #64]	; 0x40
 8003b22:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003b2e:	e0b6      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM6)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <HAL_TIM_Base_MspInit+0x1b0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d116      	bne.n	8003b68 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a5a      	ldr	r2, [pc, #360]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b58      	ldr	r3, [pc, #352]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2036      	movs	r0, #54	; 0x36
 8003b5c:	f001 f8d1 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b60:	2036      	movs	r0, #54	; 0x36
 8003b62:	f001 f8ea 	bl	8004d3a <HAL_NVIC_EnableIRQ>
}
 8003b66:	e09a      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM7)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a51      	ldr	r2, [pc, #324]	; (8003cb4 <HAL_TIM_Base_MspInit+0x1b4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d116      	bne.n	8003ba0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a4c      	ldr	r2, [pc, #304]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b7c:	f043 0320 	orr.w	r3, r3, #32
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	2037      	movs	r0, #55	; 0x37
 8003b94:	f001 f8b5 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b98:	2037      	movs	r0, #55	; 0x37
 8003b9a:	f001 f8ce 	bl	8004d3a <HAL_NVIC_EnableIRQ>
}
 8003b9e:	e07e      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM9)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a44      	ldr	r2, [pc, #272]	; (8003cb8 <HAL_TIM_Base_MspInit+0x1b8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bba:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
}
 8003bc6:	e06a      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM10)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3b      	ldr	r2, [pc, #236]	; (8003cbc <HAL_TIM_Base_MspInit+0x1bc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	69fb      	ldr	r3, [r7, #28]
}
 8003bee:	e056      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM11)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <HAL_TIM_Base_MspInit+0x1c0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	69bb      	ldr	r3, [r7, #24]
}
 8003c16:	e042      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM12)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <HAL_TIM_Base_MspInit+0x1c4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	e02e      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM13)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <HAL_TIM_Base_MspInit+0x1c8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
}
 8003c66:	e01a      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
  else if(htim_base->Instance==TIM14)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_TIM_Base_MspInit+0x1cc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d115      	bne.n	8003c9e <HAL_TIM_Base_MspInit+0x19e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_TIM_Base_MspInit+0x1ac>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	202d      	movs	r0, #45	; 0x2d
 8003c94:	f001 f835 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003c98:	202d      	movs	r0, #45	; 0x2d
 8003c9a:	f001 f84e 	bl	8004d3a <HAL_NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3730      	adds	r7, #48	; 0x30
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40001000 	.word	0x40001000
 8003cb4:	40001400 	.word	0x40001400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40001800 	.word	0x40001800
 8003cc8:	40001c00 	.word	0x40001c00
 8003ccc:	40002000 	.word	0x40002000

08003cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7f      	ldr	r2, [pc, #508]	; (8003eec <HAL_TIM_MspPostInit+0x21c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d11e      	bne.n	8003d30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	4b7e      	ldr	r3, [pc, #504]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a7d      	ldr	r2, [pc, #500]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d12:	2302      	movs	r3, #2
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d26:	4619      	mov	r1, r3
 8003d28:	4872      	ldr	r0, [pc, #456]	; (8003ef4 <HAL_TIM_MspPostInit+0x224>)
 8003d2a:	f001 f821 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003d2e:	e0d9      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM9)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a70      	ldr	r2, [pc, #448]	; (8003ef8 <HAL_TIM_MspPostInit+0x228>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d11e      	bne.n	8003d78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a6b      	ldr	r2, [pc, #428]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d44:	f043 0310 	orr.w	r3, r3, #16
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b69      	ldr	r3, [pc, #420]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d56:	2360      	movs	r3, #96	; 0x60
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d62:	2303      	movs	r3, #3
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003d66:	2303      	movs	r3, #3
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4862      	ldr	r0, [pc, #392]	; (8003efc <HAL_TIM_MspPostInit+0x22c>)
 8003d72:	f000 fffd 	bl	8004d70 <HAL_GPIO_Init>
}
 8003d76:	e0b5      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM10)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a60      	ldr	r2, [pc, #384]	; (8003f00 <HAL_TIM_MspPostInit+0x230>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d11f      	bne.n	8003dc2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	4b5a      	ldr	r3, [pc, #360]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a59      	ldr	r2, [pc, #356]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dac:	2303      	movs	r3, #3
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003db0:	2303      	movs	r3, #3
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db8:	4619      	mov	r1, r3
 8003dba:	4852      	ldr	r0, [pc, #328]	; (8003f04 <HAL_TIM_MspPostInit+0x234>)
 8003dbc:	f000 ffd8 	bl	8004d70 <HAL_GPIO_Init>
}
 8003dc0:	e090      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM11)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a50      	ldr	r2, [pc, #320]	; (8003f08 <HAL_TIM_MspPostInit+0x238>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d11e      	bne.n	8003e0a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	6313      	str	r3, [r2, #48]	; 0x30
 8003ddc:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e00:	4619      	mov	r1, r3
 8003e02:	4842      	ldr	r0, [pc, #264]	; (8003f0c <HAL_TIM_MspPostInit+0x23c>)
 8003e04:	f000 ffb4 	bl	8004d70 <HAL_GPIO_Init>
}
 8003e08:	e06c      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM12)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <HAL_TIM_MspPostInit+0x240>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d11f      	bne.n	8003e54 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	6313      	str	r3, [r2, #48]	; 0x30
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e42:	2309      	movs	r3, #9
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	482d      	ldr	r0, [pc, #180]	; (8003f04 <HAL_TIM_MspPostInit+0x234>)
 8003e4e:	f000 ff8f 	bl	8004d70 <HAL_GPIO_Init>
}
 8003e52:	e047      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM13)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2e      	ldr	r2, [pc, #184]	; (8003f14 <HAL_TIM_MspPostInit+0x244>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d11f      	bne.n	8003e9e <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e68:	f043 0320 	orr.w	r3, r3, #32
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003e8c:	2309      	movs	r3, #9
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e94:	4619      	mov	r1, r3
 8003e96:	481d      	ldr	r0, [pc, #116]	; (8003f0c <HAL_TIM_MspPostInit+0x23c>)
 8003e98:	f000 ff6a 	bl	8004d70 <HAL_GPIO_Init>
}
 8003e9c:	e022      	b.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM14)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_TIM_MspPostInit+0x248>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d11d      	bne.n	8003ee4 <HAL_TIM_MspPostInit+0x214>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_TIM_MspPostInit+0x220>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003ed4:	2309      	movs	r3, #9
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003edc:	4619      	mov	r1, r3
 8003ede:	4805      	ldr	r0, [pc, #20]	; (8003ef4 <HAL_TIM_MspPostInit+0x224>)
 8003ee0:	f000 ff46 	bl	8004d70 <HAL_GPIO_Init>
}
 8003ee4:	bf00      	nop
 8003ee6:	3738      	adds	r7, #56	; 0x38
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40020400 	.word	0x40020400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40001800 	.word	0x40001800
 8003f14:	40001c00 	.word	0x40001c00
 8003f18:	40002000 	.word	0x40002000

08003f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_UART_MspInit+0x84>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12c      	bne.n	8003f98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f64:	f043 0308 	orr.w	r3, r3, #8
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f84:	2303      	movs	r3, #3
 8003f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f88:	2307      	movs	r3, #7
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4619      	mov	r1, r3
 8003f92:	4805      	ldr	r0, [pc, #20]	; (8003fa8 <HAL_UART_MspInit+0x8c>)
 8003f94:	f000 feec 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	; 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40004800 	.word	0x40004800
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020c00 	.word	0x40020c00

08003fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <NMI_Handler+0x4>

08003fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint8_t flag=1;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <HardFault_Handler+0xa>

08003fbe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc2:	e7fe      	b.n	8003fc2 <MemManage_Handler+0x4>

08003fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <BusFault_Handler+0x4>

08003fca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <UsageFault_Handler+0x4>

08003fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ffe:	f000 f979 	bl	80042f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800400e:	f002 f887 	bl	8006120 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8004012:	4803      	ldr	r0, [pc, #12]	; (8004020 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8004014:	f002 f884 	bl	8006120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000240 	.word	0x20000240
 8004020:	2000063c 	.word	0x2000063c

08004024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004028:	4802      	ldr	r0, [pc, #8]	; (8004034 <TIM6_DAC_IRQHandler+0x10>)
 800402a:	f002 f879 	bl	8006120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000518 	.word	0x20000518

08004038 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <TIM7_IRQHandler+0x10>)
 800403e:	f002 f86f 	bl	8006120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200006e4 	.word	0x200006e4

0800404c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
	return 1;
 8004050:	2301      	movs	r3, #1
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_kill>:

int _kill(int pid, int sig)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004066:	f003 f9cb 	bl	8007400 <__errno>
 800406a:	4603      	mov	r3, r0
 800406c:	2216      	movs	r2, #22
 800406e:	601a      	str	r2, [r3, #0]
	return -1;
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <_exit>:

void _exit (int status)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004084:	f04f 31ff 	mov.w	r1, #4294967295
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ffe7 	bl	800405c <_kill>
	while (1) {}		/* Make sure we hang here */
 800408e:	e7fe      	b.n	800408e <_exit+0x12>

08004090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e00a      	b.n	80040b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040a2:	f3af 8000 	nop.w
 80040a6:	4601      	mov	r1, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	60ba      	str	r2, [r7, #8]
 80040ae:	b2ca      	uxtb	r2, r1
 80040b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3301      	adds	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	dbf0      	blt.n	80040a2 <_read+0x12>
	}

return len;
 80040c0:	687b      	ldr	r3, [r7, #4]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e009      	b.n	80040f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	60ba      	str	r2, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc ff91 	bl	800100c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3301      	adds	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	dbf1      	blt.n	80040dc <_write+0x12>
	}
	return len;
 80040f8:	687b      	ldr	r3, [r7, #4]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_close>:

int _close(int file)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	return -1;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800412a:	605a      	str	r2, [r3, #4]
	return 0;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <_isatty>:

int _isatty(int file)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	return 1;
 8004142:	2301      	movs	r3, #1
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <_sbrk+0x5c>)
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <_sbrk+0x60>)
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <_sbrk+0x64>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <_sbrk+0x64>)
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <_sbrk+0x68>)
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <_sbrk+0x64>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d207      	bcs.n	80041ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800419c:	f003 f930 	bl	8007400 <__errno>
 80041a0:	4603      	mov	r3, r0
 80041a2:	220c      	movs	r2, #12
 80041a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295
 80041aa:	e009      	b.n	80041c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <_sbrk+0x64>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <_sbrk+0x64>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <_sbrk+0x64>)
 80041bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20030000 	.word	0x20030000
 80041cc:	00000400 	.word	0x00000400
 80041d0:	20000230 	.word	0x20000230
 80041d4:	20000798 	.word	0x20000798

080041d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <SystemInit+0x20>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <SystemInit+0x20>)
 80041e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80041fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004234 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004200:	480d      	ldr	r0, [pc, #52]	; (8004238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004202:	490e      	ldr	r1, [pc, #56]	; (800423c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004208:	e002      	b.n	8004210 <LoopCopyDataInit>

0800420a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800420a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800420c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420e:	3304      	adds	r3, #4

08004210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004214:	d3f9      	bcc.n	800420a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004218:	4c0b      	ldr	r4, [pc, #44]	; (8004248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800421c:	e001      	b.n	8004222 <LoopFillZerobss>

0800421e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004220:	3204      	adds	r2, #4

08004222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004224:	d3fb      	bcc.n	800421e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004226:	f7ff ffd7 	bl	80041d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800422a:	f003 f8ef 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800422e:	f7fc feff 	bl	8001030 <main>
  bx  lr    
 8004232:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004234:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800423c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004240:	0800c1ac 	.word	0x0800c1ac
  ldr r2, =_sbss
 8004244:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004248:	20000798 	.word	0x20000798

0800424c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800424c:	e7fe      	b.n	800424c <ADC_IRQHandler>
	...

08004250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <HAL_Init+0x40>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <HAL_Init+0x40>)
 800425a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800425e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_Init+0x40>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_Init+0x40>)
 8004266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <HAL_Init+0x40>)
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004278:	2003      	movs	r0, #3
 800427a:	f000 fd37 	bl	8004cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800427e:	200f      	movs	r0, #15
 8004280:	f000 f808 	bl	8004294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004284:	f7ff fa8a 	bl	800379c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00

08004294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_InitTick+0x54>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_InitTick+0x58>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fd4f 	bl	8004d56 <HAL_SYSTICK_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e00e      	b.n	80042e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b0f      	cmp	r3, #15
 80042c6:	d80a      	bhi.n	80042de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042c8:	2200      	movs	r2, #0
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	f000 fd17 	bl	8004d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042d4:	4a06      	ldr	r2, [pc, #24]	; (80042f0 <HAL_InitTick+0x5c>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	20000014 	.word	0x20000014
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_IncTick+0x20>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_IncTick+0x24>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4413      	add	r3, r2
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <HAL_IncTick+0x24>)
 8004306:	6013      	str	r3, [r2, #0]
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000014 	.word	0x20000014
 8004318:	20000784 	.word	0x20000784

0800431c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return uwTick;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_GetTick+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000784 	.word	0x20000784

08004334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800433c:	f7ff ffee 	bl	800431c <HAL_GetTick>
 8004340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d005      	beq.n	800435a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_Delay+0x44>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800435a:	bf00      	nop
 800435c:	f7ff ffde 	bl	800431c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d8f7      	bhi.n	800435c <HAL_Delay+0x28>
  {
  }
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000014 	.word	0x20000014

0800437c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e033      	b.n	80043fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fa26 	bl	80037ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043c2:	f023 0302 	bic.w	r3, r3, #2
 80043c6:	f043 0202 	orr.w	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fac0 	bl	8004954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	f043 0201 	orr.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
 80043ea:	e001      	b.n	80043f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_ADC_Start+0x1a>
 800441a:	2302      	movs	r3, #2
 800441c:	e0b2      	b.n	8004584 <HAL_ADC_Start+0x180>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d018      	beq.n	8004466 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004444:	4b52      	ldr	r3, [pc, #328]	; (8004590 <HAL_ADC_Start+0x18c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_ADC_Start+0x190>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0c9a      	lsrs	r2, r3, #18
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004458:	e002      	b.n	8004460 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3b01      	subs	r3, #1
 800445e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f9      	bne.n	800445a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d17a      	bne.n	800456a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800449e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d106      	bne.n	80044c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f023 0206 	bic.w	r2, r3, #6
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
 80044c0:	e002      	b.n	80044c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_ADC_Start+0x194>)
 80044d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d12a      	bne.n	8004540 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	; (800459c <HAL_ADC_Start+0x198>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d015      	beq.n	8004520 <HAL_ADC_Start+0x11c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <HAL_ADC_Start+0x19c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d105      	bne.n	800450a <HAL_ADC_Start+0x106>
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_ADC_Start+0x194>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <HAL_ADC_Start+0x1a0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d136      	bne.n	8004582 <HAL_ADC_Start+0x17e>
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_ADC_Start+0x194>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d130      	bne.n	8004582 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d129      	bne.n	8004582 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	e020      	b.n	8004582 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <HAL_ADC_Start+0x198>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d11b      	bne.n	8004582 <HAL_ADC_Start+0x17e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	e00b      	b.n	8004582 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0210 	orr.w	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	2000000c 	.word	0x2000000c
 8004594:	431bde83 	.word	0x431bde83
 8004598:	40012300 	.word	0x40012300
 800459c:	40012000 	.word	0x40012000
 80045a0:	40012100 	.word	0x40012100
 80045a4:	40012200 	.word	0x40012200

080045a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d113      	bne.n	80045ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d10b      	bne.n	80045ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e063      	b.n	80046b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80045ee:	f7ff fe95 	bl	800431c <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045f4:	e021      	b.n	800463a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d01d      	beq.n	800463a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_ADC_PollForConversion+0x6c>
 8004604:	f7ff fe8a 	bl	800431c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d212      	bcs.n	800463a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d00b      	beq.n	800463a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e03d      	b.n	80046b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d1d6      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0212 	mvn.w	r2, #18
 8004650:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d123      	bne.n	80046b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11f      	bne.n	80046b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800468c:	2b00      	cmp	r3, #0
 800468e:	d111      	bne.n	80046b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e113      	b.n	800491c <HAL_ADC_ConfigChannel+0x244>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b09      	cmp	r3, #9
 8004702:	d925      	bls.n	8004750 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68d9      	ldr	r1, [r3, #12]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	3b1e      	subs	r3, #30
 800471a:	2207      	movs	r2, #7
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43da      	mvns	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	400a      	ands	r2, r1
 8004728:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68d9      	ldr	r1, [r3, #12]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	4618      	mov	r0, r3
 800473c:	4603      	mov	r3, r0
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4403      	add	r3, r0
 8004742:	3b1e      	subs	r3, #30
 8004744:	409a      	lsls	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e022      	b.n	8004796 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6919      	ldr	r1, [r3, #16]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	2207      	movs	r2, #7
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43da      	mvns	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6919      	ldr	r1, [r3, #16]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	4618      	mov	r0, r3
 8004786:	4603      	mov	r3, r0
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4403      	add	r3, r0
 800478c:	409a      	lsls	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d824      	bhi.n	80047e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	3b05      	subs	r3, #5
 80047b0:	221f      	movs	r2, #31
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	400a      	ands	r2, r1
 80047be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	4618      	mov	r0, r3
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	3b05      	subs	r3, #5
 80047da:	fa00 f203 	lsl.w	r2, r0, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
 80047e6:	e04c      	b.n	8004882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d824      	bhi.n	800483a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	3b23      	subs	r3, #35	; 0x23
 8004802:	221f      	movs	r2, #31
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43da      	mvns	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	400a      	ands	r2, r1
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4618      	mov	r0, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	3b23      	subs	r3, #35	; 0x23
 800482c:	fa00 f203 	lsl.w	r2, r0, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
 8004838:	e023      	b.n	8004882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	3b41      	subs	r3, #65	; 0x41
 800484c:	221f      	movs	r2, #31
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	400a      	ands	r2, r1
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	4618      	mov	r0, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	3b41      	subs	r3, #65	; 0x41
 8004876:	fa00 f203 	lsl.w	r2, r0, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <HAL_ADC_ConfigChannel+0x250>)
 8004884:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a28      	ldr	r2, [pc, #160]	; (800492c <HAL_ADC_ConfigChannel+0x254>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10f      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1d8>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b12      	cmp	r3, #18
 8004896:	d10b      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_ADC_ConfigChannel+0x254>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d12b      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x23a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_ADC_ConfigChannel+0x258>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <HAL_ADC_ConfigChannel+0x1f4>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b11      	cmp	r3, #17
 80048ca:	d122      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <HAL_ADC_ConfigChannel+0x258>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d111      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_ADC_ConfigChannel+0x25c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a11      	ldr	r2, [pc, #68]	; (8004938 <HAL_ADC_ConfigChannel+0x260>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	0c9a      	lsrs	r2, r3, #18
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004904:	e002      	b.n	800490c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40012300 	.word	0x40012300
 800492c:	40012000 	.word	0x40012000
 8004930:	10000012 	.word	0x10000012
 8004934:	2000000c 	.word	0x2000000c
 8004938:	431bde83 	.word	0x431bde83

0800493c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495c:	4b79      	ldr	r3, [pc, #484]	; (8004b44 <ADC_Init+0x1f0>)
 800495e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	4a58      	ldr	r2, [pc, #352]	; (8004b48 <ADC_Init+0x1f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d022      	beq.n	8004a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6899      	ldr	r1, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6899      	ldr	r1, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	e00f      	b.n	8004a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0202 	bic.w	r2, r2, #2
 8004a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7e1b      	ldrb	r3, [r3, #24]
 8004a6c:	005a      	lsls	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	035a      	lsls	r2, r3, #13
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	e007      	b.n	8004ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	051a      	lsls	r2, r3, #20
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6899      	ldr	r1, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b0a:	025a      	lsls	r2, r3, #9
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	029a      	lsls	r2, r3, #10
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40012300 	.word	0x40012300
 8004b48:	0f000001 	.word	0x0f000001

08004b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <__NVIC_SetPriorityGrouping+0x44>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <__NVIC_SetPriorityGrouping+0x44>)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	60d3      	str	r3, [r2, #12]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <__NVIC_GetPriorityGrouping+0x18>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db0b      	blt.n	8004bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	f003 021f 	and.w	r2, r3, #31
 8004bc8:	4907      	ldr	r1, [pc, #28]	; (8004be8 <__NVIC_EnableIRQ+0x38>)
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	e000e100 	.word	0xe000e100

08004bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db0a      	blt.n	8004c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	490c      	ldr	r1, [pc, #48]	; (8004c38 <__NVIC_SetPriority+0x4c>)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	440b      	add	r3, r1
 8004c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c14:	e00a      	b.n	8004c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4908      	ldr	r1, [pc, #32]	; (8004c3c <__NVIC_SetPriority+0x50>)
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	3b04      	subs	r3, #4
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	761a      	strb	r2, [r3, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000e100 	.word	0xe000e100
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	; 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	bf28      	it	cs
 8004c5e:	2304      	movcs	r3, #4
 8004c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d902      	bls.n	8004c70 <NVIC_EncodePriority+0x30>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3b03      	subs	r3, #3
 8004c6e:	e000      	b.n	8004c72 <NVIC_EncodePriority+0x32>
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	401a      	ands	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c88:	f04f 31ff 	mov.w	r1, #4294967295
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	43d9      	mvns	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	4313      	orrs	r3, r2
         );
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3724      	adds	r7, #36	; 0x24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb8:	d301      	bcc.n	8004cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e00f      	b.n	8004cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <SysTick_Config+0x40>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	f7ff ff8e 	bl	8004bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <SysTick_Config+0x40>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <SysTick_Config+0x40>)
 8004cd8:	2207      	movs	r2, #7
 8004cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	e000e010 	.word	0xe000e010

08004cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff29 	bl	8004b4c <__NVIC_SetPriorityGrouping>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d14:	f7ff ff3e 	bl	8004b94 <__NVIC_GetPriorityGrouping>
 8004d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7ff ff8e 	bl	8004c40 <NVIC_EncodePriority>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff5d 	bl	8004bec <__NVIC_SetPriority>
}
 8004d32:	bf00      	nop
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff31 	bl	8004bb0 <__NVIC_EnableIRQ>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffa2 	bl	8004ca8 <SysTick_Config>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e177      	b.n	800507c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f040 8166 	bne.w	8005076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d005      	beq.n	8004dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d130      	bne.n	8004e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 0201 	and.w	r2, r3, #1
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d017      	beq.n	8004e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d123      	bne.n	8004eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	220f      	movs	r2, #15
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0203 	and.w	r2, r3, #3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80c0 	beq.w	8005076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b66      	ldr	r3, [pc, #408]	; (8005094 <HAL_GPIO_Init+0x324>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	4a65      	ldr	r2, [pc, #404]	; (8005094 <HAL_GPIO_Init+0x324>)
 8004f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f04:	6453      	str	r3, [r2, #68]	; 0x44
 8004f06:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_GPIO_Init+0x324>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f12:	4a61      	ldr	r2, [pc, #388]	; (8005098 <HAL_GPIO_Init+0x328>)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	220f      	movs	r2, #15
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a58      	ldr	r2, [pc, #352]	; (800509c <HAL_GPIO_Init+0x32c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d037      	beq.n	8004fae <HAL_GPIO_Init+0x23e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a57      	ldr	r2, [pc, #348]	; (80050a0 <HAL_GPIO_Init+0x330>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d031      	beq.n	8004faa <HAL_GPIO_Init+0x23a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a56      	ldr	r2, [pc, #344]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <HAL_GPIO_Init+0x236>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a55      	ldr	r2, [pc, #340]	; (80050a8 <HAL_GPIO_Init+0x338>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d025      	beq.n	8004fa2 <HAL_GPIO_Init+0x232>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a54      	ldr	r2, [pc, #336]	; (80050ac <HAL_GPIO_Init+0x33c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01f      	beq.n	8004f9e <HAL_GPIO_Init+0x22e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a53      	ldr	r2, [pc, #332]	; (80050b0 <HAL_GPIO_Init+0x340>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d019      	beq.n	8004f9a <HAL_GPIO_Init+0x22a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_GPIO_Init+0x344>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_GPIO_Init+0x226>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a51      	ldr	r2, [pc, #324]	; (80050b8 <HAL_GPIO_Init+0x348>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00d      	beq.n	8004f92 <HAL_GPIO_Init+0x222>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a50      	ldr	r2, [pc, #320]	; (80050bc <HAL_GPIO_Init+0x34c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <HAL_GPIO_Init+0x21e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4f      	ldr	r2, [pc, #316]	; (80050c0 <HAL_GPIO_Init+0x350>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <HAL_GPIO_Init+0x21a>
 8004f86:	2309      	movs	r3, #9
 8004f88:	e012      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f8a:	230a      	movs	r3, #10
 8004f8c:	e010      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	e00e      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f92:	2307      	movs	r3, #7
 8004f94:	e00c      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f96:	2306      	movs	r3, #6
 8004f98:	e00a      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f9a:	2305      	movs	r3, #5
 8004f9c:	e008      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	e006      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e004      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e002      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_GPIO_Init+0x240>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	f002 0203 	and.w	r2, r2, #3
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	4093      	lsls	r3, r2
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc0:	4935      	ldr	r1, [pc, #212]	; (8005098 <HAL_GPIO_Init+0x328>)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	089b      	lsrs	r3, r3, #2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ff2:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <HAL_GPIO_Init+0x354>)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005022:	4b28      	ldr	r3, [pc, #160]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800504c:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <HAL_GPIO_Init+0x354>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005070:	4a14      	ldr	r2, [pc, #80]	; (80050c4 <HAL_GPIO_Init+0x354>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3301      	adds	r3, #1
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b0f      	cmp	r3, #15
 8005080:	f67f ae84 	bls.w	8004d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800
 8005098:	40013800 	.word	0x40013800
 800509c:	40020000 	.word	0x40020000
 80050a0:	40020400 	.word	0x40020400
 80050a4:	40020800 	.word	0x40020800
 80050a8:	40020c00 	.word	0x40020c00
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40021400 	.word	0x40021400
 80050b4:	40021800 	.word	0x40021800
 80050b8:	40021c00 	.word	0x40021c00
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40022400 	.word	0x40022400
 80050c4:	40013c00 	.word	0x40013c00

080050c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e001      	b.n	80050ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
 8005104:	4613      	mov	r3, r2
 8005106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800510e:	887a      	ldrh	r2, [r7, #2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005114:	e003      	b.n	800511e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	619a      	str	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e264      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d075      	beq.n	8005236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514a:	4ba3      	ldr	r3, [pc, #652]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00c      	beq.n	8005170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005156:	4ba0      	ldr	r3, [pc, #640]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800515e:	2b08      	cmp	r3, #8
 8005160:	d112      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005162:	4b9d      	ldr	r3, [pc, #628]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516e:	d10b      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	4b99      	ldr	r3, [pc, #612]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05b      	beq.n	8005234 <HAL_RCC_OscConfig+0x108>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d157      	bne.n	8005234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e23f      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d106      	bne.n	80051a0 <HAL_RCC_OscConfig+0x74>
 8005192:	4b91      	ldr	r3, [pc, #580]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a90      	ldr	r2, [pc, #576]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e01d      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x98>
 80051aa:	4b8b      	ldr	r3, [pc, #556]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a8a      	ldr	r2, [pc, #552]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a87      	ldr	r2, [pc, #540]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051c4:	4b84      	ldr	r3, [pc, #528]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a83      	ldr	r2, [pc, #524]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b81      	ldr	r3, [pc, #516]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a80      	ldr	r2, [pc, #512]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7ff f89a 	bl	800431c <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ec:	f7ff f896 	bl	800431c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e204      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0xc0>
 800520a:	e014      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7ff f886 	bl	800431c <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005214:	f7ff f882 	bl	800431c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1f0      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005226:	4b6c      	ldr	r3, [pc, #432]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0xe8>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d063      	beq.n	800530a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005242:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524e:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005256:	2b08      	cmp	r3, #8
 8005258:	d11c      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800525a:	4b5f      	ldr	r3, [pc, #380]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d116      	bne.n	8005294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005266:	4b5c      	ldr	r3, [pc, #368]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1c4      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4952      	ldr	r1, [pc, #328]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	e03a      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_OscConfig+0x2b0>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7ff f83b 	bl	800431c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7ff f837 	bl	800431c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1a5      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052bc:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	4b43      	ldr	r3, [pc, #268]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4940      	ldr	r1, [pc, #256]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052de:	4b3f      	ldr	r3, [pc, #252]	; (80053dc <HAL_RCC_OscConfig+0x2b0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7ff f81a 	bl	800431c <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ec:	f7ff f816 	bl	800431c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e184      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d030      	beq.n	8005378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <HAL_RCC_OscConfig+0x2b4>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fe fffa 	bl	800431c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532c:	f7fe fff6 	bl	800431c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e164      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x200>
 800534a:	e015      	b.n	8005378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_OscConfig+0x2b4>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fe ffe3 	bl	800431c <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535a:	f7fe ffdf 	bl	800431c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e14d      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a0 	beq.w	80054c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d121      	bne.n	8005406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_RCC_OscConfig+0x2b8>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fe ffa5 	bl	800431c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	e011      	b.n	80053fa <HAL_RCC_OscConfig+0x2ce>
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	42470000 	.word	0x42470000
 80053e0:	42470e80 	.word	0x42470e80
 80053e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fe ff98 	bl	800431c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e106      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_RCC_OscConfig+0x4e4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x2f0>
 800540e:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a80      	ldr	r2, [pc, #512]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	e01c      	b.n	8005456 <HAL_RCC_OscConfig+0x32a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b05      	cmp	r3, #5
 8005422:	d10c      	bne.n	800543e <HAL_RCC_OscConfig+0x312>
 8005424:	4b7b      	ldr	r3, [pc, #492]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a7a      	ldr	r2, [pc, #488]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	4b78      	ldr	r3, [pc, #480]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a77      	ldr	r2, [pc, #476]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	e00b      	b.n	8005456 <HAL_RCC_OscConfig+0x32a>
 800543e:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a74      	ldr	r2, [pc, #464]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
 800544a:	4b72      	ldr	r3, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a71      	ldr	r2, [pc, #452]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005450:	f023 0304 	bic.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d015      	beq.n	800548a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fe ff5d 	bl	800431c <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fe ff59 	bl	800431c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0c5      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547c:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ee      	beq.n	8005466 <HAL_RCC_OscConfig+0x33a>
 8005488:	e014      	b.n	80054b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548a:	f7fe ff47 	bl	800431c <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005492:	f7fe ff43 	bl	800431c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0af      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a8:	4b5a      	ldr	r3, [pc, #360]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ee      	bne.n	8005492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a55      	ldr	r2, [pc, #340]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 809b 	beq.w	8005606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d0:	4b50      	ldr	r3, [pc, #320]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d05c      	beq.n	8005596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d141      	bne.n	8005568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e4:	4b4c      	ldr	r3, [pc, #304]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ea:	f7fe ff17 	bl	800431c <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fe ff13 	bl	800431c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e081      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005504:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	3b01      	subs	r3, #1
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fe feec 	bl	800431c <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005548:	f7fe fee8 	bl	800431c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e056      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x41c>
 8005566:	e04e      	b.n	8005606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_OscConfig+0x4ec>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fe fed5 	bl	800431c <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005576:	f7fe fed1 	bl	800431c <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e03f      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005588:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x44a>
 8005594:	e037      	b.n	8005606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e032      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d028      	beq.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d121      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d11a      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055da:	4293      	cmp	r3, r2
 80055dc:	d111      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40007000 	.word	0x40007000
 8005614:	40023800 	.word	0x40023800
 8005618:	42470060 	.word	0x42470060

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0cc      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d90c      	bls.n	8005658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0b8      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a58      	ldr	r2, [pc, #352]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005688:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	494d      	ldr	r1, [pc, #308]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d044      	beq.n	800573c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d003      	beq.n	80056da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e06f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e067      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4934      	ldr	r1, [pc, #208]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800570c:	f7fe fe06 	bl	800431c <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fe fe02 	bl	800431c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e04f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 020c 	and.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d1eb      	bne.n	8005714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d20c      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e032      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490e      	ldr	r1, [pc, #56]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a2:	f000 f821 	bl	80057e8 <HAL_RCC_GetSysClockFreq>
 80057a6:	4602      	mov	r2, r0
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	490a      	ldr	r1, [pc, #40]	; (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	5ccb      	ldrb	r3, [r1, r3]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fd66 	bl	8004294 <HAL_InitTick>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0800bcd0 	.word	0x0800bcd0
 80057e0:	2000000c 	.word	0x2000000c
 80057e4:	20000010 	.word	0x20000010

080057e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	2300      	movs	r3, #0
 80057fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005800:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 030c 	and.w	r3, r3, #12
 8005808:	2b08      	cmp	r3, #8
 800580a:	d00d      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x40>
 800580c:	2b08      	cmp	r3, #8
 800580e:	f200 80bd 	bhi.w	800598c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x34>
 8005816:	2b04      	cmp	r3, #4
 8005818:	d003      	beq.n	8005822 <HAL_RCC_GetSysClockFreq+0x3a>
 800581a:	e0b7      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800581c:	4b61      	ldr	r3, [pc, #388]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800581e:	60bb      	str	r3, [r7, #8]
       break;
 8005820:	e0b7      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005822:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005824:	60bb      	str	r3, [r7, #8]
      break;
 8005826:	e0b4      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005828:	4b5d      	ldr	r3, [pc, #372]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005832:	4b5b      	ldr	r3, [pc, #364]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d04d      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583e:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	099b      	lsrs	r3, r3, #6
 8005844:	461a      	mov	r2, r3
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800584e:	f04f 0100 	mov.w	r1, #0
 8005852:	ea02 0800 	and.w	r8, r2, r0
 8005856:	ea03 0901 	and.w	r9, r3, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	014b      	lsls	r3, r1, #5
 8005868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800586c:	0142      	lsls	r2, r0, #5
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	ebb0 0008 	subs.w	r0, r0, r8
 8005876:	eb61 0109 	sbc.w	r1, r1, r9
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	018b      	lsls	r3, r1, #6
 8005884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005888:	0182      	lsls	r2, r0, #6
 800588a:	1a12      	subs	r2, r2, r0
 800588c:	eb63 0301 	sbc.w	r3, r3, r1
 8005890:	f04f 0000 	mov.w	r0, #0
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	00d9      	lsls	r1, r3, #3
 800589a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800589e:	00d0      	lsls	r0, r2, #3
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	eb12 0208 	adds.w	r2, r2, r8
 80058a8:	eb43 0309 	adc.w	r3, r3, r9
 80058ac:	f04f 0000 	mov.w	r0, #0
 80058b0:	f04f 0100 	mov.w	r1, #0
 80058b4:	0259      	lsls	r1, r3, #9
 80058b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ba:	0250      	lsls	r0, r2, #9
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	f7fb f9ec 	bl	8000ca8 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4613      	mov	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e04a      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058da:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	461a      	mov	r2, r3
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	ea02 0400 	and.w	r4, r2, r0
 80058f2:	ea03 0501 	and.w	r5, r3, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	014b      	lsls	r3, r1, #5
 8005904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005908:	0142      	lsls	r2, r0, #5
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	1b00      	subs	r0, r0, r4
 8005910:	eb61 0105 	sbc.w	r1, r1, r5
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	018b      	lsls	r3, r1, #6
 800591e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005922:	0182      	lsls	r2, r0, #6
 8005924:	1a12      	subs	r2, r2, r0
 8005926:	eb63 0301 	sbc.w	r3, r3, r1
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	00d9      	lsls	r1, r3, #3
 8005934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005938:	00d0      	lsls	r0, r2, #3
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	1912      	adds	r2, r2, r4
 8005940:	eb45 0303 	adc.w	r3, r5, r3
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	0299      	lsls	r1, r3, #10
 800594e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005952:	0290      	lsls	r0, r2, #10
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	461a      	mov	r2, r3
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f7fb f9a0 	bl	8000ca8 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	3301      	adds	r3, #1
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	60bb      	str	r3, [r7, #8]
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800598e:	60bb      	str	r3, [r7, #8]
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	68bb      	ldr	r3, [r7, #8]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	007a1200 	.word	0x007a1200

080059ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	2000000c 	.word	0x2000000c

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059c8:	f7ff fff0 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	0800bce0 	.word	0x0800bce0

080059ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059f0:	f7ff ffdc 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0b5b      	lsrs	r3, r3, #13
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4903      	ldr	r1, [pc, #12]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	0800bce0 	.word	0x0800bce0

08005a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e041      	b.n	8005aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fe f860 	bl	8003b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f000 fe1e 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d001      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04e      	b.n	8005b6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d022      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d01d      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d018      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x80>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d111      	bne.n	8005b58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d010      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	e007      	b.n	8005b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800

08005b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e041      	b.n	8005c2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f839 	bl	8005c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f000 fd5e 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_TIM_PWM_Start+0x24>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e022      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x6a>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d109      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x3e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e015      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x6a>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d109      	bne.n	8005ca0 <HAL_TIM_PWM_Start+0x58>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	e008      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x6a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07c      	b.n	8005db4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_PWM_Start+0x82>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc8:	e013      	b.n	8005cf2 <HAL_TIM_PWM_Start+0xaa>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d104      	bne.n	8005cda <HAL_TIM_PWM_Start+0x92>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd8:	e00b      	b.n	8005cf2 <HAL_TIM_PWM_Start+0xaa>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_PWM_Start+0xa2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce8:	e003      	b.n	8005cf2 <HAL_TIM_PWM_Start+0xaa>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 ffb4 	bl	8006c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <HAL_TIM_PWM_Start+0x174>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_TIM_PWM_Start+0xcc>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <HAL_TIM_PWM_Start+0x178>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_PWM_Start+0xd0>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_TIM_PWM_Start+0xd2>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <HAL_TIM_PWM_Start+0x174>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d40:	d01d      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_TIM_PWM_Start+0x17c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <HAL_TIM_PWM_Start+0x180>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <HAL_TIM_PWM_Start+0x184>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_TIM_PWM_Start+0x178>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_TIM_PWM_Start+0x188>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_TIM_PWM_Start+0x18c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d111      	bne.n	8005da2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b06      	cmp	r3, #6
 8005d8e:	d010      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da0:	e007      	b.n	8005db2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40001800 	.word	0x40001800

08005dd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 ff3c 	bl	8006c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <HAL_TIM_PWM_Stop+0xd8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIM_PWM_Stop+0x2c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <HAL_TIM_PWM_Stop+0xdc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_PWM_Stop+0x30>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_TIM_PWM_Stop+0x32>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d017      	beq.n	8005e3e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <HAL_TIM_PWM_Stop+0x66>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	f240 4344 	movw	r3, #1092	; 0x444
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_TIM_PWM_Stop+0x66>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <HAL_TIM_PWM_Stop+0x96>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	f240 4344 	movw	r3, #1092	; 0x444
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_PWM_Stop+0x96>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Stop+0xa6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e7c:	e013      	b.n	8005ea6 <HAL_TIM_PWM_Stop+0xce>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Stop+0xb6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e8c:	e00b      	b.n	8005ea6 <HAL_TIM_PWM_Stop+0xce>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_PWM_Stop+0xc6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	e003      	b.n	8005ea6 <HAL_TIM_PWM_Stop+0xce>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e097      	b.n	8005ffc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fd fcc7 	bl	8003874 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 fbc1 	bl	8006694 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f58:	f023 030c 	bic.w	r3, r3, #12
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	4313      	orrs	r3, r2
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	031b      	lsls	r3, r3, #12
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4313      	orrs	r3, r2
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006014:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800601c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006024:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800602c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d110      	bne.n	8006056 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d102      	bne.n	8006040 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800603a:	7b7b      	ldrb	r3, [r7, #13]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e069      	b.n	8006118 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006054:	e031      	b.n	80060ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d110      	bne.n	800607e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800605c:	7bbb      	ldrb	r3, [r7, #14]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d102      	bne.n	8006068 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006062:	7b3b      	ldrb	r3, [r7, #12]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e055      	b.n	8006118 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800607c:	e01d      	b.n	80060ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	7b7b      	ldrb	r3, [r7, #13]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d102      	bne.n	8006096 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006090:	7b3b      	ldrb	r3, [r7, #12]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d001      	beq.n	800609a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e03e      	b.n	8006118 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_TIM_Encoder_Start+0xc4>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d008      	beq.n	80060d8 <HAL_TIM_Encoder_Start+0xd4>
 80060c6:	e00f      	b.n	80060e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fdc9 	bl	8006c68 <TIM_CCxChannelCmd>
      break;
 80060d6:	e016      	b.n	8006106 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2201      	movs	r2, #1
 80060de:	2104      	movs	r1, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fdc1 	bl	8006c68 <TIM_CCxChannelCmd>
      break;
 80060e6:	e00e      	b.n	8006106 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fdb9 	bl	8006c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	2104      	movs	r1, #4
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fdb2 	bl	8006c68 <TIM_CCxChannelCmd>
      break;
 8006104:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b02      	cmp	r3, #2
 8006134:	d122      	bne.n	800617c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b02      	cmp	r3, #2
 8006142:	d11b      	bne.n	800617c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0202 	mvn.w	r2, #2
 800614c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa77 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006168:	e005      	b.n	8006176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa69 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa7a 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d122      	bne.n	80061d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b04      	cmp	r3, #4
 8006196:	d11b      	bne.n	80061d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0204 	mvn.w	r2, #4
 80061a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa4d 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 80061bc:	e005      	b.n	80061ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa3f 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa50 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d122      	bne.n	8006224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d11b      	bne.n	8006224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0208 	mvn.w	r2, #8
 80061f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2204      	movs	r2, #4
 80061fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fa23 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa15 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa26 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b10      	cmp	r3, #16
 8006230:	d122      	bne.n	8006278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b10      	cmp	r3, #16
 800623e:	d11b      	bne.n	8006278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0210 	mvn.w	r2, #16
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2208      	movs	r2, #8
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9f9 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9eb 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f9fc 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10e      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b01      	cmp	r3, #1
 8006292:	d107      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0201 	mvn.w	r2, #1
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fc f946 	bl	8002530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d10e      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d107      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fd78 	bl	8006dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d107      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9c1 	bl	800667e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d10e      	bne.n	8006328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b20      	cmp	r3, #32
 8006316:	d107      	bne.n	8006328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0220 	mvn.w	r2, #32
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fd42 	bl	8006dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634a:	2302      	movs	r3, #2
 800634c:	e0ae      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	f200 809f 	bhi.w	800649c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006399 	.word	0x08006399
 8006368:	0800649d 	.word	0x0800649d
 800636c:	0800649d 	.word	0x0800649d
 8006370:	0800649d 	.word	0x0800649d
 8006374:	080063d9 	.word	0x080063d9
 8006378:	0800649d 	.word	0x0800649d
 800637c:	0800649d 	.word	0x0800649d
 8006380:	0800649d 	.word	0x0800649d
 8006384:	0800641b 	.word	0x0800641b
 8006388:	0800649d 	.word	0x0800649d
 800638c:	0800649d 	.word	0x0800649d
 8006390:	0800649d 	.word	0x0800649d
 8006394:	0800645b 	.word	0x0800645b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa18 	bl	80067d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0208 	orr.w	r2, r2, #8
 80063b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0204 	bic.w	r2, r2, #4
 80063c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6999      	ldr	r1, [r3, #24]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	619a      	str	r2, [r3, #24]
      break;
 80063d6:	e064      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fa68 	bl	80068b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6999      	ldr	r1, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	021a      	lsls	r2, r3, #8
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	619a      	str	r2, [r3, #24]
      break;
 8006418:	e043      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fabd 	bl	80069a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0208 	orr.w	r2, r2, #8
 8006434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0204 	bic.w	r2, r2, #4
 8006444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69d9      	ldr	r1, [r3, #28]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	61da      	str	r2, [r3, #28]
      break;
 8006458:	e023      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fb11 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69d9      	ldr	r1, [r3, #28]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	021a      	lsls	r2, r3, #8
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	61da      	str	r2, [r3, #28]
      break;
 800649a:	e002      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
      break;
 80064a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x1c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e0b4      	b.n	800663a <HAL_TIM_ConfigClockSource+0x186>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006508:	d03e      	beq.n	8006588 <HAL_TIM_ConfigClockSource+0xd4>
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650e:	f200 8087 	bhi.w	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	f000 8086 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x172>
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651e:	d87f      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b70      	cmp	r3, #112	; 0x70
 8006522:	d01a      	beq.n	800655a <HAL_TIM_ConfigClockSource+0xa6>
 8006524:	2b70      	cmp	r3, #112	; 0x70
 8006526:	d87b      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	d050      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x11a>
 800652c:	2b60      	cmp	r3, #96	; 0x60
 800652e:	d877      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b50      	cmp	r3, #80	; 0x50
 8006532:	d03c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0xfa>
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	d873      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d058      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x13a>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d86f      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d064      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d86b      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d060      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d867      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05c      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006554:	2b10      	cmp	r3, #16
 8006556:	d05a      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	e062      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6899      	ldr	r1, [r3, #8]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f000 fb5d 	bl	8006c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800657c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	609a      	str	r2, [r3, #8]
      break;
 8006586:	e04f      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6899      	ldr	r1, [r3, #8]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f000 fb46 	bl	8006c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065aa:	609a      	str	r2, [r3, #8]
      break;
 80065ac:	e03c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 faba 	bl	8006b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2150      	movs	r1, #80	; 0x50
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fb13 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e02c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 fad9 	bl	8006b92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2160      	movs	r1, #96	; 0x60
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb03 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e01c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 fa9a 	bl	8006b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2140      	movs	r1, #64	; 0x40
 8006606:	4618      	mov	r0, r3
 8006608:	f000 faf3 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800660c:	e00c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f000 faea 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800661e:	e003      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
      break;
 8006624:	e000      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a40      	ldr	r2, [pc, #256]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3d      	ldr	r2, [pc, #244]	; (80067ac <TIM_Base_SetConfig+0x118>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3c      	ldr	r2, [pc, #240]	; (80067b0 <TIM_Base_SetConfig+0x11c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3b      	ldr	r2, [pc, #236]	; (80067b4 <TIM_Base_SetConfig+0x120>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3a      	ldr	r2, [pc, #232]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d108      	bne.n	80066e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f4:	d027      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <TIM_Base_SetConfig+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d023      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2b      	ldr	r2, [pc, #172]	; (80067b0 <TIM_Base_SetConfig+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2a      	ldr	r2, [pc, #168]	; (80067b4 <TIM_Base_SetConfig+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <TIM_Base_SetConfig+0x128>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <TIM_Base_SetConfig+0x12c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <TIM_Base_SetConfig+0x130>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <TIM_Base_SetConfig+0x134>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a24      	ldr	r2, [pc, #144]	; (80067cc <TIM_Base_SetConfig+0x138>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <TIM_Base_SetConfig+0x13c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0xf8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a0c      	ldr	r2, [pc, #48]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d103      	bne.n	8006794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	615a      	str	r2, [r3, #20]
}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	40010400 	.word	0x40010400
 80067bc:	40014000 	.word	0x40014000
 80067c0:	40014400 	.word	0x40014400
 80067c4:	40014800 	.word	0x40014800
 80067c8:	40001800 	.word	0x40001800
 80067cc:	40001c00 	.word	0x40001c00
 80067d0:	40002000 	.word	0x40002000

080067d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0302 	bic.w	r3, r3, #2
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <TIM_OC1_SetConfig+0xd8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC1_SetConfig+0x64>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <TIM_OC1_SetConfig+0xdc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10c      	bne.n	8006852 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0308 	bic.w	r3, r3, #8
 800683e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 0304 	bic.w	r3, r3, #4
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <TIM_OC1_SetConfig+0xd8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC1_SetConfig+0x8e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <TIM_OC1_SetConfig+0xdc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d111      	bne.n	8006886 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40010400 	.word	0x40010400

080068b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0210 	bic.w	r2, r3, #16
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <TIM_OC2_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0x68>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <TIM_OC2_SetConfig+0xe8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <TIM_OC2_SetConfig+0xe4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC2_SetConfig+0x94>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <TIM_OC2_SetConfig+0xe8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d113      	bne.n	8006970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800694e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <TIM_OC3_SetConfig+0xe0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC3_SetConfig+0x66>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <TIM_OC3_SetConfig+0xe4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d10d      	bne.n	8006a22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <TIM_OC3_SetConfig+0xe0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_OC3_SetConfig+0x92>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <TIM_OC3_SetConfig+0xe4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d113      	bne.n	8006a5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	031b      	lsls	r3, r3, #12
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <TIM_OC4_SetConfig+0xa4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_OC4_SetConfig+0x68>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <TIM_OC4_SetConfig+0xa8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	019b      	lsls	r3, r3, #6
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010400 	.word	0x40010400

08006b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 030a 	bic.w	r3, r3, #10
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b087      	sub	sp, #28
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0210 	bic.w	r2, r3, #16
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	031b      	lsls	r3, r3, #12
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f043 0307 	orr.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e05a      	b.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d01d      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a17      	ldr	r2, [pc, #92]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d10c      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40001800 	.word	0x40001800

08006dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e03f      	b.n	8006e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fd f88e 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2224      	movs	r2, #36	; 0x24
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f929 	bl	8007070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08a      	sub	sp, #40	; 0x28
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d17c      	bne.n	8006f88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_UART_Transmit+0x2c>
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e075      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Transmit+0x3e>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e06e      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2221      	movs	r2, #33	; 0x21
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ec2:	f7fd fa2b 	bl	800431c <HAL_GetTick>
 8006ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006edc:	d108      	bne.n	8006ef0 <HAL_UART_Transmit+0x82>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e003      	b.n	8006ef8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f00:	e02a      	b.n	8006f58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f840 	bl	8006f92 <UART_WaitOnFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e036      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	3302      	adds	r3, #2
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e007      	b.n	8006f4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1cf      	bne.n	8006f02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2140      	movs	r1, #64	; 0x40
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f810 	bl	8006f92 <UART_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b090      	sub	sp, #64	; 0x40
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa2:	e050      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d04c      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb2:	f7fd f9b3 	bl	800431c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d241      	bcs.n	8007046 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fe2:	637a      	str	r2, [r7, #52]	; 0x34
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	613b      	str	r3, [r7, #16]
   return(result);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	63bb      	str	r3, [r7, #56]	; 0x38
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007016:	623a      	str	r2, [r7, #32]
 8007018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	69f9      	ldr	r1, [r7, #28]
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	61bb      	str	r3, [r7, #24]
   return(result);
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e5      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e00f      	b.n	8007066 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	bf0c      	ite	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	2300      	movne	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	429a      	cmp	r2, r3
 8007062:	d09f      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3740      	adds	r7, #64	; 0x40
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	b09f      	sub	sp, #124	; 0x7c
 8007076:	af00      	add	r7, sp, #0
 8007078:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007086:	68d9      	ldr	r1, [r3, #12]
 8007088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	ea40 0301 	orr.w	r3, r0, r1
 8007090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	431a      	orrs	r2, r3
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070b4:	f021 010c 	bic.w	r1, r1, #12
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070be:	430b      	orrs	r3, r1
 80070c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ce:	6999      	ldr	r1, [r3, #24]
 80070d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	ea40 0301 	orr.w	r3, r0, r1
 80070d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4bc5      	ldr	r3, [pc, #788]	; (80073f4 <UART_SetConfig+0x384>)
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d004      	beq.n	80070ee <UART_SetConfig+0x7e>
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4bc3      	ldr	r3, [pc, #780]	; (80073f8 <UART_SetConfig+0x388>)
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d103      	bne.n	80070f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070ee:	f7fe fc7d 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 80070f2:	6778      	str	r0, [r7, #116]	; 0x74
 80070f4:	e002      	b.n	80070fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070f6:	f7fe fc65 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 80070fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007104:	f040 80b6 	bne.w	8007274 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800710a:	461c      	mov	r4, r3
 800710c:	f04f 0500 	mov.w	r5, #0
 8007110:	4622      	mov	r2, r4
 8007112:	462b      	mov	r3, r5
 8007114:	1891      	adds	r1, r2, r2
 8007116:	6439      	str	r1, [r7, #64]	; 0x40
 8007118:	415b      	adcs	r3, r3
 800711a:	647b      	str	r3, [r7, #68]	; 0x44
 800711c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007120:	1912      	adds	r2, r2, r4
 8007122:	eb45 0303 	adc.w	r3, r5, r3
 8007126:	f04f 0000 	mov.w	r0, #0
 800712a:	f04f 0100 	mov.w	r1, #0
 800712e:	00d9      	lsls	r1, r3, #3
 8007130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007134:	00d0      	lsls	r0, r2, #3
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	1911      	adds	r1, r2, r4
 800713c:	6639      	str	r1, [r7, #96]	; 0x60
 800713e:	416b      	adcs	r3, r5
 8007140:	667b      	str	r3, [r7, #100]	; 0x64
 8007142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	1891      	adds	r1, r2, r2
 800714e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007150:	415b      	adcs	r3, r3
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007158:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800715c:	f7f9 fda4 	bl	8000ca8 <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4ba5      	ldr	r3, [pc, #660]	; (80073fc <UART_SetConfig+0x38c>)
 8007166:	fba3 2302 	umull	r2, r3, r3, r2
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	011e      	lsls	r6, r3, #4
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	461c      	mov	r4, r3
 8007172:	f04f 0500 	mov.w	r5, #0
 8007176:	4622      	mov	r2, r4
 8007178:	462b      	mov	r3, r5
 800717a:	1891      	adds	r1, r2, r2
 800717c:	6339      	str	r1, [r7, #48]	; 0x30
 800717e:	415b      	adcs	r3, r3
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007186:	1912      	adds	r2, r2, r4
 8007188:	eb45 0303 	adc.w	r3, r5, r3
 800718c:	f04f 0000 	mov.w	r0, #0
 8007190:	f04f 0100 	mov.w	r1, #0
 8007194:	00d9      	lsls	r1, r3, #3
 8007196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800719a:	00d0      	lsls	r0, r2, #3
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	1911      	adds	r1, r2, r4
 80071a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80071a4:	416b      	adcs	r3, r5
 80071a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	461a      	mov	r2, r3
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	1891      	adds	r1, r2, r2
 80071b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80071b6:	415b      	adcs	r3, r3
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80071c2:	f7f9 fd71 	bl	8000ca8 <__aeabi_uldivmod>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4b8c      	ldr	r3, [pc, #560]	; (80073fc <UART_SetConfig+0x38c>)
 80071cc:	fba3 1302 	umull	r1, r3, r3, r2
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	2164      	movs	r1, #100	; 0x64
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	3332      	adds	r3, #50	; 0x32
 80071de:	4a87      	ldr	r2, [pc, #540]	; (80073fc <UART_SetConfig+0x38c>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071ec:	441e      	add	r6, r3
 80071ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f0:	4618      	mov	r0, r3
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	1894      	adds	r4, r2, r2
 80071fc:	623c      	str	r4, [r7, #32]
 80071fe:	415b      	adcs	r3, r3
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007206:	1812      	adds	r2, r2, r0
 8007208:	eb41 0303 	adc.w	r3, r1, r3
 800720c:	f04f 0400 	mov.w	r4, #0
 8007210:	f04f 0500 	mov.w	r5, #0
 8007214:	00dd      	lsls	r5, r3, #3
 8007216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800721a:	00d4      	lsls	r4, r2, #3
 800721c:	4622      	mov	r2, r4
 800721e:	462b      	mov	r3, r5
 8007220:	1814      	adds	r4, r2, r0
 8007222:	653c      	str	r4, [r7, #80]	; 0x50
 8007224:	414b      	adcs	r3, r1
 8007226:	657b      	str	r3, [r7, #84]	; 0x54
 8007228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	1891      	adds	r1, r2, r2
 8007234:	61b9      	str	r1, [r7, #24]
 8007236:	415b      	adcs	r3, r3
 8007238:	61fb      	str	r3, [r7, #28]
 800723a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800723e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007242:	f7f9 fd31 	bl	8000ca8 <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4b6c      	ldr	r3, [pc, #432]	; (80073fc <UART_SetConfig+0x38c>)
 800724c:	fba3 1302 	umull	r1, r3, r3, r2
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	2164      	movs	r1, #100	; 0x64
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	3332      	adds	r3, #50	; 0x32
 800725e:	4a67      	ldr	r2, [pc, #412]	; (80073fc <UART_SetConfig+0x38c>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f003 0207 	and.w	r2, r3, #7
 800726a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4432      	add	r2, r6
 8007270:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007272:	e0b9      	b.n	80073e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007276:	461c      	mov	r4, r3
 8007278:	f04f 0500 	mov.w	r5, #0
 800727c:	4622      	mov	r2, r4
 800727e:	462b      	mov	r3, r5
 8007280:	1891      	adds	r1, r2, r2
 8007282:	6139      	str	r1, [r7, #16]
 8007284:	415b      	adcs	r3, r3
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800728c:	1912      	adds	r2, r2, r4
 800728e:	eb45 0303 	adc.w	r3, r5, r3
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f04f 0100 	mov.w	r1, #0
 800729a:	00d9      	lsls	r1, r3, #3
 800729c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072a0:	00d0      	lsls	r0, r2, #3
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	eb12 0804 	adds.w	r8, r2, r4
 80072aa:	eb43 0905 	adc.w	r9, r3, r5
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f04f 0100 	mov.w	r1, #0
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	008b      	lsls	r3, r1, #2
 80072c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072c6:	0082      	lsls	r2, r0, #2
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f9 fcec 	bl	8000ca8 <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4b49      	ldr	r3, [pc, #292]	; (80073fc <UART_SetConfig+0x38c>)
 80072d6:	fba3 2302 	umull	r2, r3, r3, r2
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	011e      	lsls	r6, r3, #4
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	4618      	mov	r0, r3
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	1894      	adds	r4, r2, r2
 80072ec:	60bc      	str	r4, [r7, #8]
 80072ee:	415b      	adcs	r3, r3
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f6:	1812      	adds	r2, r2, r0
 80072f8:	eb41 0303 	adc.w	r3, r1, r3
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	f04f 0500 	mov.w	r5, #0
 8007304:	00dd      	lsls	r5, r3, #3
 8007306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800730a:	00d4      	lsls	r4, r2, #3
 800730c:	4622      	mov	r2, r4
 800730e:	462b      	mov	r3, r5
 8007310:	1814      	adds	r4, r2, r0
 8007312:	64bc      	str	r4, [r7, #72]	; 0x48
 8007314:	414b      	adcs	r3, r1
 8007316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	f04f 0100 	mov.w	r1, #0
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	008b      	lsls	r3, r1, #2
 800732c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007330:	0082      	lsls	r2, r0, #2
 8007332:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007336:	f7f9 fcb7 	bl	8000ca8 <__aeabi_uldivmod>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <UART_SetConfig+0x38c>)
 8007340:	fba3 1302 	umull	r1, r3, r3, r2
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	2164      	movs	r1, #100	; 0x64
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	3332      	adds	r3, #50	; 0x32
 8007352:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <UART_SetConfig+0x38c>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800735e:	441e      	add	r6, r3
 8007360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007362:	4618      	mov	r0, r3
 8007364:	f04f 0100 	mov.w	r1, #0
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	1894      	adds	r4, r2, r2
 800736e:	603c      	str	r4, [r7, #0]
 8007370:	415b      	adcs	r3, r3
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007378:	1812      	adds	r2, r2, r0
 800737a:	eb41 0303 	adc.w	r3, r1, r3
 800737e:	f04f 0400 	mov.w	r4, #0
 8007382:	f04f 0500 	mov.w	r5, #0
 8007386:	00dd      	lsls	r5, r3, #3
 8007388:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800738c:	00d4      	lsls	r4, r2, #3
 800738e:	4622      	mov	r2, r4
 8007390:	462b      	mov	r3, r5
 8007392:	eb12 0a00 	adds.w	sl, r2, r0
 8007396:	eb43 0b01 	adc.w	fp, r3, r1
 800739a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4618      	mov	r0, r3
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 0300 	mov.w	r3, #0
 80073ac:	008b      	lsls	r3, r1, #2
 80073ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073b2:	0082      	lsls	r2, r0, #2
 80073b4:	4650      	mov	r0, sl
 80073b6:	4659      	mov	r1, fp
 80073b8:	f7f9 fc76 	bl	8000ca8 <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <UART_SetConfig+0x38c>)
 80073c2:	fba3 1302 	umull	r1, r3, r3, r2
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2164      	movs	r1, #100	; 0x64
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	3332      	adds	r3, #50	; 0x32
 80073d4:	4a09      	ldr	r2, [pc, #36]	; (80073fc <UART_SetConfig+0x38c>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4432      	add	r2, r6
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	377c      	adds	r7, #124	; 0x7c
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	40011000 	.word	0x40011000
 80073f8:	40011400 	.word	0x40011400
 80073fc:	51eb851f 	.word	0x51eb851f

08007400 <__errno>:
 8007400:	4b01      	ldr	r3, [pc, #4]	; (8007408 <__errno+0x8>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000018 	.word	0x20000018

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f004 fc48 	bl	800bcb4 <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	0800c1a4 	.word	0x0800c1a4
 8007448:	0800c1a4 	.word	0x0800c1a4
 800744c:	0800c1a4 	.word	0x0800c1a4
 8007450:	0800c1a8 	.word	0x0800c1a8

08007454 <memset>:
 8007454:	4402      	add	r2, r0
 8007456:	4603      	mov	r3, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <__cvt>:
 8007464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	ec55 4b10 	vmov	r4, r5, d0
 800746c:	2d00      	cmp	r5, #0
 800746e:	460e      	mov	r6, r1
 8007470:	4619      	mov	r1, r3
 8007472:	462b      	mov	r3, r5
 8007474:	bfbb      	ittet	lt
 8007476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800747a:	461d      	movlt	r5, r3
 800747c:	2300      	movge	r3, #0
 800747e:	232d      	movlt	r3, #45	; 0x2d
 8007480:	700b      	strb	r3, [r1, #0]
 8007482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007488:	4691      	mov	r9, r2
 800748a:	f023 0820 	bic.w	r8, r3, #32
 800748e:	bfbc      	itt	lt
 8007490:	4622      	movlt	r2, r4
 8007492:	4614      	movlt	r4, r2
 8007494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007498:	d005      	beq.n	80074a6 <__cvt+0x42>
 800749a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800749e:	d100      	bne.n	80074a2 <__cvt+0x3e>
 80074a0:	3601      	adds	r6, #1
 80074a2:	2102      	movs	r1, #2
 80074a4:	e000      	b.n	80074a8 <__cvt+0x44>
 80074a6:	2103      	movs	r1, #3
 80074a8:	ab03      	add	r3, sp, #12
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	ab02      	add	r3, sp, #8
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	ec45 4b10 	vmov	d0, r4, r5
 80074b4:	4653      	mov	r3, sl
 80074b6:	4632      	mov	r2, r6
 80074b8:	f001 fdb6 	bl	8009028 <_dtoa_r>
 80074bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074c0:	4607      	mov	r7, r0
 80074c2:	d102      	bne.n	80074ca <__cvt+0x66>
 80074c4:	f019 0f01 	tst.w	r9, #1
 80074c8:	d022      	beq.n	8007510 <__cvt+0xac>
 80074ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074ce:	eb07 0906 	add.w	r9, r7, r6
 80074d2:	d110      	bne.n	80074f6 <__cvt+0x92>
 80074d4:	783b      	ldrb	r3, [r7, #0]
 80074d6:	2b30      	cmp	r3, #48	; 0x30
 80074d8:	d10a      	bne.n	80074f0 <__cvt+0x8c>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 80074e6:	b918      	cbnz	r0, 80074f0 <__cvt+0x8c>
 80074e8:	f1c6 0601 	rsb	r6, r6, #1
 80074ec:	f8ca 6000 	str.w	r6, [sl]
 80074f0:	f8da 3000 	ldr.w	r3, [sl]
 80074f4:	4499      	add	r9, r3
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	4620      	mov	r0, r4
 80074fc:	4629      	mov	r1, r5
 80074fe:	f7f9 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007502:	b108      	cbz	r0, 8007508 <__cvt+0xa4>
 8007504:	f8cd 900c 	str.w	r9, [sp, #12]
 8007508:	2230      	movs	r2, #48	; 0x30
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	454b      	cmp	r3, r9
 800750e:	d307      	bcc.n	8007520 <__cvt+0xbc>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007514:	1bdb      	subs	r3, r3, r7
 8007516:	4638      	mov	r0, r7
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	b004      	add	sp, #16
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	1c59      	adds	r1, r3, #1
 8007522:	9103      	str	r1, [sp, #12]
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e7f0      	b.n	800750a <__cvt+0xa6>

08007528 <__exponent>:
 8007528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752a:	4603      	mov	r3, r0
 800752c:	2900      	cmp	r1, #0
 800752e:	bfb8      	it	lt
 8007530:	4249      	neglt	r1, r1
 8007532:	f803 2b02 	strb.w	r2, [r3], #2
 8007536:	bfb4      	ite	lt
 8007538:	222d      	movlt	r2, #45	; 0x2d
 800753a:	222b      	movge	r2, #43	; 0x2b
 800753c:	2909      	cmp	r1, #9
 800753e:	7042      	strb	r2, [r0, #1]
 8007540:	dd2a      	ble.n	8007598 <__exponent+0x70>
 8007542:	f10d 0407 	add.w	r4, sp, #7
 8007546:	46a4      	mov	ip, r4
 8007548:	270a      	movs	r7, #10
 800754a:	46a6      	mov	lr, r4
 800754c:	460a      	mov	r2, r1
 800754e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007552:	fb07 1516 	mls	r5, r7, r6, r1
 8007556:	3530      	adds	r5, #48	; 0x30
 8007558:	2a63      	cmp	r2, #99	; 0x63
 800755a:	f104 34ff 	add.w	r4, r4, #4294967295
 800755e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007562:	4631      	mov	r1, r6
 8007564:	dcf1      	bgt.n	800754a <__exponent+0x22>
 8007566:	3130      	adds	r1, #48	; 0x30
 8007568:	f1ae 0502 	sub.w	r5, lr, #2
 800756c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007570:	1c44      	adds	r4, r0, #1
 8007572:	4629      	mov	r1, r5
 8007574:	4561      	cmp	r1, ip
 8007576:	d30a      	bcc.n	800758e <__exponent+0x66>
 8007578:	f10d 0209 	add.w	r2, sp, #9
 800757c:	eba2 020e 	sub.w	r2, r2, lr
 8007580:	4565      	cmp	r5, ip
 8007582:	bf88      	it	hi
 8007584:	2200      	movhi	r2, #0
 8007586:	4413      	add	r3, r2
 8007588:	1a18      	subs	r0, r3, r0
 800758a:	b003      	add	sp, #12
 800758c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800758e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007592:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007596:	e7ed      	b.n	8007574 <__exponent+0x4c>
 8007598:	2330      	movs	r3, #48	; 0x30
 800759a:	3130      	adds	r1, #48	; 0x30
 800759c:	7083      	strb	r3, [r0, #2]
 800759e:	70c1      	strb	r1, [r0, #3]
 80075a0:	1d03      	adds	r3, r0, #4
 80075a2:	e7f1      	b.n	8007588 <__exponent+0x60>

080075a4 <_printf_float>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	ed2d 8b02 	vpush	{d8}
 80075ac:	b08d      	sub	sp, #52	; 0x34
 80075ae:	460c      	mov	r4, r1
 80075b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075b4:	4616      	mov	r6, r2
 80075b6:	461f      	mov	r7, r3
 80075b8:	4605      	mov	r5, r0
 80075ba:	f002 ff85 	bl	800a4c8 <_localeconv_r>
 80075be:	f8d0 a000 	ldr.w	sl, [r0]
 80075c2:	4650      	mov	r0, sl
 80075c4:	f7f8 fe14 	bl	80001f0 <strlen>
 80075c8:	2300      	movs	r3, #0
 80075ca:	930a      	str	r3, [sp, #40]	; 0x28
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	9305      	str	r3, [sp, #20]
 80075d0:	f8d8 3000 	ldr.w	r3, [r8]
 80075d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075d8:	3307      	adds	r3, #7
 80075da:	f023 0307 	bic.w	r3, r3, #7
 80075de:	f103 0208 	add.w	r2, r3, #8
 80075e2:	f8c8 2000 	str.w	r2, [r8]
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80075fc:	ee08 0a10 	vmov	s16, r0
 8007600:	4b9f      	ldr	r3, [pc, #636]	; (8007880 <_printf_float+0x2dc>)
 8007602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	f7f9 fa9f 	bl	8000b4c <__aeabi_dcmpun>
 800760e:	bb88      	cbnz	r0, 8007674 <_printf_float+0xd0>
 8007610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007614:	4b9a      	ldr	r3, [pc, #616]	; (8007880 <_printf_float+0x2dc>)
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	f7f9 fa79 	bl	8000b10 <__aeabi_dcmple>
 800761e:	bb48      	cbnz	r0, 8007674 <_printf_float+0xd0>
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	4640      	mov	r0, r8
 8007626:	4649      	mov	r1, r9
 8007628:	f7f9 fa68 	bl	8000afc <__aeabi_dcmplt>
 800762c:	b110      	cbz	r0, 8007634 <_printf_float+0x90>
 800762e:	232d      	movs	r3, #45	; 0x2d
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007634:	4b93      	ldr	r3, [pc, #588]	; (8007884 <_printf_float+0x2e0>)
 8007636:	4894      	ldr	r0, [pc, #592]	; (8007888 <_printf_float+0x2e4>)
 8007638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800763c:	bf94      	ite	ls
 800763e:	4698      	movls	r8, r3
 8007640:	4680      	movhi	r8, r0
 8007642:	2303      	movs	r3, #3
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	9b05      	ldr	r3, [sp, #20]
 8007648:	f023 0204 	bic.w	r2, r3, #4
 800764c:	6022      	str	r2, [r4, #0]
 800764e:	f04f 0900 	mov.w	r9, #0
 8007652:	9700      	str	r7, [sp, #0]
 8007654:	4633      	mov	r3, r6
 8007656:	aa0b      	add	r2, sp, #44	; 0x2c
 8007658:	4621      	mov	r1, r4
 800765a:	4628      	mov	r0, r5
 800765c:	f000 f9d8 	bl	8007a10 <_printf_common>
 8007660:	3001      	adds	r0, #1
 8007662:	f040 8090 	bne.w	8007786 <_printf_float+0x1e2>
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	b00d      	add	sp, #52	; 0x34
 800766c:	ecbd 8b02 	vpop	{d8}
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f9 fa66 	bl	8000b4c <__aeabi_dcmpun>
 8007680:	b140      	cbz	r0, 8007694 <_printf_float+0xf0>
 8007682:	464b      	mov	r3, r9
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbc      	itt	lt
 8007688:	232d      	movlt	r3, #45	; 0x2d
 800768a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800768e:	487f      	ldr	r0, [pc, #508]	; (800788c <_printf_float+0x2e8>)
 8007690:	4b7f      	ldr	r3, [pc, #508]	; (8007890 <_printf_float+0x2ec>)
 8007692:	e7d1      	b.n	8007638 <_printf_float+0x94>
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800769a:	9206      	str	r2, [sp, #24]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	d13f      	bne.n	8007720 <_printf_float+0x17c>
 80076a0:	2306      	movs	r3, #6
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	6861      	ldr	r1, [r4, #4]
 80076a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076ac:	2300      	movs	r3, #0
 80076ae:	9303      	str	r3, [sp, #12]
 80076b0:	ab0a      	add	r3, sp, #40	; 0x28
 80076b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076b6:	ab09      	add	r3, sp, #36	; 0x24
 80076b8:	ec49 8b10 	vmov	d0, r8, r9
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076c4:	4628      	mov	r0, r5
 80076c6:	f7ff fecd 	bl	8007464 <__cvt>
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ce:	2b47      	cmp	r3, #71	; 0x47
 80076d0:	4680      	mov	r8, r0
 80076d2:	d108      	bne.n	80076e6 <_printf_float+0x142>
 80076d4:	1cc8      	adds	r0, r1, #3
 80076d6:	db02      	blt.n	80076de <_printf_float+0x13a>
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	4299      	cmp	r1, r3
 80076dc:	dd41      	ble.n	8007762 <_printf_float+0x1be>
 80076de:	f1ab 0b02 	sub.w	fp, fp, #2
 80076e2:	fa5f fb8b 	uxtb.w	fp, fp
 80076e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076ea:	d820      	bhi.n	800772e <_printf_float+0x18a>
 80076ec:	3901      	subs	r1, #1
 80076ee:	465a      	mov	r2, fp
 80076f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076f4:	9109      	str	r1, [sp, #36]	; 0x24
 80076f6:	f7ff ff17 	bl	8007528 <__exponent>
 80076fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fc:	1813      	adds	r3, r2, r0
 80076fe:	2a01      	cmp	r2, #1
 8007700:	4681      	mov	r9, r0
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	dc02      	bgt.n	800770c <_printf_float+0x168>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	07d2      	lsls	r2, r2, #31
 800770a:	d501      	bpl.n	8007710 <_printf_float+0x16c>
 800770c:	3301      	adds	r3, #1
 800770e:	6123      	str	r3, [r4, #16]
 8007710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007714:	2b00      	cmp	r3, #0
 8007716:	d09c      	beq.n	8007652 <_printf_float+0xae>
 8007718:	232d      	movs	r3, #45	; 0x2d
 800771a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771e:	e798      	b.n	8007652 <_printf_float+0xae>
 8007720:	9a06      	ldr	r2, [sp, #24]
 8007722:	2a47      	cmp	r2, #71	; 0x47
 8007724:	d1be      	bne.n	80076a4 <_printf_float+0x100>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1bc      	bne.n	80076a4 <_printf_float+0x100>
 800772a:	2301      	movs	r3, #1
 800772c:	e7b9      	b.n	80076a2 <_printf_float+0xfe>
 800772e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007732:	d118      	bne.n	8007766 <_printf_float+0x1c2>
 8007734:	2900      	cmp	r1, #0
 8007736:	6863      	ldr	r3, [r4, #4]
 8007738:	dd0b      	ble.n	8007752 <_printf_float+0x1ae>
 800773a:	6121      	str	r1, [r4, #16]
 800773c:	b913      	cbnz	r3, 8007744 <_printf_float+0x1a0>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	07d0      	lsls	r0, r2, #31
 8007742:	d502      	bpl.n	800774a <_printf_float+0x1a6>
 8007744:	3301      	adds	r3, #1
 8007746:	440b      	add	r3, r1
 8007748:	6123      	str	r3, [r4, #16]
 800774a:	65a1      	str	r1, [r4, #88]	; 0x58
 800774c:	f04f 0900 	mov.w	r9, #0
 8007750:	e7de      	b.n	8007710 <_printf_float+0x16c>
 8007752:	b913      	cbnz	r3, 800775a <_printf_float+0x1b6>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	07d2      	lsls	r2, r2, #31
 8007758:	d501      	bpl.n	800775e <_printf_float+0x1ba>
 800775a:	3302      	adds	r3, #2
 800775c:	e7f4      	b.n	8007748 <_printf_float+0x1a4>
 800775e:	2301      	movs	r3, #1
 8007760:	e7f2      	b.n	8007748 <_printf_float+0x1a4>
 8007762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007768:	4299      	cmp	r1, r3
 800776a:	db05      	blt.n	8007778 <_printf_float+0x1d4>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	6121      	str	r1, [r4, #16]
 8007770:	07d8      	lsls	r0, r3, #31
 8007772:	d5ea      	bpl.n	800774a <_printf_float+0x1a6>
 8007774:	1c4b      	adds	r3, r1, #1
 8007776:	e7e7      	b.n	8007748 <_printf_float+0x1a4>
 8007778:	2900      	cmp	r1, #0
 800777a:	bfd4      	ite	le
 800777c:	f1c1 0202 	rsble	r2, r1, #2
 8007780:	2201      	movgt	r2, #1
 8007782:	4413      	add	r3, r2
 8007784:	e7e0      	b.n	8007748 <_printf_float+0x1a4>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	055a      	lsls	r2, r3, #21
 800778a:	d407      	bmi.n	800779c <_printf_float+0x1f8>
 800778c:	6923      	ldr	r3, [r4, #16]
 800778e:	4642      	mov	r2, r8
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	d12c      	bne.n	80077f4 <_printf_float+0x250>
 800779a:	e764      	b.n	8007666 <_printf_float+0xc2>
 800779c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077a0:	f240 80e0 	bls.w	8007964 <_printf_float+0x3c0>
 80077a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077a8:	2200      	movs	r2, #0
 80077aa:	2300      	movs	r3, #0
 80077ac:	f7f9 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d034      	beq.n	800781e <_printf_float+0x27a>
 80077b4:	4a37      	ldr	r2, [pc, #220]	; (8007894 <_printf_float+0x2f0>)
 80077b6:	2301      	movs	r3, #1
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af51 	beq.w	8007666 <_printf_float+0xc2>
 80077c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	db02      	blt.n	80077d2 <_printf_float+0x22e>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07d8      	lsls	r0, r3, #31
 80077d0:	d510      	bpl.n	80077f4 <_printf_float+0x250>
 80077d2:	ee18 3a10 	vmov	r3, s16
 80077d6:	4652      	mov	r2, sl
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f af41 	beq.w	8007666 <_printf_float+0xc2>
 80077e4:	f04f 0800 	mov.w	r8, #0
 80077e8:	f104 091a 	add.w	r9, r4, #26
 80077ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ee:	3b01      	subs	r3, #1
 80077f0:	4543      	cmp	r3, r8
 80077f2:	dc09      	bgt.n	8007808 <_printf_float+0x264>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	079b      	lsls	r3, r3, #30
 80077f8:	f100 8105 	bmi.w	8007a06 <_printf_float+0x462>
 80077fc:	68e0      	ldr	r0, [r4, #12]
 80077fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007800:	4298      	cmp	r0, r3
 8007802:	bfb8      	it	lt
 8007804:	4618      	movlt	r0, r3
 8007806:	e730      	b.n	800766a <_printf_float+0xc6>
 8007808:	2301      	movs	r3, #1
 800780a:	464a      	mov	r2, r9
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	f43f af27 	beq.w	8007666 <_printf_float+0xc2>
 8007818:	f108 0801 	add.w	r8, r8, #1
 800781c:	e7e6      	b.n	80077ec <_printf_float+0x248>
 800781e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	dc39      	bgt.n	8007898 <_printf_float+0x2f4>
 8007824:	4a1b      	ldr	r2, [pc, #108]	; (8007894 <_printf_float+0x2f0>)
 8007826:	2301      	movs	r3, #1
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af19 	beq.w	8007666 <_printf_float+0xc2>
 8007834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007838:	4313      	orrs	r3, r2
 800783a:	d102      	bne.n	8007842 <_printf_float+0x29e>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d5d8      	bpl.n	80077f4 <_printf_float+0x250>
 8007842:	ee18 3a10 	vmov	r3, s16
 8007846:	4652      	mov	r2, sl
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af09 	beq.w	8007666 <_printf_float+0xc2>
 8007854:	f04f 0900 	mov.w	r9, #0
 8007858:	f104 0a1a 	add.w	sl, r4, #26
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	425b      	negs	r3, r3
 8007860:	454b      	cmp	r3, r9
 8007862:	dc01      	bgt.n	8007868 <_printf_float+0x2c4>
 8007864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007866:	e792      	b.n	800778e <_printf_float+0x1ea>
 8007868:	2301      	movs	r3, #1
 800786a:	4652      	mov	r2, sl
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f aef7 	beq.w	8007666 <_printf_float+0xc2>
 8007878:	f109 0901 	add.w	r9, r9, #1
 800787c:	e7ee      	b.n	800785c <_printf_float+0x2b8>
 800787e:	bf00      	nop
 8007880:	7fefffff 	.word	0x7fefffff
 8007884:	0800bcec 	.word	0x0800bcec
 8007888:	0800bcf0 	.word	0x0800bcf0
 800788c:	0800bcf8 	.word	0x0800bcf8
 8007890:	0800bcf4 	.word	0x0800bcf4
 8007894:	0800bcfc 	.word	0x0800bcfc
 8007898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800789c:	429a      	cmp	r2, r3
 800789e:	bfa8      	it	ge
 80078a0:	461a      	movge	r2, r3
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	4691      	mov	r9, r2
 80078a6:	dc37      	bgt.n	8007918 <_printf_float+0x374>
 80078a8:	f04f 0b00 	mov.w	fp, #0
 80078ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078b0:	f104 021a 	add.w	r2, r4, #26
 80078b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	eba3 0309 	sub.w	r3, r3, r9
 80078bc:	455b      	cmp	r3, fp
 80078be:	dc33      	bgt.n	8007928 <_printf_float+0x384>
 80078c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078c4:	429a      	cmp	r2, r3
 80078c6:	db3b      	blt.n	8007940 <_printf_float+0x39c>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	07da      	lsls	r2, r3, #31
 80078cc:	d438      	bmi.n	8007940 <_printf_float+0x39c>
 80078ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d0:	9b05      	ldr	r3, [sp, #20]
 80078d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	eba2 0901 	sub.w	r9, r2, r1
 80078da:	4599      	cmp	r9, r3
 80078dc:	bfa8      	it	ge
 80078de:	4699      	movge	r9, r3
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	dc35      	bgt.n	8007952 <_printf_float+0x3ae>
 80078e6:	f04f 0800 	mov.w	r8, #0
 80078ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ee:	f104 0a1a 	add.w	sl, r4, #26
 80078f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	eba3 0309 	sub.w	r3, r3, r9
 80078fc:	4543      	cmp	r3, r8
 80078fe:	f77f af79 	ble.w	80077f4 <_printf_float+0x250>
 8007902:	2301      	movs	r3, #1
 8007904:	4652      	mov	r2, sl
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f aeaa 	beq.w	8007666 <_printf_float+0xc2>
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	e7ec      	b.n	80078f2 <_printf_float+0x34e>
 8007918:	4613      	mov	r3, r2
 800791a:	4631      	mov	r1, r6
 800791c:	4642      	mov	r2, r8
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	d1c0      	bne.n	80078a8 <_printf_float+0x304>
 8007926:	e69e      	b.n	8007666 <_printf_float+0xc2>
 8007928:	2301      	movs	r3, #1
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	9205      	str	r2, [sp, #20]
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f ae97 	beq.w	8007666 <_printf_float+0xc2>
 8007938:	9a05      	ldr	r2, [sp, #20]
 800793a:	f10b 0b01 	add.w	fp, fp, #1
 800793e:	e7b9      	b.n	80078b4 <_printf_float+0x310>
 8007940:	ee18 3a10 	vmov	r3, s16
 8007944:	4652      	mov	r2, sl
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	d1be      	bne.n	80078ce <_printf_float+0x32a>
 8007950:	e689      	b.n	8007666 <_printf_float+0xc2>
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	464b      	mov	r3, r9
 8007956:	4442      	add	r2, r8
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	d1c1      	bne.n	80078e6 <_printf_float+0x342>
 8007962:	e680      	b.n	8007666 <_printf_float+0xc2>
 8007964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007966:	2a01      	cmp	r2, #1
 8007968:	dc01      	bgt.n	800796e <_printf_float+0x3ca>
 800796a:	07db      	lsls	r3, r3, #31
 800796c:	d538      	bpl.n	80079e0 <_printf_float+0x43c>
 800796e:	2301      	movs	r3, #1
 8007970:	4642      	mov	r2, r8
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae74 	beq.w	8007666 <_printf_float+0xc2>
 800797e:	ee18 3a10 	vmov	r3, s16
 8007982:	4652      	mov	r2, sl
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f ae6b 	beq.w	8007666 <_printf_float+0xc2>
 8007990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007994:	2200      	movs	r2, #0
 8007996:	2300      	movs	r3, #0
 8007998:	f7f9 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800799c:	b9d8      	cbnz	r0, 80079d6 <_printf_float+0x432>
 800799e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a0:	f108 0201 	add.w	r2, r8, #1
 80079a4:	3b01      	subs	r3, #1
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d10e      	bne.n	80079ce <_printf_float+0x42a>
 80079b0:	e659      	b.n	8007666 <_printf_float+0xc2>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4652      	mov	r2, sl
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae52 	beq.w	8007666 <_printf_float+0xc2>
 80079c2:	f108 0801 	add.w	r8, r8, #1
 80079c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c8:	3b01      	subs	r3, #1
 80079ca:	4543      	cmp	r3, r8
 80079cc:	dcf1      	bgt.n	80079b2 <_printf_float+0x40e>
 80079ce:	464b      	mov	r3, r9
 80079d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079d4:	e6dc      	b.n	8007790 <_printf_float+0x1ec>
 80079d6:	f04f 0800 	mov.w	r8, #0
 80079da:	f104 0a1a 	add.w	sl, r4, #26
 80079de:	e7f2      	b.n	80079c6 <_printf_float+0x422>
 80079e0:	2301      	movs	r3, #1
 80079e2:	4642      	mov	r2, r8
 80079e4:	e7df      	b.n	80079a6 <_printf_float+0x402>
 80079e6:	2301      	movs	r3, #1
 80079e8:	464a      	mov	r2, r9
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	f43f ae38 	beq.w	8007666 <_printf_float+0xc2>
 80079f6:	f108 0801 	add.w	r8, r8, #1
 80079fa:	68e3      	ldr	r3, [r4, #12]
 80079fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079fe:	1a5b      	subs	r3, r3, r1
 8007a00:	4543      	cmp	r3, r8
 8007a02:	dcf0      	bgt.n	80079e6 <_printf_float+0x442>
 8007a04:	e6fa      	b.n	80077fc <_printf_float+0x258>
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	f104 0919 	add.w	r9, r4, #25
 8007a0e:	e7f4      	b.n	80079fa <_printf_float+0x456>

08007a10 <_printf_common>:
 8007a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a14:	4616      	mov	r6, r2
 8007a16:	4699      	mov	r9, r3
 8007a18:	688a      	ldr	r2, [r1, #8]
 8007a1a:	690b      	ldr	r3, [r1, #16]
 8007a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bfb8      	it	lt
 8007a24:	4613      	movlt	r3, r2
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	b10a      	cbz	r2, 8007a36 <_printf_common+0x26>
 8007a32:	3301      	adds	r3, #1
 8007a34:	6033      	str	r3, [r6, #0]
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	0699      	lsls	r1, r3, #26
 8007a3a:	bf42      	ittt	mi
 8007a3c:	6833      	ldrmi	r3, [r6, #0]
 8007a3e:	3302      	addmi	r3, #2
 8007a40:	6033      	strmi	r3, [r6, #0]
 8007a42:	6825      	ldr	r5, [r4, #0]
 8007a44:	f015 0506 	ands.w	r5, r5, #6
 8007a48:	d106      	bne.n	8007a58 <_printf_common+0x48>
 8007a4a:	f104 0a19 	add.w	sl, r4, #25
 8007a4e:	68e3      	ldr	r3, [r4, #12]
 8007a50:	6832      	ldr	r2, [r6, #0]
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	42ab      	cmp	r3, r5
 8007a56:	dc26      	bgt.n	8007aa6 <_printf_common+0x96>
 8007a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a5c:	1e13      	subs	r3, r2, #0
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	bf18      	it	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	0692      	lsls	r2, r2, #26
 8007a66:	d42b      	bmi.n	8007ac0 <_printf_common+0xb0>
 8007a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c0      	blx	r8
 8007a72:	3001      	adds	r0, #1
 8007a74:	d01e      	beq.n	8007ab4 <_printf_common+0xa4>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	68e5      	ldr	r5, [r4, #12]
 8007a7a:	6832      	ldr	r2, [r6, #0]
 8007a7c:	f003 0306 	and.w	r3, r3, #6
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	bf08      	it	eq
 8007a84:	1aad      	subeq	r5, r5, r2
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	6922      	ldr	r2, [r4, #16]
 8007a8a:	bf0c      	ite	eq
 8007a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a90:	2500      	movne	r5, #0
 8007a92:	4293      	cmp	r3, r2
 8007a94:	bfc4      	itt	gt
 8007a96:	1a9b      	subgt	r3, r3, r2
 8007a98:	18ed      	addgt	r5, r5, r3
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	341a      	adds	r4, #26
 8007a9e:	42b5      	cmp	r5, r6
 8007aa0:	d11a      	bne.n	8007ad8 <_printf_common+0xc8>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e008      	b.n	8007ab8 <_printf_common+0xa8>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4638      	mov	r0, r7
 8007aae:	47c0      	blx	r8
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d103      	bne.n	8007abc <_printf_common+0xac>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	3501      	adds	r5, #1
 8007abe:	e7c6      	b.n	8007a4e <_printf_common+0x3e>
 8007ac0:	18e1      	adds	r1, r4, r3
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	2030      	movs	r0, #48	; 0x30
 8007ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aca:	4422      	add	r2, r4
 8007acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	e7c7      	b.n	8007a68 <_printf_common+0x58>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4622      	mov	r2, r4
 8007adc:	4649      	mov	r1, r9
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d0e6      	beq.n	8007ab4 <_printf_common+0xa4>
 8007ae6:	3601      	adds	r6, #1
 8007ae8:	e7d9      	b.n	8007a9e <_printf_common+0x8e>
	...

08007aec <_printf_i>:
 8007aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	460c      	mov	r4, r1
 8007af2:	4691      	mov	r9, r2
 8007af4:	7e27      	ldrb	r7, [r4, #24]
 8007af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007af8:	2f78      	cmp	r7, #120	; 0x78
 8007afa:	4680      	mov	r8, r0
 8007afc:	469a      	mov	sl, r3
 8007afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b02:	d807      	bhi.n	8007b14 <_printf_i+0x28>
 8007b04:	2f62      	cmp	r7, #98	; 0x62
 8007b06:	d80a      	bhi.n	8007b1e <_printf_i+0x32>
 8007b08:	2f00      	cmp	r7, #0
 8007b0a:	f000 80d8 	beq.w	8007cbe <_printf_i+0x1d2>
 8007b0e:	2f58      	cmp	r7, #88	; 0x58
 8007b10:	f000 80a3 	beq.w	8007c5a <_printf_i+0x16e>
 8007b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b1c:	e03a      	b.n	8007b94 <_printf_i+0xa8>
 8007b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b22:	2b15      	cmp	r3, #21
 8007b24:	d8f6      	bhi.n	8007b14 <_printf_i+0x28>
 8007b26:	a001      	add	r0, pc, #4	; (adr r0, 8007b2c <_printf_i+0x40>)
 8007b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007b15 	.word	0x08007b15
 8007b38:	08007b15 	.word	0x08007b15
 8007b3c:	08007b15 	.word	0x08007b15
 8007b40:	08007b15 	.word	0x08007b15
 8007b44:	08007b99 	.word	0x08007b99
 8007b48:	08007b15 	.word	0x08007b15
 8007b4c:	08007b15 	.word	0x08007b15
 8007b50:	08007b15 	.word	0x08007b15
 8007b54:	08007b15 	.word	0x08007b15
 8007b58:	08007ca5 	.word	0x08007ca5
 8007b5c:	08007bc9 	.word	0x08007bc9
 8007b60:	08007c87 	.word	0x08007c87
 8007b64:	08007b15 	.word	0x08007b15
 8007b68:	08007b15 	.word	0x08007b15
 8007b6c:	08007cc7 	.word	0x08007cc7
 8007b70:	08007b15 	.word	0x08007b15
 8007b74:	08007bc9 	.word	0x08007bc9
 8007b78:	08007b15 	.word	0x08007b15
 8007b7c:	08007b15 	.word	0x08007b15
 8007b80:	08007c8f 	.word	0x08007c8f
 8007b84:	680b      	ldr	r3, [r1, #0]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	600a      	str	r2, [r1, #0]
 8007b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0a3      	b.n	8007ce0 <_printf_i+0x1f4>
 8007b98:	6825      	ldr	r5, [r4, #0]
 8007b9a:	6808      	ldr	r0, [r1, #0]
 8007b9c:	062e      	lsls	r6, r5, #24
 8007b9e:	f100 0304 	add.w	r3, r0, #4
 8007ba2:	d50a      	bpl.n	8007bba <_printf_i+0xce>
 8007ba4:	6805      	ldr	r5, [r0, #0]
 8007ba6:	600b      	str	r3, [r1, #0]
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	da03      	bge.n	8007bb4 <_printf_i+0xc8>
 8007bac:	232d      	movs	r3, #45	; 0x2d
 8007bae:	426d      	negs	r5, r5
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb4:	485e      	ldr	r0, [pc, #376]	; (8007d30 <_printf_i+0x244>)
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	e019      	b.n	8007bee <_printf_i+0x102>
 8007bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bbe:	6805      	ldr	r5, [r0, #0]
 8007bc0:	600b      	str	r3, [r1, #0]
 8007bc2:	bf18      	it	ne
 8007bc4:	b22d      	sxthne	r5, r5
 8007bc6:	e7ef      	b.n	8007ba8 <_printf_i+0xbc>
 8007bc8:	680b      	ldr	r3, [r1, #0]
 8007bca:	6825      	ldr	r5, [r4, #0]
 8007bcc:	1d18      	adds	r0, r3, #4
 8007bce:	6008      	str	r0, [r1, #0]
 8007bd0:	0628      	lsls	r0, r5, #24
 8007bd2:	d501      	bpl.n	8007bd8 <_printf_i+0xec>
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	e002      	b.n	8007bde <_printf_i+0xf2>
 8007bd8:	0669      	lsls	r1, r5, #25
 8007bda:	d5fb      	bpl.n	8007bd4 <_printf_i+0xe8>
 8007bdc:	881d      	ldrh	r5, [r3, #0]
 8007bde:	4854      	ldr	r0, [pc, #336]	; (8007d30 <_printf_i+0x244>)
 8007be0:	2f6f      	cmp	r7, #111	; 0x6f
 8007be2:	bf0c      	ite	eq
 8007be4:	2308      	moveq	r3, #8
 8007be6:	230a      	movne	r3, #10
 8007be8:	2100      	movs	r1, #0
 8007bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bee:	6866      	ldr	r6, [r4, #4]
 8007bf0:	60a6      	str	r6, [r4, #8]
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	bfa2      	ittt	ge
 8007bf6:	6821      	ldrge	r1, [r4, #0]
 8007bf8:	f021 0104 	bicge.w	r1, r1, #4
 8007bfc:	6021      	strge	r1, [r4, #0]
 8007bfe:	b90d      	cbnz	r5, 8007c04 <_printf_i+0x118>
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	d04d      	beq.n	8007ca0 <_printf_i+0x1b4>
 8007c04:	4616      	mov	r6, r2
 8007c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c0e:	5dc7      	ldrb	r7, [r0, r7]
 8007c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c14:	462f      	mov	r7, r5
 8007c16:	42bb      	cmp	r3, r7
 8007c18:	460d      	mov	r5, r1
 8007c1a:	d9f4      	bls.n	8007c06 <_printf_i+0x11a>
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d10b      	bne.n	8007c38 <_printf_i+0x14c>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	07df      	lsls	r7, r3, #31
 8007c24:	d508      	bpl.n	8007c38 <_printf_i+0x14c>
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	6861      	ldr	r1, [r4, #4]
 8007c2a:	4299      	cmp	r1, r3
 8007c2c:	bfde      	ittt	le
 8007c2e:	2330      	movle	r3, #48	; 0x30
 8007c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c38:	1b92      	subs	r2, r2, r6
 8007c3a:	6122      	str	r2, [r4, #16]
 8007c3c:	f8cd a000 	str.w	sl, [sp]
 8007c40:	464b      	mov	r3, r9
 8007c42:	aa03      	add	r2, sp, #12
 8007c44:	4621      	mov	r1, r4
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fee2 	bl	8007a10 <_printf_common>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d14c      	bne.n	8007cea <_printf_i+0x1fe>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	b004      	add	sp, #16
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	4835      	ldr	r0, [pc, #212]	; (8007d30 <_printf_i+0x244>)
 8007c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	680e      	ldr	r6, [r1, #0]
 8007c64:	061f      	lsls	r7, r3, #24
 8007c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c6a:	600e      	str	r6, [r1, #0]
 8007c6c:	d514      	bpl.n	8007c98 <_printf_i+0x1ac>
 8007c6e:	07d9      	lsls	r1, r3, #31
 8007c70:	bf44      	itt	mi
 8007c72:	f043 0320 	orrmi.w	r3, r3, #32
 8007c76:	6023      	strmi	r3, [r4, #0]
 8007c78:	b91d      	cbnz	r5, 8007c82 <_printf_i+0x196>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f023 0320 	bic.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	2310      	movs	r3, #16
 8007c84:	e7b0      	b.n	8007be8 <_printf_i+0xfc>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f043 0320 	orr.w	r3, r3, #32
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	2378      	movs	r3, #120	; 0x78
 8007c90:	4828      	ldr	r0, [pc, #160]	; (8007d34 <_printf_i+0x248>)
 8007c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c96:	e7e3      	b.n	8007c60 <_printf_i+0x174>
 8007c98:	065e      	lsls	r6, r3, #25
 8007c9a:	bf48      	it	mi
 8007c9c:	b2ad      	uxthmi	r5, r5
 8007c9e:	e7e6      	b.n	8007c6e <_printf_i+0x182>
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	e7bb      	b.n	8007c1c <_printf_i+0x130>
 8007ca4:	680b      	ldr	r3, [r1, #0]
 8007ca6:	6826      	ldr	r6, [r4, #0]
 8007ca8:	6960      	ldr	r0, [r4, #20]
 8007caa:	1d1d      	adds	r5, r3, #4
 8007cac:	600d      	str	r5, [r1, #0]
 8007cae:	0635      	lsls	r5, r6, #24
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_i+0x1cc>
 8007cb4:	6018      	str	r0, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <_printf_i+0x1d2>
 8007cb8:	0671      	lsls	r1, r6, #25
 8007cba:	d5fb      	bpl.n	8007cb4 <_printf_i+0x1c8>
 8007cbc:	8018      	strh	r0, [r3, #0]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	4616      	mov	r6, r2
 8007cc4:	e7ba      	b.n	8007c3c <_printf_i+0x150>
 8007cc6:	680b      	ldr	r3, [r1, #0]
 8007cc8:	1d1a      	adds	r2, r3, #4
 8007cca:	600a      	str	r2, [r1, #0]
 8007ccc:	681e      	ldr	r6, [r3, #0]
 8007cce:	6862      	ldr	r2, [r4, #4]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7f8 fa94 	bl	8000200 <memchr>
 8007cd8:	b108      	cbz	r0, 8007cde <_printf_i+0x1f2>
 8007cda:	1b80      	subs	r0, r0, r6
 8007cdc:	6060      	str	r0, [r4, #4]
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce8:	e7a8      	b.n	8007c3c <_printf_i+0x150>
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	4632      	mov	r2, r6
 8007cee:	4649      	mov	r1, r9
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	47d0      	blx	sl
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d0ab      	beq.n	8007c50 <_printf_i+0x164>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	079b      	lsls	r3, r3, #30
 8007cfc:	d413      	bmi.n	8007d26 <_printf_i+0x23a>
 8007cfe:	68e0      	ldr	r0, [r4, #12]
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	4298      	cmp	r0, r3
 8007d04:	bfb8      	it	lt
 8007d06:	4618      	movlt	r0, r3
 8007d08:	e7a4      	b.n	8007c54 <_printf_i+0x168>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	47d0      	blx	sl
 8007d14:	3001      	adds	r0, #1
 8007d16:	d09b      	beq.n	8007c50 <_printf_i+0x164>
 8007d18:	3501      	adds	r5, #1
 8007d1a:	68e3      	ldr	r3, [r4, #12]
 8007d1c:	9903      	ldr	r1, [sp, #12]
 8007d1e:	1a5b      	subs	r3, r3, r1
 8007d20:	42ab      	cmp	r3, r5
 8007d22:	dcf2      	bgt.n	8007d0a <_printf_i+0x21e>
 8007d24:	e7eb      	b.n	8007cfe <_printf_i+0x212>
 8007d26:	2500      	movs	r5, #0
 8007d28:	f104 0619 	add.w	r6, r4, #25
 8007d2c:	e7f5      	b.n	8007d1a <_printf_i+0x22e>
 8007d2e:	bf00      	nop
 8007d30:	0800bcfe 	.word	0x0800bcfe
 8007d34:	0800bd0f 	.word	0x0800bd0f

08007d38 <_scanf_float>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	b087      	sub	sp, #28
 8007d3e:	4617      	mov	r7, r2
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	688b      	ldr	r3, [r1, #8]
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d4a:	bf83      	ittte	hi
 8007d4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d50:	195b      	addhi	r3, r3, r5
 8007d52:	9302      	strhi	r3, [sp, #8]
 8007d54:	2300      	movls	r3, #0
 8007d56:	bf86      	itte	hi
 8007d58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d5c:	608b      	strhi	r3, [r1, #8]
 8007d5e:	9302      	strls	r3, [sp, #8]
 8007d60:	680b      	ldr	r3, [r1, #0]
 8007d62:	468b      	mov	fp, r1
 8007d64:	2500      	movs	r5, #0
 8007d66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d72:	4680      	mov	r8, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	465e      	mov	r6, fp
 8007d78:	46aa      	mov	sl, r5
 8007d7a:	46a9      	mov	r9, r5
 8007d7c:	9501      	str	r5, [sp, #4]
 8007d7e:	68a2      	ldr	r2, [r4, #8]
 8007d80:	b152      	cbz	r2, 8007d98 <_scanf_float+0x60>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b4e      	cmp	r3, #78	; 0x4e
 8007d88:	d864      	bhi.n	8007e54 <_scanf_float+0x11c>
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d83c      	bhi.n	8007e08 <_scanf_float+0xd0>
 8007d8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d92:	b2c8      	uxtb	r0, r1
 8007d94:	280e      	cmp	r0, #14
 8007d96:	d93a      	bls.n	8007e0e <_scanf_float+0xd6>
 8007d98:	f1b9 0f00 	cmp.w	r9, #0
 8007d9c:	d003      	beq.n	8007da6 <_scanf_float+0x6e>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007daa:	f1ba 0f01 	cmp.w	sl, #1
 8007dae:	f200 8113 	bhi.w	8007fd8 <_scanf_float+0x2a0>
 8007db2:	455e      	cmp	r6, fp
 8007db4:	f200 8105 	bhi.w	8007fc2 <_scanf_float+0x28a>
 8007db8:	2501      	movs	r5, #1
 8007dba:	4628      	mov	r0, r5
 8007dbc:	b007      	add	sp, #28
 8007dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007dc6:	2a0d      	cmp	r2, #13
 8007dc8:	d8e6      	bhi.n	8007d98 <_scanf_float+0x60>
 8007dca:	a101      	add	r1, pc, #4	; (adr r1, 8007dd0 <_scanf_float+0x98>)
 8007dcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dd0:	08007f0f 	.word	0x08007f0f
 8007dd4:	08007d99 	.word	0x08007d99
 8007dd8:	08007d99 	.word	0x08007d99
 8007ddc:	08007d99 	.word	0x08007d99
 8007de0:	08007f6f 	.word	0x08007f6f
 8007de4:	08007f47 	.word	0x08007f47
 8007de8:	08007d99 	.word	0x08007d99
 8007dec:	08007d99 	.word	0x08007d99
 8007df0:	08007f1d 	.word	0x08007f1d
 8007df4:	08007d99 	.word	0x08007d99
 8007df8:	08007d99 	.word	0x08007d99
 8007dfc:	08007d99 	.word	0x08007d99
 8007e00:	08007d99 	.word	0x08007d99
 8007e04:	08007ed5 	.word	0x08007ed5
 8007e08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e0c:	e7db      	b.n	8007dc6 <_scanf_float+0x8e>
 8007e0e:	290e      	cmp	r1, #14
 8007e10:	d8c2      	bhi.n	8007d98 <_scanf_float+0x60>
 8007e12:	a001      	add	r0, pc, #4	; (adr r0, 8007e18 <_scanf_float+0xe0>)
 8007e14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e18:	08007ec7 	.word	0x08007ec7
 8007e1c:	08007d99 	.word	0x08007d99
 8007e20:	08007ec7 	.word	0x08007ec7
 8007e24:	08007f5b 	.word	0x08007f5b
 8007e28:	08007d99 	.word	0x08007d99
 8007e2c:	08007e75 	.word	0x08007e75
 8007e30:	08007eb1 	.word	0x08007eb1
 8007e34:	08007eb1 	.word	0x08007eb1
 8007e38:	08007eb1 	.word	0x08007eb1
 8007e3c:	08007eb1 	.word	0x08007eb1
 8007e40:	08007eb1 	.word	0x08007eb1
 8007e44:	08007eb1 	.word	0x08007eb1
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007eb1 	.word	0x08007eb1
 8007e50:	08007eb1 	.word	0x08007eb1
 8007e54:	2b6e      	cmp	r3, #110	; 0x6e
 8007e56:	d809      	bhi.n	8007e6c <_scanf_float+0x134>
 8007e58:	2b60      	cmp	r3, #96	; 0x60
 8007e5a:	d8b2      	bhi.n	8007dc2 <_scanf_float+0x8a>
 8007e5c:	2b54      	cmp	r3, #84	; 0x54
 8007e5e:	d077      	beq.n	8007f50 <_scanf_float+0x218>
 8007e60:	2b59      	cmp	r3, #89	; 0x59
 8007e62:	d199      	bne.n	8007d98 <_scanf_float+0x60>
 8007e64:	2d07      	cmp	r5, #7
 8007e66:	d197      	bne.n	8007d98 <_scanf_float+0x60>
 8007e68:	2508      	movs	r5, #8
 8007e6a:	e029      	b.n	8007ec0 <_scanf_float+0x188>
 8007e6c:	2b74      	cmp	r3, #116	; 0x74
 8007e6e:	d06f      	beq.n	8007f50 <_scanf_float+0x218>
 8007e70:	2b79      	cmp	r3, #121	; 0x79
 8007e72:	e7f6      	b.n	8007e62 <_scanf_float+0x12a>
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	05c8      	lsls	r0, r1, #23
 8007e78:	d51a      	bpl.n	8007eb0 <_scanf_float+0x178>
 8007e7a:	9b02      	ldr	r3, [sp, #8]
 8007e7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e80:	6021      	str	r1, [r4, #0]
 8007e82:	f109 0901 	add.w	r9, r9, #1
 8007e86:	b11b      	cbz	r3, 8007e90 <_scanf_float+0x158>
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	3201      	adds	r2, #1
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	60a2      	str	r2, [r4, #8]
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	f340 8084 	ble.w	8007fb0 <_scanf_float+0x278>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	e766      	b.n	8007d7e <_scanf_float+0x46>
 8007eb0:	eb1a 0f05 	cmn.w	sl, r5
 8007eb4:	f47f af70 	bne.w	8007d98 <_scanf_float+0x60>
 8007eb8:	6822      	ldr	r2, [r4, #0]
 8007eba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	f806 3b01 	strb.w	r3, [r6], #1
 8007ec4:	e7e4      	b.n	8007e90 <_scanf_float+0x158>
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	0610      	lsls	r0, r2, #24
 8007eca:	f57f af65 	bpl.w	8007d98 <_scanf_float+0x60>
 8007ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ed2:	e7f4      	b.n	8007ebe <_scanf_float+0x186>
 8007ed4:	f1ba 0f00 	cmp.w	sl, #0
 8007ed8:	d10e      	bne.n	8007ef8 <_scanf_float+0x1c0>
 8007eda:	f1b9 0f00 	cmp.w	r9, #0
 8007ede:	d10e      	bne.n	8007efe <_scanf_float+0x1c6>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ee6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007eea:	d108      	bne.n	8007efe <_scanf_float+0x1c6>
 8007eec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ef0:	6022      	str	r2, [r4, #0]
 8007ef2:	f04f 0a01 	mov.w	sl, #1
 8007ef6:	e7e3      	b.n	8007ec0 <_scanf_float+0x188>
 8007ef8:	f1ba 0f02 	cmp.w	sl, #2
 8007efc:	d055      	beq.n	8007faa <_scanf_float+0x272>
 8007efe:	2d01      	cmp	r5, #1
 8007f00:	d002      	beq.n	8007f08 <_scanf_float+0x1d0>
 8007f02:	2d04      	cmp	r5, #4
 8007f04:	f47f af48 	bne.w	8007d98 <_scanf_float+0x60>
 8007f08:	3501      	adds	r5, #1
 8007f0a:	b2ed      	uxtb	r5, r5
 8007f0c:	e7d8      	b.n	8007ec0 <_scanf_float+0x188>
 8007f0e:	f1ba 0f01 	cmp.w	sl, #1
 8007f12:	f47f af41 	bne.w	8007d98 <_scanf_float+0x60>
 8007f16:	f04f 0a02 	mov.w	sl, #2
 8007f1a:	e7d1      	b.n	8007ec0 <_scanf_float+0x188>
 8007f1c:	b97d      	cbnz	r5, 8007f3e <_scanf_float+0x206>
 8007f1e:	f1b9 0f00 	cmp.w	r9, #0
 8007f22:	f47f af3c 	bne.w	8007d9e <_scanf_float+0x66>
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f30:	f47f af39 	bne.w	8007da6 <_scanf_float+0x6e>
 8007f34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	2501      	movs	r5, #1
 8007f3c:	e7c0      	b.n	8007ec0 <_scanf_float+0x188>
 8007f3e:	2d03      	cmp	r5, #3
 8007f40:	d0e2      	beq.n	8007f08 <_scanf_float+0x1d0>
 8007f42:	2d05      	cmp	r5, #5
 8007f44:	e7de      	b.n	8007f04 <_scanf_float+0x1cc>
 8007f46:	2d02      	cmp	r5, #2
 8007f48:	f47f af26 	bne.w	8007d98 <_scanf_float+0x60>
 8007f4c:	2503      	movs	r5, #3
 8007f4e:	e7b7      	b.n	8007ec0 <_scanf_float+0x188>
 8007f50:	2d06      	cmp	r5, #6
 8007f52:	f47f af21 	bne.w	8007d98 <_scanf_float+0x60>
 8007f56:	2507      	movs	r5, #7
 8007f58:	e7b2      	b.n	8007ec0 <_scanf_float+0x188>
 8007f5a:	6822      	ldr	r2, [r4, #0]
 8007f5c:	0591      	lsls	r1, r2, #22
 8007f5e:	f57f af1b 	bpl.w	8007d98 <_scanf_float+0x60>
 8007f62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f6c:	e7a8      	b.n	8007ec0 <_scanf_float+0x188>
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f78:	d006      	beq.n	8007f88 <_scanf_float+0x250>
 8007f7a:	0550      	lsls	r0, r2, #21
 8007f7c:	f57f af0c 	bpl.w	8007d98 <_scanf_float+0x60>
 8007f80:	f1b9 0f00 	cmp.w	r9, #0
 8007f84:	f43f af0f 	beq.w	8007da6 <_scanf_float+0x6e>
 8007f88:	0591      	lsls	r1, r2, #22
 8007f8a:	bf58      	it	pl
 8007f8c:	9901      	ldrpl	r1, [sp, #4]
 8007f8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f92:	bf58      	it	pl
 8007f94:	eba9 0101 	subpl.w	r1, r9, r1
 8007f98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f9c:	bf58      	it	pl
 8007f9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fa2:	6022      	str	r2, [r4, #0]
 8007fa4:	f04f 0900 	mov.w	r9, #0
 8007fa8:	e78a      	b.n	8007ec0 <_scanf_float+0x188>
 8007faa:	f04f 0a03 	mov.w	sl, #3
 8007fae:	e787      	b.n	8007ec0 <_scanf_float+0x188>
 8007fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4798      	blx	r3
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f43f aedf 	beq.w	8007d7e <_scanf_float+0x46>
 8007fc0:	e6ea      	b.n	8007d98 <_scanf_float+0x60>
 8007fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4798      	blx	r3
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	e6ec      	b.n	8007db2 <_scanf_float+0x7a>
 8007fd8:	1e6b      	subs	r3, r5, #1
 8007fda:	2b06      	cmp	r3, #6
 8007fdc:	d825      	bhi.n	800802a <_scanf_float+0x2f2>
 8007fde:	2d02      	cmp	r5, #2
 8007fe0:	d836      	bhi.n	8008050 <_scanf_float+0x318>
 8007fe2:	455e      	cmp	r6, fp
 8007fe4:	f67f aee8 	bls.w	8007db8 <_scanf_float+0x80>
 8007fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ff0:	463a      	mov	r2, r7
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4798      	blx	r3
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	e7f1      	b.n	8007fe2 <_scanf_float+0x2aa>
 8007ffe:	9802      	ldr	r0, [sp, #8]
 8008000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008004:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008008:	9002      	str	r0, [sp, #8]
 800800a:	463a      	mov	r2, r7
 800800c:	4640      	mov	r0, r8
 800800e:	4798      	blx	r3
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	3b01      	subs	r3, #1
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801a:	fa5f fa8a 	uxtb.w	sl, sl
 800801e:	f1ba 0f02 	cmp.w	sl, #2
 8008022:	d1ec      	bne.n	8007ffe <_scanf_float+0x2c6>
 8008024:	3d03      	subs	r5, #3
 8008026:	b2ed      	uxtb	r5, r5
 8008028:	1b76      	subs	r6, r6, r5
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	05da      	lsls	r2, r3, #23
 800802e:	d52f      	bpl.n	8008090 <_scanf_float+0x358>
 8008030:	055b      	lsls	r3, r3, #21
 8008032:	d510      	bpl.n	8008056 <_scanf_float+0x31e>
 8008034:	455e      	cmp	r6, fp
 8008036:	f67f aebf 	bls.w	8007db8 <_scanf_float+0x80>
 800803a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800803e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008042:	463a      	mov	r2, r7
 8008044:	4640      	mov	r0, r8
 8008046:	4798      	blx	r3
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	3b01      	subs	r3, #1
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	e7f1      	b.n	8008034 <_scanf_float+0x2fc>
 8008050:	46aa      	mov	sl, r5
 8008052:	9602      	str	r6, [sp, #8]
 8008054:	e7df      	b.n	8008016 <_scanf_float+0x2de>
 8008056:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	2965      	cmp	r1, #101	; 0x65
 800805e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008062:	f106 35ff 	add.w	r5, r6, #4294967295
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	d00c      	beq.n	8008084 <_scanf_float+0x34c>
 800806a:	2945      	cmp	r1, #69	; 0x45
 800806c:	d00a      	beq.n	8008084 <_scanf_float+0x34c>
 800806e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008072:	463a      	mov	r2, r7
 8008074:	4640      	mov	r0, r8
 8008076:	4798      	blx	r3
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800807e:	3b01      	subs	r3, #1
 8008080:	1eb5      	subs	r5, r6, #2
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008088:	463a      	mov	r2, r7
 800808a:	4640      	mov	r0, r8
 800808c:	4798      	blx	r3
 800808e:	462e      	mov	r6, r5
 8008090:	6825      	ldr	r5, [r4, #0]
 8008092:	f015 0510 	ands.w	r5, r5, #16
 8008096:	d158      	bne.n	800814a <_scanf_float+0x412>
 8008098:	7035      	strb	r5, [r6, #0]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a4:	d11c      	bne.n	80080e0 <_scanf_float+0x3a8>
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	454b      	cmp	r3, r9
 80080aa:	eba3 0209 	sub.w	r2, r3, r9
 80080ae:	d124      	bne.n	80080fa <_scanf_float+0x3c2>
 80080b0:	2200      	movs	r2, #0
 80080b2:	4659      	mov	r1, fp
 80080b4:	4640      	mov	r0, r8
 80080b6:	f000 fe9d 	bl	8008df4 <_strtod_r>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	6821      	ldr	r1, [r4, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f011 0f02 	tst.w	r1, #2
 80080c4:	ec57 6b10 	vmov	r6, r7, d0
 80080c8:	f103 0204 	add.w	r2, r3, #4
 80080cc:	d020      	beq.n	8008110 <_scanf_float+0x3d8>
 80080ce:	9903      	ldr	r1, [sp, #12]
 80080d0:	600a      	str	r2, [r1, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	e9c3 6700 	strd	r6, r7, [r3]
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60e3      	str	r3, [r4, #12]
 80080de:	e66c      	b.n	8007dba <_scanf_float+0x82>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0e4      	beq.n	80080b0 <_scanf_float+0x378>
 80080e6:	9905      	ldr	r1, [sp, #20]
 80080e8:	230a      	movs	r3, #10
 80080ea:	462a      	mov	r2, r5
 80080ec:	3101      	adds	r1, #1
 80080ee:	4640      	mov	r0, r8
 80080f0:	f000 ff0a 	bl	8008f08 <_strtol_r>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	9e05      	ldr	r6, [sp, #20]
 80080f8:	1ac2      	subs	r2, r0, r3
 80080fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80080fe:	429e      	cmp	r6, r3
 8008100:	bf28      	it	cs
 8008102:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008106:	4912      	ldr	r1, [pc, #72]	; (8008150 <_scanf_float+0x418>)
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f82b 	bl	8008164 <siprintf>
 800810e:	e7cf      	b.n	80080b0 <_scanf_float+0x378>
 8008110:	f011 0f04 	tst.w	r1, #4
 8008114:	9903      	ldr	r1, [sp, #12]
 8008116:	600a      	str	r2, [r1, #0]
 8008118:	d1db      	bne.n	80080d2 <_scanf_float+0x39a>
 800811a:	f8d3 8000 	ldr.w	r8, [r3]
 800811e:	ee10 2a10 	vmov	r2, s0
 8008122:	ee10 0a10 	vmov	r0, s0
 8008126:	463b      	mov	r3, r7
 8008128:	4639      	mov	r1, r7
 800812a:	f7f8 fd0f 	bl	8000b4c <__aeabi_dcmpun>
 800812e:	b128      	cbz	r0, 800813c <_scanf_float+0x404>
 8008130:	4808      	ldr	r0, [pc, #32]	; (8008154 <_scanf_float+0x41c>)
 8008132:	f000 f811 	bl	8008158 <nanf>
 8008136:	ed88 0a00 	vstr	s0, [r8]
 800813a:	e7cd      	b.n	80080d8 <_scanf_float+0x3a0>
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 fd62 	bl	8000c08 <__aeabi_d2f>
 8008144:	f8c8 0000 	str.w	r0, [r8]
 8008148:	e7c6      	b.n	80080d8 <_scanf_float+0x3a0>
 800814a:	2500      	movs	r5, #0
 800814c:	e635      	b.n	8007dba <_scanf_float+0x82>
 800814e:	bf00      	nop
 8008150:	0800bd20 	.word	0x0800bd20
 8008154:	0800c198 	.word	0x0800c198

08008158 <nanf>:
 8008158:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008160 <nanf+0x8>
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	7fc00000 	.word	0x7fc00000

08008164 <siprintf>:
 8008164:	b40e      	push	{r1, r2, r3}
 8008166:	b500      	push	{lr}
 8008168:	b09c      	sub	sp, #112	; 0x70
 800816a:	ab1d      	add	r3, sp, #116	; 0x74
 800816c:	9002      	str	r0, [sp, #8]
 800816e:	9006      	str	r0, [sp, #24]
 8008170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008174:	4809      	ldr	r0, [pc, #36]	; (800819c <siprintf+0x38>)
 8008176:	9107      	str	r1, [sp, #28]
 8008178:	9104      	str	r1, [sp, #16]
 800817a:	4909      	ldr	r1, [pc, #36]	; (80081a0 <siprintf+0x3c>)
 800817c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	6800      	ldr	r0, [r0, #0]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	a902      	add	r1, sp, #8
 8008188:	f002 ff9e 	bl	800b0c8 <_svfiprintf_r>
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	b01c      	add	sp, #112	; 0x70
 8008194:	f85d eb04 	ldr.w	lr, [sp], #4
 8008198:	b003      	add	sp, #12
 800819a:	4770      	bx	lr
 800819c:	20000018 	.word	0x20000018
 80081a0:	ffff0208 	.word	0xffff0208

080081a4 <sulp>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	ec45 4b10 	vmov	d0, r4, r5
 80081ae:	4616      	mov	r6, r2
 80081b0:	f002 fd26 	bl	800ac00 <__ulp>
 80081b4:	ec51 0b10 	vmov	r0, r1, d0
 80081b8:	b17e      	cbz	r6, 80081da <sulp+0x36>
 80081ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dd09      	ble.n	80081da <sulp+0x36>
 80081c6:	051b      	lsls	r3, r3, #20
 80081c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80081cc:	2400      	movs	r4, #0
 80081ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80081d2:	4622      	mov	r2, r4
 80081d4:	462b      	mov	r3, r5
 80081d6:	f7f8 fa1f 	bl	8000618 <__aeabi_dmul>
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	0000      	movs	r0, r0
	...

080081e0 <_strtod_l>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	b0a3      	sub	sp, #140	; 0x8c
 80081e6:	461f      	mov	r7, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	931e      	str	r3, [sp, #120]	; 0x78
 80081ec:	4ba4      	ldr	r3, [pc, #656]	; (8008480 <_strtod_l+0x2a0>)
 80081ee:	9219      	str	r2, [sp, #100]	; 0x64
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	4604      	mov	r4, r0
 80081f6:	4618      	mov	r0, r3
 80081f8:	4688      	mov	r8, r1
 80081fa:	f7f7 fff9 	bl	80001f0 <strlen>
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	4605      	mov	r5, r0
 8008204:	f04f 0b00 	mov.w	fp, #0
 8008208:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800820c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	2a2b      	cmp	r2, #43	; 0x2b
 8008212:	d04c      	beq.n	80082ae <_strtod_l+0xce>
 8008214:	d839      	bhi.n	800828a <_strtod_l+0xaa>
 8008216:	2a0d      	cmp	r2, #13
 8008218:	d832      	bhi.n	8008280 <_strtod_l+0xa0>
 800821a:	2a08      	cmp	r2, #8
 800821c:	d832      	bhi.n	8008284 <_strtod_l+0xa4>
 800821e:	2a00      	cmp	r2, #0
 8008220:	d03c      	beq.n	800829c <_strtod_l+0xbc>
 8008222:	2300      	movs	r3, #0
 8008224:	930e      	str	r3, [sp, #56]	; 0x38
 8008226:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008228:	7833      	ldrb	r3, [r6, #0]
 800822a:	2b30      	cmp	r3, #48	; 0x30
 800822c:	f040 80b4 	bne.w	8008398 <_strtod_l+0x1b8>
 8008230:	7873      	ldrb	r3, [r6, #1]
 8008232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008236:	2b58      	cmp	r3, #88	; 0x58
 8008238:	d16c      	bne.n	8008314 <_strtod_l+0x134>
 800823a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	ab1e      	add	r3, sp, #120	; 0x78
 8008240:	9702      	str	r7, [sp, #8]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	4a8f      	ldr	r2, [pc, #572]	; (8008484 <_strtod_l+0x2a4>)
 8008246:	ab1f      	add	r3, sp, #124	; 0x7c
 8008248:	a91d      	add	r1, sp, #116	; 0x74
 800824a:	4620      	mov	r0, r4
 800824c:	f001 fe34 	bl	8009eb8 <__gethex>
 8008250:	f010 0707 	ands.w	r7, r0, #7
 8008254:	4605      	mov	r5, r0
 8008256:	d005      	beq.n	8008264 <_strtod_l+0x84>
 8008258:	2f06      	cmp	r7, #6
 800825a:	d12a      	bne.n	80082b2 <_strtod_l+0xd2>
 800825c:	3601      	adds	r6, #1
 800825e:	2300      	movs	r3, #0
 8008260:	961d      	str	r6, [sp, #116]	; 0x74
 8008262:	930e      	str	r3, [sp, #56]	; 0x38
 8008264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 8596 	bne.w	8008d98 <_strtod_l+0xbb8>
 800826c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800826e:	b1db      	cbz	r3, 80082a8 <_strtod_l+0xc8>
 8008270:	4652      	mov	r2, sl
 8008272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008276:	ec43 2b10 	vmov	d0, r2, r3
 800827a:	b023      	add	sp, #140	; 0x8c
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	2a20      	cmp	r2, #32
 8008282:	d1ce      	bne.n	8008222 <_strtod_l+0x42>
 8008284:	3301      	adds	r3, #1
 8008286:	931d      	str	r3, [sp, #116]	; 0x74
 8008288:	e7c0      	b.n	800820c <_strtod_l+0x2c>
 800828a:	2a2d      	cmp	r2, #45	; 0x2d
 800828c:	d1c9      	bne.n	8008222 <_strtod_l+0x42>
 800828e:	2201      	movs	r2, #1
 8008290:	920e      	str	r2, [sp, #56]	; 0x38
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	921d      	str	r2, [sp, #116]	; 0x74
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1c4      	bne.n	8008226 <_strtod_l+0x46>
 800829c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800829e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f040 8576 	bne.w	8008d94 <_strtod_l+0xbb4>
 80082a8:	4652      	mov	r2, sl
 80082aa:	465b      	mov	r3, fp
 80082ac:	e7e3      	b.n	8008276 <_strtod_l+0x96>
 80082ae:	2200      	movs	r2, #0
 80082b0:	e7ee      	b.n	8008290 <_strtod_l+0xb0>
 80082b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082b4:	b13a      	cbz	r2, 80082c6 <_strtod_l+0xe6>
 80082b6:	2135      	movs	r1, #53	; 0x35
 80082b8:	a820      	add	r0, sp, #128	; 0x80
 80082ba:	f002 fdac 	bl	800ae16 <__copybits>
 80082be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082c0:	4620      	mov	r0, r4
 80082c2:	f002 f971 	bl	800a5a8 <_Bfree>
 80082c6:	3f01      	subs	r7, #1
 80082c8:	2f05      	cmp	r7, #5
 80082ca:	d807      	bhi.n	80082dc <_strtod_l+0xfc>
 80082cc:	e8df f007 	tbb	[pc, r7]
 80082d0:	1d180b0e 	.word	0x1d180b0e
 80082d4:	030e      	.short	0x030e
 80082d6:	f04f 0b00 	mov.w	fp, #0
 80082da:	46da      	mov	sl, fp
 80082dc:	0728      	lsls	r0, r5, #28
 80082de:	d5c1      	bpl.n	8008264 <_strtod_l+0x84>
 80082e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082e4:	e7be      	b.n	8008264 <_strtod_l+0x84>
 80082e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80082ea:	e7f7      	b.n	80082dc <_strtod_l+0xfc>
 80082ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80082f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082fe:	e7ed      	b.n	80082dc <_strtod_l+0xfc>
 8008300:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008488 <_strtod_l+0x2a8>
 8008304:	f04f 0a00 	mov.w	sl, #0
 8008308:	e7e8      	b.n	80082dc <_strtod_l+0xfc>
 800830a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800830e:	f04f 3aff 	mov.w	sl, #4294967295
 8008312:	e7e3      	b.n	80082dc <_strtod_l+0xfc>
 8008314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	921d      	str	r2, [sp, #116]	; 0x74
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d0f9      	beq.n	8008314 <_strtod_l+0x134>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d09f      	beq.n	8008264 <_strtod_l+0x84>
 8008324:	2301      	movs	r3, #1
 8008326:	f04f 0900 	mov.w	r9, #0
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800832e:	930a      	str	r3, [sp, #40]	; 0x28
 8008330:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008334:	464f      	mov	r7, r9
 8008336:	220a      	movs	r2, #10
 8008338:	981d      	ldr	r0, [sp, #116]	; 0x74
 800833a:	7806      	ldrb	r6, [r0, #0]
 800833c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008340:	b2d9      	uxtb	r1, r3
 8008342:	2909      	cmp	r1, #9
 8008344:	d92a      	bls.n	800839c <_strtod_l+0x1bc>
 8008346:	9907      	ldr	r1, [sp, #28]
 8008348:	462a      	mov	r2, r5
 800834a:	f003 f974 	bl	800b636 <strncmp>
 800834e:	b398      	cbz	r0, 80083b8 <_strtod_l+0x1d8>
 8008350:	2000      	movs	r0, #0
 8008352:	4633      	mov	r3, r6
 8008354:	463d      	mov	r5, r7
 8008356:	9007      	str	r0, [sp, #28]
 8008358:	4602      	mov	r2, r0
 800835a:	2b65      	cmp	r3, #101	; 0x65
 800835c:	d001      	beq.n	8008362 <_strtod_l+0x182>
 800835e:	2b45      	cmp	r3, #69	; 0x45
 8008360:	d118      	bne.n	8008394 <_strtod_l+0x1b4>
 8008362:	b91d      	cbnz	r5, 800836c <_strtod_l+0x18c>
 8008364:	9b04      	ldr	r3, [sp, #16]
 8008366:	4303      	orrs	r3, r0
 8008368:	d098      	beq.n	800829c <_strtod_l+0xbc>
 800836a:	2500      	movs	r5, #0
 800836c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008370:	f108 0301 	add.w	r3, r8, #1
 8008374:	931d      	str	r3, [sp, #116]	; 0x74
 8008376:	f898 3001 	ldrb.w	r3, [r8, #1]
 800837a:	2b2b      	cmp	r3, #43	; 0x2b
 800837c:	d075      	beq.n	800846a <_strtod_l+0x28a>
 800837e:	2b2d      	cmp	r3, #45	; 0x2d
 8008380:	d07b      	beq.n	800847a <_strtod_l+0x29a>
 8008382:	f04f 0c00 	mov.w	ip, #0
 8008386:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800838a:	2909      	cmp	r1, #9
 800838c:	f240 8082 	bls.w	8008494 <_strtod_l+0x2b4>
 8008390:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008394:	2600      	movs	r6, #0
 8008396:	e09d      	b.n	80084d4 <_strtod_l+0x2f4>
 8008398:	2300      	movs	r3, #0
 800839a:	e7c4      	b.n	8008326 <_strtod_l+0x146>
 800839c:	2f08      	cmp	r7, #8
 800839e:	bfd8      	it	le
 80083a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80083a2:	f100 0001 	add.w	r0, r0, #1
 80083a6:	bfda      	itte	le
 80083a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80083ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80083ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80083b2:	3701      	adds	r7, #1
 80083b4:	901d      	str	r0, [sp, #116]	; 0x74
 80083b6:	e7bf      	b.n	8008338 <_strtod_l+0x158>
 80083b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083ba:	195a      	adds	r2, r3, r5
 80083bc:	921d      	str	r2, [sp, #116]	; 0x74
 80083be:	5d5b      	ldrb	r3, [r3, r5]
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	d037      	beq.n	8008434 <_strtod_l+0x254>
 80083c4:	9007      	str	r0, [sp, #28]
 80083c6:	463d      	mov	r5, r7
 80083c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80083cc:	2a09      	cmp	r2, #9
 80083ce:	d912      	bls.n	80083f6 <_strtod_l+0x216>
 80083d0:	2201      	movs	r2, #1
 80083d2:	e7c2      	b.n	800835a <_strtod_l+0x17a>
 80083d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	921d      	str	r2, [sp, #116]	; 0x74
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	3001      	adds	r0, #1
 80083de:	2b30      	cmp	r3, #48	; 0x30
 80083e0:	d0f8      	beq.n	80083d4 <_strtod_l+0x1f4>
 80083e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80083e6:	2a08      	cmp	r2, #8
 80083e8:	f200 84db 	bhi.w	8008da2 <_strtod_l+0xbc2>
 80083ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80083ee:	9007      	str	r0, [sp, #28]
 80083f0:	2000      	movs	r0, #0
 80083f2:	920a      	str	r2, [sp, #40]	; 0x28
 80083f4:	4605      	mov	r5, r0
 80083f6:	3b30      	subs	r3, #48	; 0x30
 80083f8:	f100 0201 	add.w	r2, r0, #1
 80083fc:	d014      	beq.n	8008428 <_strtod_l+0x248>
 80083fe:	9907      	ldr	r1, [sp, #28]
 8008400:	4411      	add	r1, r2
 8008402:	9107      	str	r1, [sp, #28]
 8008404:	462a      	mov	r2, r5
 8008406:	eb00 0e05 	add.w	lr, r0, r5
 800840a:	210a      	movs	r1, #10
 800840c:	4572      	cmp	r2, lr
 800840e:	d113      	bne.n	8008438 <_strtod_l+0x258>
 8008410:	182a      	adds	r2, r5, r0
 8008412:	2a08      	cmp	r2, #8
 8008414:	f105 0501 	add.w	r5, r5, #1
 8008418:	4405      	add	r5, r0
 800841a:	dc1c      	bgt.n	8008456 <_strtod_l+0x276>
 800841c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800841e:	220a      	movs	r2, #10
 8008420:	fb02 3301 	mla	r3, r2, r1, r3
 8008424:	9309      	str	r3, [sp, #36]	; 0x24
 8008426:	2200      	movs	r2, #0
 8008428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800842a:	1c59      	adds	r1, r3, #1
 800842c:	911d      	str	r1, [sp, #116]	; 0x74
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	4610      	mov	r0, r2
 8008432:	e7c9      	b.n	80083c8 <_strtod_l+0x1e8>
 8008434:	4638      	mov	r0, r7
 8008436:	e7d2      	b.n	80083de <_strtod_l+0x1fe>
 8008438:	2a08      	cmp	r2, #8
 800843a:	dc04      	bgt.n	8008446 <_strtod_l+0x266>
 800843c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800843e:	434e      	muls	r6, r1
 8008440:	9609      	str	r6, [sp, #36]	; 0x24
 8008442:	3201      	adds	r2, #1
 8008444:	e7e2      	b.n	800840c <_strtod_l+0x22c>
 8008446:	f102 0c01 	add.w	ip, r2, #1
 800844a:	f1bc 0f10 	cmp.w	ip, #16
 800844e:	bfd8      	it	le
 8008450:	fb01 f909 	mulle.w	r9, r1, r9
 8008454:	e7f5      	b.n	8008442 <_strtod_l+0x262>
 8008456:	2d10      	cmp	r5, #16
 8008458:	bfdc      	itt	le
 800845a:	220a      	movle	r2, #10
 800845c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008460:	e7e1      	b.n	8008426 <_strtod_l+0x246>
 8008462:	2300      	movs	r3, #0
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	2201      	movs	r2, #1
 8008468:	e77c      	b.n	8008364 <_strtod_l+0x184>
 800846a:	f04f 0c00 	mov.w	ip, #0
 800846e:	f108 0302 	add.w	r3, r8, #2
 8008472:	931d      	str	r3, [sp, #116]	; 0x74
 8008474:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008478:	e785      	b.n	8008386 <_strtod_l+0x1a6>
 800847a:	f04f 0c01 	mov.w	ip, #1
 800847e:	e7f6      	b.n	800846e <_strtod_l+0x28e>
 8008480:	0800bfdc 	.word	0x0800bfdc
 8008484:	0800bd28 	.word	0x0800bd28
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800848e:	1c59      	adds	r1, r3, #1
 8008490:	911d      	str	r1, [sp, #116]	; 0x74
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b30      	cmp	r3, #48	; 0x30
 8008496:	d0f9      	beq.n	800848c <_strtod_l+0x2ac>
 8008498:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800849c:	2908      	cmp	r1, #8
 800849e:	f63f af79 	bhi.w	8008394 <_strtod_l+0x1b4>
 80084a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80084a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084a8:	9308      	str	r3, [sp, #32]
 80084aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084ac:	1c59      	adds	r1, r3, #1
 80084ae:	911d      	str	r1, [sp, #116]	; 0x74
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80084b6:	2e09      	cmp	r6, #9
 80084b8:	d937      	bls.n	800852a <_strtod_l+0x34a>
 80084ba:	9e08      	ldr	r6, [sp, #32]
 80084bc:	1b89      	subs	r1, r1, r6
 80084be:	2908      	cmp	r1, #8
 80084c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80084c4:	dc02      	bgt.n	80084cc <_strtod_l+0x2ec>
 80084c6:	4576      	cmp	r6, lr
 80084c8:	bfa8      	it	ge
 80084ca:	4676      	movge	r6, lr
 80084cc:	f1bc 0f00 	cmp.w	ip, #0
 80084d0:	d000      	beq.n	80084d4 <_strtod_l+0x2f4>
 80084d2:	4276      	negs	r6, r6
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d14f      	bne.n	8008578 <_strtod_l+0x398>
 80084d8:	9904      	ldr	r1, [sp, #16]
 80084da:	4301      	orrs	r1, r0
 80084dc:	f47f aec2 	bne.w	8008264 <_strtod_l+0x84>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	f47f aedb 	bne.w	800829c <_strtod_l+0xbc>
 80084e6:	2b69      	cmp	r3, #105	; 0x69
 80084e8:	d027      	beq.n	800853a <_strtod_l+0x35a>
 80084ea:	dc24      	bgt.n	8008536 <_strtod_l+0x356>
 80084ec:	2b49      	cmp	r3, #73	; 0x49
 80084ee:	d024      	beq.n	800853a <_strtod_l+0x35a>
 80084f0:	2b4e      	cmp	r3, #78	; 0x4e
 80084f2:	f47f aed3 	bne.w	800829c <_strtod_l+0xbc>
 80084f6:	499e      	ldr	r1, [pc, #632]	; (8008770 <_strtod_l+0x590>)
 80084f8:	a81d      	add	r0, sp, #116	; 0x74
 80084fa:	f001 ff35 	bl	800a368 <__match>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f43f aecc 	beq.w	800829c <_strtod_l+0xbc>
 8008504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b28      	cmp	r3, #40	; 0x28
 800850a:	d12d      	bne.n	8008568 <_strtod_l+0x388>
 800850c:	4999      	ldr	r1, [pc, #612]	; (8008774 <_strtod_l+0x594>)
 800850e:	aa20      	add	r2, sp, #128	; 0x80
 8008510:	a81d      	add	r0, sp, #116	; 0x74
 8008512:	f001 ff3d 	bl	800a390 <__hexnan>
 8008516:	2805      	cmp	r0, #5
 8008518:	d126      	bne.n	8008568 <_strtod_l+0x388>
 800851a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800851c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008520:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008524:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008528:	e69c      	b.n	8008264 <_strtod_l+0x84>
 800852a:	210a      	movs	r1, #10
 800852c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008530:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008534:	e7b9      	b.n	80084aa <_strtod_l+0x2ca>
 8008536:	2b6e      	cmp	r3, #110	; 0x6e
 8008538:	e7db      	b.n	80084f2 <_strtod_l+0x312>
 800853a:	498f      	ldr	r1, [pc, #572]	; (8008778 <_strtod_l+0x598>)
 800853c:	a81d      	add	r0, sp, #116	; 0x74
 800853e:	f001 ff13 	bl	800a368 <__match>
 8008542:	2800      	cmp	r0, #0
 8008544:	f43f aeaa 	beq.w	800829c <_strtod_l+0xbc>
 8008548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800854a:	498c      	ldr	r1, [pc, #560]	; (800877c <_strtod_l+0x59c>)
 800854c:	3b01      	subs	r3, #1
 800854e:	a81d      	add	r0, sp, #116	; 0x74
 8008550:	931d      	str	r3, [sp, #116]	; 0x74
 8008552:	f001 ff09 	bl	800a368 <__match>
 8008556:	b910      	cbnz	r0, 800855e <_strtod_l+0x37e>
 8008558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800855a:	3301      	adds	r3, #1
 800855c:	931d      	str	r3, [sp, #116]	; 0x74
 800855e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800878c <_strtod_l+0x5ac>
 8008562:	f04f 0a00 	mov.w	sl, #0
 8008566:	e67d      	b.n	8008264 <_strtod_l+0x84>
 8008568:	4885      	ldr	r0, [pc, #532]	; (8008780 <_strtod_l+0x5a0>)
 800856a:	f003 f809 	bl	800b580 <nan>
 800856e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008572:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008576:	e675      	b.n	8008264 <_strtod_l+0x84>
 8008578:	9b07      	ldr	r3, [sp, #28]
 800857a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800857c:	1af3      	subs	r3, r6, r3
 800857e:	2f00      	cmp	r7, #0
 8008580:	bf08      	it	eq
 8008582:	462f      	moveq	r7, r5
 8008584:	2d10      	cmp	r5, #16
 8008586:	9308      	str	r3, [sp, #32]
 8008588:	46a8      	mov	r8, r5
 800858a:	bfa8      	it	ge
 800858c:	f04f 0810 	movge.w	r8, #16
 8008590:	f7f7 ffc8 	bl	8000524 <__aeabi_ui2d>
 8008594:	2d09      	cmp	r5, #9
 8008596:	4682      	mov	sl, r0
 8008598:	468b      	mov	fp, r1
 800859a:	dd13      	ble.n	80085c4 <_strtod_l+0x3e4>
 800859c:	4b79      	ldr	r3, [pc, #484]	; (8008784 <_strtod_l+0x5a4>)
 800859e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085a6:	f7f8 f837 	bl	8000618 <__aeabi_dmul>
 80085aa:	4682      	mov	sl, r0
 80085ac:	4648      	mov	r0, r9
 80085ae:	468b      	mov	fp, r1
 80085b0:	f7f7 ffb8 	bl	8000524 <__aeabi_ui2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4650      	mov	r0, sl
 80085ba:	4659      	mov	r1, fp
 80085bc:	f7f7 fe76 	bl	80002ac <__adddf3>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	2d0f      	cmp	r5, #15
 80085c6:	dc38      	bgt.n	800863a <_strtod_l+0x45a>
 80085c8:	9b08      	ldr	r3, [sp, #32]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f43f ae4a 	beq.w	8008264 <_strtod_l+0x84>
 80085d0:	dd24      	ble.n	800861c <_strtod_l+0x43c>
 80085d2:	2b16      	cmp	r3, #22
 80085d4:	dc0b      	bgt.n	80085ee <_strtod_l+0x40e>
 80085d6:	4d6b      	ldr	r5, [pc, #428]	; (8008784 <_strtod_l+0x5a4>)
 80085d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80085dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	f7f8 f818 	bl	8000618 <__aeabi_dmul>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	e63a      	b.n	8008264 <_strtod_l+0x84>
 80085ee:	9a08      	ldr	r2, [sp, #32]
 80085f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80085f4:	4293      	cmp	r3, r2
 80085f6:	db20      	blt.n	800863a <_strtod_l+0x45a>
 80085f8:	4c62      	ldr	r4, [pc, #392]	; (8008784 <_strtod_l+0x5a4>)
 80085fa:	f1c5 050f 	rsb	r5, r5, #15
 80085fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008602:	4652      	mov	r2, sl
 8008604:	465b      	mov	r3, fp
 8008606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860a:	f7f8 f805 	bl	8000618 <__aeabi_dmul>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	1b5d      	subs	r5, r3, r5
 8008612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800861a:	e7e3      	b.n	80085e4 <_strtod_l+0x404>
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	3316      	adds	r3, #22
 8008620:	db0b      	blt.n	800863a <_strtod_l+0x45a>
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	4a57      	ldr	r2, [pc, #348]	; (8008784 <_strtod_l+0x5a4>)
 8008626:	1b9e      	subs	r6, r3, r6
 8008628:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800862c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	f7f8 f91a 	bl	800086c <__aeabi_ddiv>
 8008638:	e7d6      	b.n	80085e8 <_strtod_l+0x408>
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	eba5 0808 	sub.w	r8, r5, r8
 8008640:	4498      	add	r8, r3
 8008642:	f1b8 0f00 	cmp.w	r8, #0
 8008646:	dd71      	ble.n	800872c <_strtod_l+0x54c>
 8008648:	f018 030f 	ands.w	r3, r8, #15
 800864c:	d00a      	beq.n	8008664 <_strtod_l+0x484>
 800864e:	494d      	ldr	r1, [pc, #308]	; (8008784 <_strtod_l+0x5a4>)
 8008650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865c:	f7f7 ffdc 	bl	8000618 <__aeabi_dmul>
 8008660:	4682      	mov	sl, r0
 8008662:	468b      	mov	fp, r1
 8008664:	f038 080f 	bics.w	r8, r8, #15
 8008668:	d04d      	beq.n	8008706 <_strtod_l+0x526>
 800866a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800866e:	dd22      	ble.n	80086b6 <_strtod_l+0x4d6>
 8008670:	2500      	movs	r5, #0
 8008672:	462e      	mov	r6, r5
 8008674:	9509      	str	r5, [sp, #36]	; 0x24
 8008676:	9507      	str	r5, [sp, #28]
 8008678:	2322      	movs	r3, #34	; 0x22
 800867a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800878c <_strtod_l+0x5ac>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	f04f 0a00 	mov.w	sl, #0
 8008684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	f43f adec 	beq.w	8008264 <_strtod_l+0x84>
 800868c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800868e:	4620      	mov	r0, r4
 8008690:	f001 ff8a 	bl	800a5a8 <_Bfree>
 8008694:	9907      	ldr	r1, [sp, #28]
 8008696:	4620      	mov	r0, r4
 8008698:	f001 ff86 	bl	800a5a8 <_Bfree>
 800869c:	4631      	mov	r1, r6
 800869e:	4620      	mov	r0, r4
 80086a0:	f001 ff82 	bl	800a5a8 <_Bfree>
 80086a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a6:	4620      	mov	r0, r4
 80086a8:	f001 ff7e 	bl	800a5a8 <_Bfree>
 80086ac:	4629      	mov	r1, r5
 80086ae:	4620      	mov	r0, r4
 80086b0:	f001 ff7a 	bl	800a5a8 <_Bfree>
 80086b4:	e5d6      	b.n	8008264 <_strtod_l+0x84>
 80086b6:	2300      	movs	r3, #0
 80086b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80086bc:	4650      	mov	r0, sl
 80086be:	4659      	mov	r1, fp
 80086c0:	4699      	mov	r9, r3
 80086c2:	f1b8 0f01 	cmp.w	r8, #1
 80086c6:	dc21      	bgt.n	800870c <_strtod_l+0x52c>
 80086c8:	b10b      	cbz	r3, 80086ce <_strtod_l+0x4ee>
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	4b2e      	ldr	r3, [pc, #184]	; (8008788 <_strtod_l+0x5a8>)
 80086d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80086d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80086d8:	4652      	mov	r2, sl
 80086da:	465b      	mov	r3, fp
 80086dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80086e0:	f7f7 ff9a 	bl	8000618 <__aeabi_dmul>
 80086e4:	4b29      	ldr	r3, [pc, #164]	; (800878c <_strtod_l+0x5ac>)
 80086e6:	460a      	mov	r2, r1
 80086e8:	400b      	ands	r3, r1
 80086ea:	4929      	ldr	r1, [pc, #164]	; (8008790 <_strtod_l+0x5b0>)
 80086ec:	428b      	cmp	r3, r1
 80086ee:	4682      	mov	sl, r0
 80086f0:	d8be      	bhi.n	8008670 <_strtod_l+0x490>
 80086f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086f6:	428b      	cmp	r3, r1
 80086f8:	bf86      	itte	hi
 80086fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008794 <_strtod_l+0x5b4>
 80086fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8008702:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008706:	2300      	movs	r3, #0
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	e081      	b.n	8008810 <_strtod_l+0x630>
 800870c:	f018 0f01 	tst.w	r8, #1
 8008710:	d007      	beq.n	8008722 <_strtod_l+0x542>
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <_strtod_l+0x5a8>)
 8008714:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff7c 	bl	8000618 <__aeabi_dmul>
 8008720:	2301      	movs	r3, #1
 8008722:	f109 0901 	add.w	r9, r9, #1
 8008726:	ea4f 0868 	mov.w	r8, r8, asr #1
 800872a:	e7ca      	b.n	80086c2 <_strtod_l+0x4e2>
 800872c:	d0eb      	beq.n	8008706 <_strtod_l+0x526>
 800872e:	f1c8 0800 	rsb	r8, r8, #0
 8008732:	f018 020f 	ands.w	r2, r8, #15
 8008736:	d00a      	beq.n	800874e <_strtod_l+0x56e>
 8008738:	4b12      	ldr	r3, [pc, #72]	; (8008784 <_strtod_l+0x5a4>)
 800873a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800873e:	4650      	mov	r0, sl
 8008740:	4659      	mov	r1, fp
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f8 f891 	bl	800086c <__aeabi_ddiv>
 800874a:	4682      	mov	sl, r0
 800874c:	468b      	mov	fp, r1
 800874e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008752:	d0d8      	beq.n	8008706 <_strtod_l+0x526>
 8008754:	f1b8 0f1f 	cmp.w	r8, #31
 8008758:	dd1e      	ble.n	8008798 <_strtod_l+0x5b8>
 800875a:	2500      	movs	r5, #0
 800875c:	462e      	mov	r6, r5
 800875e:	9509      	str	r5, [sp, #36]	; 0x24
 8008760:	9507      	str	r5, [sp, #28]
 8008762:	2322      	movs	r3, #34	; 0x22
 8008764:	f04f 0a00 	mov.w	sl, #0
 8008768:	f04f 0b00 	mov.w	fp, #0
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	e789      	b.n	8008684 <_strtod_l+0x4a4>
 8008770:	0800bcf9 	.word	0x0800bcf9
 8008774:	0800bd3c 	.word	0x0800bd3c
 8008778:	0800bcf1 	.word	0x0800bcf1
 800877c:	0800be7c 	.word	0x0800be7c
 8008780:	0800c198 	.word	0x0800c198
 8008784:	0800c078 	.word	0x0800c078
 8008788:	0800c050 	.word	0x0800c050
 800878c:	7ff00000 	.word	0x7ff00000
 8008790:	7ca00000 	.word	0x7ca00000
 8008794:	7fefffff 	.word	0x7fefffff
 8008798:	f018 0310 	ands.w	r3, r8, #16
 800879c:	bf18      	it	ne
 800879e:	236a      	movne	r3, #106	; 0x6a
 80087a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008b58 <_strtod_l+0x978>
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	2300      	movs	r3, #0
 80087ac:	f018 0f01 	tst.w	r8, #1
 80087b0:	d004      	beq.n	80087bc <_strtod_l+0x5dc>
 80087b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80087b6:	f7f7 ff2f 	bl	8000618 <__aeabi_dmul>
 80087ba:	2301      	movs	r3, #1
 80087bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80087c0:	f109 0908 	add.w	r9, r9, #8
 80087c4:	d1f2      	bne.n	80087ac <_strtod_l+0x5cc>
 80087c6:	b10b      	cbz	r3, 80087cc <_strtod_l+0x5ec>
 80087c8:	4682      	mov	sl, r0
 80087ca:	468b      	mov	fp, r1
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	b1bb      	cbz	r3, 8008800 <_strtod_l+0x620>
 80087d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80087d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087d8:	2b00      	cmp	r3, #0
 80087da:	4659      	mov	r1, fp
 80087dc:	dd10      	ble.n	8008800 <_strtod_l+0x620>
 80087de:	2b1f      	cmp	r3, #31
 80087e0:	f340 8128 	ble.w	8008a34 <_strtod_l+0x854>
 80087e4:	2b34      	cmp	r3, #52	; 0x34
 80087e6:	bfde      	ittt	le
 80087e8:	3b20      	suble	r3, #32
 80087ea:	f04f 32ff 	movle.w	r2, #4294967295
 80087ee:	fa02 f303 	lslle.w	r3, r2, r3
 80087f2:	f04f 0a00 	mov.w	sl, #0
 80087f6:	bfcc      	ite	gt
 80087f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80087fc:	ea03 0b01 	andle.w	fp, r3, r1
 8008800:	2200      	movs	r2, #0
 8008802:	2300      	movs	r3, #0
 8008804:	4650      	mov	r0, sl
 8008806:	4659      	mov	r1, fp
 8008808:	f7f8 f96e 	bl	8000ae8 <__aeabi_dcmpeq>
 800880c:	2800      	cmp	r0, #0
 800880e:	d1a4      	bne.n	800875a <_strtod_l+0x57a>
 8008810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008816:	462b      	mov	r3, r5
 8008818:	463a      	mov	r2, r7
 800881a:	4620      	mov	r0, r4
 800881c:	f001 ff30 	bl	800a680 <__s2b>
 8008820:	9009      	str	r0, [sp, #36]	; 0x24
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f af24 	beq.w	8008670 <_strtod_l+0x490>
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	1b9e      	subs	r6, r3, r6
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb4      	ite	lt
 8008832:	4633      	movlt	r3, r6
 8008834:	2300      	movge	r3, #0
 8008836:	9310      	str	r3, [sp, #64]	; 0x40
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	2500      	movs	r5, #0
 800883c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008840:	9318      	str	r3, [sp, #96]	; 0x60
 8008842:	462e      	mov	r6, r5
 8008844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008846:	4620      	mov	r0, r4
 8008848:	6859      	ldr	r1, [r3, #4]
 800884a:	f001 fe6d 	bl	800a528 <_Balloc>
 800884e:	9007      	str	r0, [sp, #28]
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f af11 	beq.w	8008678 <_strtod_l+0x498>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	691a      	ldr	r2, [r3, #16]
 800885a:	3202      	adds	r2, #2
 800885c:	f103 010c 	add.w	r1, r3, #12
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	300c      	adds	r0, #12
 8008864:	f001 fe52 	bl	800a50c <memcpy>
 8008868:	ec4b ab10 	vmov	d0, sl, fp
 800886c:	aa20      	add	r2, sp, #128	; 0x80
 800886e:	a91f      	add	r1, sp, #124	; 0x7c
 8008870:	4620      	mov	r0, r4
 8008872:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008876:	f002 fa3f 	bl	800acf8 <__d2b>
 800887a:	901e      	str	r0, [sp, #120]	; 0x78
 800887c:	2800      	cmp	r0, #0
 800887e:	f43f aefb 	beq.w	8008678 <_strtod_l+0x498>
 8008882:	2101      	movs	r1, #1
 8008884:	4620      	mov	r0, r4
 8008886:	f001 ff95 	bl	800a7b4 <__i2b>
 800888a:	4606      	mov	r6, r0
 800888c:	2800      	cmp	r0, #0
 800888e:	f43f aef3 	beq.w	8008678 <_strtod_l+0x498>
 8008892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008894:	9904      	ldr	r1, [sp, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfab      	itete	ge
 800889a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800889c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800889e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80088a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80088a4:	bfac      	ite	ge
 80088a6:	eb03 0902 	addge.w	r9, r3, r2
 80088aa:	1ad7      	sublt	r7, r2, r3
 80088ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ae:	eba3 0801 	sub.w	r8, r3, r1
 80088b2:	4490      	add	r8, r2
 80088b4:	4ba3      	ldr	r3, [pc, #652]	; (8008b44 <_strtod_l+0x964>)
 80088b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80088ba:	4598      	cmp	r8, r3
 80088bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80088c0:	f280 80cc 	bge.w	8008a5c <_strtod_l+0x87c>
 80088c4:	eba3 0308 	sub.w	r3, r3, r8
 80088c8:	2b1f      	cmp	r3, #31
 80088ca:	eba2 0203 	sub.w	r2, r2, r3
 80088ce:	f04f 0101 	mov.w	r1, #1
 80088d2:	f300 80b6 	bgt.w	8008a42 <_strtod_l+0x862>
 80088d6:	fa01 f303 	lsl.w	r3, r1, r3
 80088da:	9311      	str	r3, [sp, #68]	; 0x44
 80088dc:	2300      	movs	r3, #0
 80088de:	930c      	str	r3, [sp, #48]	; 0x30
 80088e0:	eb09 0802 	add.w	r8, r9, r2
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	45c1      	cmp	r9, r8
 80088e8:	4417      	add	r7, r2
 80088ea:	441f      	add	r7, r3
 80088ec:	464b      	mov	r3, r9
 80088ee:	bfa8      	it	ge
 80088f0:	4643      	movge	r3, r8
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	bfa8      	it	ge
 80088f6:	463b      	movge	r3, r7
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfc2      	ittt	gt
 80088fc:	eba8 0803 	subgt.w	r8, r8, r3
 8008900:	1aff      	subgt	r7, r7, r3
 8008902:	eba9 0903 	subgt.w	r9, r9, r3
 8008906:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd17      	ble.n	800893c <_strtod_l+0x75c>
 800890c:	4631      	mov	r1, r6
 800890e:	461a      	mov	r2, r3
 8008910:	4620      	mov	r0, r4
 8008912:	f002 f80b 	bl	800a92c <__pow5mult>
 8008916:	4606      	mov	r6, r0
 8008918:	2800      	cmp	r0, #0
 800891a:	f43f aead 	beq.w	8008678 <_strtod_l+0x498>
 800891e:	4601      	mov	r1, r0
 8008920:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008922:	4620      	mov	r0, r4
 8008924:	f001 ff5c 	bl	800a7e0 <__multiply>
 8008928:	900f      	str	r0, [sp, #60]	; 0x3c
 800892a:	2800      	cmp	r0, #0
 800892c:	f43f aea4 	beq.w	8008678 <_strtod_l+0x498>
 8008930:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008932:	4620      	mov	r0, r4
 8008934:	f001 fe38 	bl	800a5a8 <_Bfree>
 8008938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800893a:	931e      	str	r3, [sp, #120]	; 0x78
 800893c:	f1b8 0f00 	cmp.w	r8, #0
 8008940:	f300 8091 	bgt.w	8008a66 <_strtod_l+0x886>
 8008944:	9b08      	ldr	r3, [sp, #32]
 8008946:	2b00      	cmp	r3, #0
 8008948:	dd08      	ble.n	800895c <_strtod_l+0x77c>
 800894a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800894c:	9907      	ldr	r1, [sp, #28]
 800894e:	4620      	mov	r0, r4
 8008950:	f001 ffec 	bl	800a92c <__pow5mult>
 8008954:	9007      	str	r0, [sp, #28]
 8008956:	2800      	cmp	r0, #0
 8008958:	f43f ae8e 	beq.w	8008678 <_strtod_l+0x498>
 800895c:	2f00      	cmp	r7, #0
 800895e:	dd08      	ble.n	8008972 <_strtod_l+0x792>
 8008960:	9907      	ldr	r1, [sp, #28]
 8008962:	463a      	mov	r2, r7
 8008964:	4620      	mov	r0, r4
 8008966:	f002 f83b 	bl	800a9e0 <__lshift>
 800896a:	9007      	str	r0, [sp, #28]
 800896c:	2800      	cmp	r0, #0
 800896e:	f43f ae83 	beq.w	8008678 <_strtod_l+0x498>
 8008972:	f1b9 0f00 	cmp.w	r9, #0
 8008976:	dd08      	ble.n	800898a <_strtod_l+0x7aa>
 8008978:	4631      	mov	r1, r6
 800897a:	464a      	mov	r2, r9
 800897c:	4620      	mov	r0, r4
 800897e:	f002 f82f 	bl	800a9e0 <__lshift>
 8008982:	4606      	mov	r6, r0
 8008984:	2800      	cmp	r0, #0
 8008986:	f43f ae77 	beq.w	8008678 <_strtod_l+0x498>
 800898a:	9a07      	ldr	r2, [sp, #28]
 800898c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800898e:	4620      	mov	r0, r4
 8008990:	f002 f8ae 	bl	800aaf0 <__mdiff>
 8008994:	4605      	mov	r5, r0
 8008996:	2800      	cmp	r0, #0
 8008998:	f43f ae6e 	beq.w	8008678 <_strtod_l+0x498>
 800899c:	68c3      	ldr	r3, [r0, #12]
 800899e:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a0:	2300      	movs	r3, #0
 80089a2:	60c3      	str	r3, [r0, #12]
 80089a4:	4631      	mov	r1, r6
 80089a6:	f002 f887 	bl	800aab8 <__mcmp>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	da65      	bge.n	8008a7a <_strtod_l+0x89a>
 80089ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089b0:	ea53 030a 	orrs.w	r3, r3, sl
 80089b4:	f040 8087 	bne.w	8008ac6 <_strtod_l+0x8e6>
 80089b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 8082 	bne.w	8008ac6 <_strtod_l+0x8e6>
 80089c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089c6:	0d1b      	lsrs	r3, r3, #20
 80089c8:	051b      	lsls	r3, r3, #20
 80089ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80089ce:	d97a      	bls.n	8008ac6 <_strtod_l+0x8e6>
 80089d0:	696b      	ldr	r3, [r5, #20]
 80089d2:	b913      	cbnz	r3, 80089da <_strtod_l+0x7fa>
 80089d4:	692b      	ldr	r3, [r5, #16]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	dd75      	ble.n	8008ac6 <_strtod_l+0x8e6>
 80089da:	4629      	mov	r1, r5
 80089dc:	2201      	movs	r2, #1
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 fffe 	bl	800a9e0 <__lshift>
 80089e4:	4631      	mov	r1, r6
 80089e6:	4605      	mov	r5, r0
 80089e8:	f002 f866 	bl	800aab8 <__mcmp>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	dd6a      	ble.n	8008ac6 <_strtod_l+0x8e6>
 80089f0:	9904      	ldr	r1, [sp, #16]
 80089f2:	4a55      	ldr	r2, [pc, #340]	; (8008b48 <_strtod_l+0x968>)
 80089f4:	465b      	mov	r3, fp
 80089f6:	2900      	cmp	r1, #0
 80089f8:	f000 8085 	beq.w	8008b06 <_strtod_l+0x926>
 80089fc:	ea02 010b 	and.w	r1, r2, fp
 8008a00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a04:	dc7f      	bgt.n	8008b06 <_strtod_l+0x926>
 8008a06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a0a:	f77f aeaa 	ble.w	8008762 <_strtod_l+0x582>
 8008a0e:	4a4f      	ldr	r2, [pc, #316]	; (8008b4c <_strtod_l+0x96c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008a16:	4650      	mov	r0, sl
 8008a18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	f7f7 fdfb 	bl	8000618 <__aeabi_dmul>
 8008a22:	460b      	mov	r3, r1
 8008a24:	4303      	orrs	r3, r0
 8008a26:	bf08      	it	eq
 8008a28:	2322      	moveq	r3, #34	; 0x22
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	468b      	mov	fp, r1
 8008a2e:	bf08      	it	eq
 8008a30:	6023      	streq	r3, [r4, #0]
 8008a32:	e62b      	b.n	800868c <_strtod_l+0x4ac>
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	ea03 0a0a 	and.w	sl, r3, sl
 8008a40:	e6de      	b.n	8008800 <_strtod_l+0x620>
 8008a42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a52:	fa01 f308 	lsl.w	r3, r1, r8
 8008a56:	930c      	str	r3, [sp, #48]	; 0x30
 8008a58:	9111      	str	r1, [sp, #68]	; 0x44
 8008a5a:	e741      	b.n	80088e0 <_strtod_l+0x700>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a60:	2301      	movs	r3, #1
 8008a62:	9311      	str	r3, [sp, #68]	; 0x44
 8008a64:	e73c      	b.n	80088e0 <_strtod_l+0x700>
 8008a66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a68:	4642      	mov	r2, r8
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f001 ffb8 	bl	800a9e0 <__lshift>
 8008a70:	901e      	str	r0, [sp, #120]	; 0x78
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f47f af66 	bne.w	8008944 <_strtod_l+0x764>
 8008a78:	e5fe      	b.n	8008678 <_strtod_l+0x498>
 8008a7a:	465f      	mov	r7, fp
 8008a7c:	d16e      	bne.n	8008b5c <_strtod_l+0x97c>
 8008a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a84:	b342      	cbz	r2, 8008ad8 <_strtod_l+0x8f8>
 8008a86:	4a32      	ldr	r2, [pc, #200]	; (8008b50 <_strtod_l+0x970>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d128      	bne.n	8008ade <_strtod_l+0x8fe>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4650      	mov	r0, sl
 8008a90:	b1eb      	cbz	r3, 8008ace <_strtod_l+0x8ee>
 8008a92:	4a2d      	ldr	r2, [pc, #180]	; (8008b48 <_strtod_l+0x968>)
 8008a94:	403a      	ands	r2, r7
 8008a96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a9e:	d819      	bhi.n	8008ad4 <_strtod_l+0x8f4>
 8008aa0:	0d12      	lsrs	r2, r2, #20
 8008aa2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aaa:	4298      	cmp	r0, r3
 8008aac:	d117      	bne.n	8008ade <_strtod_l+0x8fe>
 8008aae:	4b29      	ldr	r3, [pc, #164]	; (8008b54 <_strtod_l+0x974>)
 8008ab0:	429f      	cmp	r7, r3
 8008ab2:	d102      	bne.n	8008aba <_strtod_l+0x8da>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	f43f addf 	beq.w	8008678 <_strtod_l+0x498>
 8008aba:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <_strtod_l+0x968>)
 8008abc:	403b      	ands	r3, r7
 8008abe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008ac2:	f04f 0a00 	mov.w	sl, #0
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1a0      	bne.n	8008a0e <_strtod_l+0x82e>
 8008acc:	e5de      	b.n	800868c <_strtod_l+0x4ac>
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad2:	e7ea      	b.n	8008aaa <_strtod_l+0x8ca>
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e7e8      	b.n	8008aaa <_strtod_l+0x8ca>
 8008ad8:	ea53 030a 	orrs.w	r3, r3, sl
 8008adc:	d088      	beq.n	80089f0 <_strtod_l+0x810>
 8008ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae0:	b1db      	cbz	r3, 8008b1a <_strtod_l+0x93a>
 8008ae2:	423b      	tst	r3, r7
 8008ae4:	d0ef      	beq.n	8008ac6 <_strtod_l+0x8e6>
 8008ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	b1c3      	cbz	r3, 8008b22 <_strtod_l+0x942>
 8008af0:	f7ff fb58 	bl	80081a4 <sulp>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008afc:	f7f7 fbd6 	bl	80002ac <__adddf3>
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	e7df      	b.n	8008ac6 <_strtod_l+0x8e6>
 8008b06:	4013      	ands	r3, r2
 8008b08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b14:	f04f 3aff 	mov.w	sl, #4294967295
 8008b18:	e7d5      	b.n	8008ac6 <_strtod_l+0x8e6>
 8008b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b1c:	ea13 0f0a 	tst.w	r3, sl
 8008b20:	e7e0      	b.n	8008ae4 <_strtod_l+0x904>
 8008b22:	f7ff fb3f 	bl	80081a4 <sulp>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b2e:	f7f7 fbbb 	bl	80002a8 <__aeabi_dsub>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	4682      	mov	sl, r0
 8008b38:	468b      	mov	fp, r1
 8008b3a:	f7f7 ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0c1      	beq.n	8008ac6 <_strtod_l+0x8e6>
 8008b42:	e60e      	b.n	8008762 <_strtod_l+0x582>
 8008b44:	fffffc02 	.word	0xfffffc02
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	39500000 	.word	0x39500000
 8008b50:	000fffff 	.word	0x000fffff
 8008b54:	7fefffff 	.word	0x7fefffff
 8008b58:	0800bd50 	.word	0x0800bd50
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f002 f926 	bl	800adb0 <__ratio>
 8008b64:	ec59 8b10 	vmov	r8, r9, d0
 8008b68:	ee10 0a10 	vmov	r0, s0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ffcc 	bl	8000b10 <__aeabi_dcmple>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d07c      	beq.n	8008c76 <_strtod_l+0xa96>
 8008b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04c      	beq.n	8008c1c <_strtod_l+0xa3c>
 8008b82:	4b95      	ldr	r3, [pc, #596]	; (8008dd8 <_strtod_l+0xbf8>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008dd8 <_strtod_l+0xbf8>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	4b92      	ldr	r3, [pc, #584]	; (8008ddc <_strtod_l+0xbfc>)
 8008b94:	403b      	ands	r3, r7
 8008b96:	9311      	str	r3, [sp, #68]	; 0x44
 8008b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b9a:	4b91      	ldr	r3, [pc, #580]	; (8008de0 <_strtod_l+0xc00>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	f040 80b2 	bne.w	8008d06 <_strtod_l+0xb26>
 8008ba2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008baa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008bae:	ec4b ab10 	vmov	d0, sl, fp
 8008bb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008bb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bba:	f002 f821 	bl	800ac00 <__ulp>
 8008bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc2:	ec53 2b10 	vmov	r2, r3, d0
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	4652      	mov	r2, sl
 8008bcc:	465b      	mov	r3, fp
 8008bce:	f7f7 fb6d 	bl	80002ac <__adddf3>
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4981      	ldr	r1, [pc, #516]	; (8008ddc <_strtod_l+0xbfc>)
 8008bd6:	4a83      	ldr	r2, [pc, #524]	; (8008de4 <_strtod_l+0xc04>)
 8008bd8:	4019      	ands	r1, r3
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	4682      	mov	sl, r0
 8008bde:	d95e      	bls.n	8008c9e <_strtod_l+0xabe>
 8008be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d103      	bne.n	8008bf2 <_strtod_l+0xa12>
 8008bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bec:	3301      	adds	r3, #1
 8008bee:	f43f ad43 	beq.w	8008678 <_strtod_l+0x498>
 8008bf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008df0 <_strtod_l+0xc10>
 8008bf6:	f04f 3aff 	mov.w	sl, #4294967295
 8008bfa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f001 fcd3 	bl	800a5a8 <_Bfree>
 8008c02:	9907      	ldr	r1, [sp, #28]
 8008c04:	4620      	mov	r0, r4
 8008c06:	f001 fccf 	bl	800a5a8 <_Bfree>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f001 fccb 	bl	800a5a8 <_Bfree>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4620      	mov	r0, r4
 8008c16:	f001 fcc7 	bl	800a5a8 <_Bfree>
 8008c1a:	e613      	b.n	8008844 <_strtod_l+0x664>
 8008c1c:	f1ba 0f00 	cmp.w	sl, #0
 8008c20:	d11b      	bne.n	8008c5a <_strtod_l+0xa7a>
 8008c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c26:	b9f3      	cbnz	r3, 8008c66 <_strtod_l+0xa86>
 8008c28:	4b6b      	ldr	r3, [pc, #428]	; (8008dd8 <_strtod_l+0xbf8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4649      	mov	r1, r9
 8008c30:	f7f7 ff64 	bl	8000afc <__aeabi_dcmplt>
 8008c34:	b9d0      	cbnz	r0, 8008c6c <_strtod_l+0xa8c>
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4b6b      	ldr	r3, [pc, #428]	; (8008de8 <_strtod_l+0xc08>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f7f7 fceb 	bl	8000618 <__aeabi_dmul>
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008c4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008c54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c58:	e79b      	b.n	8008b92 <_strtod_l+0x9b2>
 8008c5a:	f1ba 0f01 	cmp.w	sl, #1
 8008c5e:	d102      	bne.n	8008c66 <_strtod_l+0xa86>
 8008c60:	2f00      	cmp	r7, #0
 8008c62:	f43f ad7e 	beq.w	8008762 <_strtod_l+0x582>
 8008c66:	4b61      	ldr	r3, [pc, #388]	; (8008dec <_strtod_l+0xc0c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	e78c      	b.n	8008b86 <_strtod_l+0x9a6>
 8008c6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008de8 <_strtod_l+0xc08>
 8008c70:	f04f 0800 	mov.w	r8, #0
 8008c74:	e7e7      	b.n	8008c46 <_strtod_l+0xa66>
 8008c76:	4b5c      	ldr	r3, [pc, #368]	; (8008de8 <_strtod_l+0xc08>)
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f7f7 fccb 	bl	8000618 <__aeabi_dmul>
 8008c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	b933      	cbnz	r3, 8008c98 <_strtod_l+0xab8>
 8008c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c8e:	9012      	str	r0, [sp, #72]	; 0x48
 8008c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c96:	e7dd      	b.n	8008c54 <_strtod_l+0xa74>
 8008c98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008c9c:	e7f9      	b.n	8008c92 <_strtod_l+0xab2>
 8008c9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1a8      	bne.n	8008bfa <_strtod_l+0xa1a>
 8008ca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cae:	0d1b      	lsrs	r3, r3, #20
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d1a1      	bne.n	8008bfa <_strtod_l+0xa1a>
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f8 f80d 	bl	8000cd8 <__aeabi_d2lz>
 8008cbe:	f7f7 fc7d 	bl	80005bc <__aeabi_l2d>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 faed 	bl	80002a8 <__aeabi_dsub>
 8008cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd4:	ea43 030a 	orr.w	r3, r3, sl
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	4680      	mov	r8, r0
 8008cdc:	4689      	mov	r9, r1
 8008cde:	d053      	beq.n	8008d88 <_strtod_l+0xba8>
 8008ce0:	a335      	add	r3, pc, #212	; (adr r3, 8008db8 <_strtod_l+0xbd8>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 ff09 	bl	8000afc <__aeabi_dcmplt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f47f acce 	bne.w	800868c <_strtod_l+0x4ac>
 8008cf0:	a333      	add	r3, pc, #204	; (adr r3, 8008dc0 <_strtod_l+0xbe0>)
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	f7f7 ff1d 	bl	8000b38 <__aeabi_dcmpgt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f43f af7b 	beq.w	8008bfa <_strtod_l+0xa1a>
 8008d04:	e4c2      	b.n	800868c <_strtod_l+0x4ac>
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	b333      	cbz	r3, 8008d58 <_strtod_l+0xb78>
 8008d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d10:	d822      	bhi.n	8008d58 <_strtod_l+0xb78>
 8008d12:	a32d      	add	r3, pc, #180	; (adr r3, 8008dc8 <_strtod_l+0xbe8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	f7f7 fef8 	bl	8000b10 <__aeabi_dcmple>
 8008d20:	b1a0      	cbz	r0, 8008d4c <_strtod_l+0xb6c>
 8008d22:	4649      	mov	r1, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	f7f7 ff4f 	bl	8000bc8 <__aeabi_d2uiz>
 8008d2a:	2801      	cmp	r0, #1
 8008d2c:	bf38      	it	cc
 8008d2e:	2001      	movcc	r0, #1
 8008d30:	f7f7 fbf8 	bl	8000524 <__aeabi_ui2d>
 8008d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d36:	4680      	mov	r8, r0
 8008d38:	4689      	mov	r9, r1
 8008d3a:	bb13      	cbnz	r3, 8008d82 <_strtod_l+0xba2>
 8008d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d40:	9014      	str	r0, [sp, #80]	; 0x50
 8008d42:	9315      	str	r3, [sp, #84]	; 0x54
 8008d44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	930d      	str	r3, [sp, #52]	; 0x34
 8008d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d64:	f001 ff4c 	bl	800ac00 <__ulp>
 8008d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d6c:	ec53 2b10 	vmov	r2, r3, d0
 8008d70:	f7f7 fc52 	bl	8000618 <__aeabi_dmul>
 8008d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d78:	f7f7 fa98 	bl	80002ac <__adddf3>
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	468b      	mov	fp, r1
 8008d80:	e78f      	b.n	8008ca2 <_strtod_l+0xac2>
 8008d82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008d86:	e7dd      	b.n	8008d44 <_strtod_l+0xb64>
 8008d88:	a311      	add	r3, pc, #68	; (adr r3, 8008dd0 <_strtod_l+0xbf0>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 feb5 	bl	8000afc <__aeabi_dcmplt>
 8008d92:	e7b4      	b.n	8008cfe <_strtod_l+0xb1e>
 8008d94:	2300      	movs	r3, #0
 8008d96:	930e      	str	r3, [sp, #56]	; 0x38
 8008d98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	f7ff ba65 	b.w	800826c <_strtod_l+0x8c>
 8008da2:	2b65      	cmp	r3, #101	; 0x65
 8008da4:	f43f ab5d 	beq.w	8008462 <_strtod_l+0x282>
 8008da8:	2b45      	cmp	r3, #69	; 0x45
 8008daa:	f43f ab5a 	beq.w	8008462 <_strtod_l+0x282>
 8008dae:	2201      	movs	r2, #1
 8008db0:	f7ff bb92 	b.w	80084d8 <_strtod_l+0x2f8>
 8008db4:	f3af 8000 	nop.w
 8008db8:	94a03595 	.word	0x94a03595
 8008dbc:	3fdfffff 	.word	0x3fdfffff
 8008dc0:	35afe535 	.word	0x35afe535
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	ffc00000 	.word	0xffc00000
 8008dcc:	41dfffff 	.word	0x41dfffff
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fcfffff 	.word	0x3fcfffff
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	7ff00000 	.word	0x7ff00000
 8008de0:	7fe00000 	.word	0x7fe00000
 8008de4:	7c9fffff 	.word	0x7c9fffff
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	bff00000 	.word	0xbff00000
 8008df0:	7fefffff 	.word	0x7fefffff

08008df4 <_strtod_r>:
 8008df4:	4b01      	ldr	r3, [pc, #4]	; (8008dfc <_strtod_r+0x8>)
 8008df6:	f7ff b9f3 	b.w	80081e0 <_strtod_l>
 8008dfa:	bf00      	nop
 8008dfc:	20000080 	.word	0x20000080

08008e00 <_strtol_l.isra.0>:
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e06:	d001      	beq.n	8008e0c <_strtol_l.isra.0+0xc>
 8008e08:	2b24      	cmp	r3, #36	; 0x24
 8008e0a:	d906      	bls.n	8008e1a <_strtol_l.isra.0+0x1a>
 8008e0c:	f7fe faf8 	bl	8007400 <__errno>
 8008e10:	2316      	movs	r3, #22
 8008e12:	6003      	str	r3, [r0, #0]
 8008e14:	2000      	movs	r0, #0
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	4f3a      	ldr	r7, [pc, #232]	; (8008f04 <_strtol_l.isra.0+0x104>)
 8008e1c:	468e      	mov	lr, r1
 8008e1e:	4676      	mov	r6, lr
 8008e20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e24:	5de5      	ldrb	r5, [r4, r7]
 8008e26:	f015 0508 	ands.w	r5, r5, #8
 8008e2a:	d1f8      	bne.n	8008e1e <_strtol_l.isra.0+0x1e>
 8008e2c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e2e:	d134      	bne.n	8008e9a <_strtol_l.isra.0+0x9a>
 8008e30:	f89e 4000 	ldrb.w	r4, [lr]
 8008e34:	f04f 0801 	mov.w	r8, #1
 8008e38:	f106 0e02 	add.w	lr, r6, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d05c      	beq.n	8008efa <_strtol_l.isra.0+0xfa>
 8008e40:	2b10      	cmp	r3, #16
 8008e42:	d10c      	bne.n	8008e5e <_strtol_l.isra.0+0x5e>
 8008e44:	2c30      	cmp	r4, #48	; 0x30
 8008e46:	d10a      	bne.n	8008e5e <_strtol_l.isra.0+0x5e>
 8008e48:	f89e 4000 	ldrb.w	r4, [lr]
 8008e4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e50:	2c58      	cmp	r4, #88	; 0x58
 8008e52:	d14d      	bne.n	8008ef0 <_strtol_l.isra.0+0xf0>
 8008e54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008e58:	2310      	movs	r3, #16
 8008e5a:	f10e 0e02 	add.w	lr, lr, #2
 8008e5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008e62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e66:	2600      	movs	r6, #0
 8008e68:	fbbc f9f3 	udiv	r9, ip, r3
 8008e6c:	4635      	mov	r5, r6
 8008e6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e76:	2f09      	cmp	r7, #9
 8008e78:	d818      	bhi.n	8008eac <_strtol_l.isra.0+0xac>
 8008e7a:	463c      	mov	r4, r7
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	dd24      	ble.n	8008eca <_strtol_l.isra.0+0xca>
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	db1f      	blt.n	8008ec4 <_strtol_l.isra.0+0xc4>
 8008e84:	45a9      	cmp	r9, r5
 8008e86:	d31d      	bcc.n	8008ec4 <_strtol_l.isra.0+0xc4>
 8008e88:	d101      	bne.n	8008e8e <_strtol_l.isra.0+0x8e>
 8008e8a:	45a2      	cmp	sl, r4
 8008e8c:	db1a      	blt.n	8008ec4 <_strtol_l.isra.0+0xc4>
 8008e8e:	fb05 4503 	mla	r5, r5, r3, r4
 8008e92:	2601      	movs	r6, #1
 8008e94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e98:	e7eb      	b.n	8008e72 <_strtol_l.isra.0+0x72>
 8008e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8008e9c:	bf08      	it	eq
 8008e9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008ea2:	46a8      	mov	r8, r5
 8008ea4:	bf08      	it	eq
 8008ea6:	f106 0e02 	addeq.w	lr, r6, #2
 8008eaa:	e7c7      	b.n	8008e3c <_strtol_l.isra.0+0x3c>
 8008eac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008eb0:	2f19      	cmp	r7, #25
 8008eb2:	d801      	bhi.n	8008eb8 <_strtol_l.isra.0+0xb8>
 8008eb4:	3c37      	subs	r4, #55	; 0x37
 8008eb6:	e7e1      	b.n	8008e7c <_strtol_l.isra.0+0x7c>
 8008eb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ebc:	2f19      	cmp	r7, #25
 8008ebe:	d804      	bhi.n	8008eca <_strtol_l.isra.0+0xca>
 8008ec0:	3c57      	subs	r4, #87	; 0x57
 8008ec2:	e7db      	b.n	8008e7c <_strtol_l.isra.0+0x7c>
 8008ec4:	f04f 36ff 	mov.w	r6, #4294967295
 8008ec8:	e7e4      	b.n	8008e94 <_strtol_l.isra.0+0x94>
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	da05      	bge.n	8008eda <_strtol_l.isra.0+0xda>
 8008ece:	2322      	movs	r3, #34	; 0x22
 8008ed0:	6003      	str	r3, [r0, #0]
 8008ed2:	4665      	mov	r5, ip
 8008ed4:	b942      	cbnz	r2, 8008ee8 <_strtol_l.isra.0+0xe8>
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	e79d      	b.n	8008e16 <_strtol_l.isra.0+0x16>
 8008eda:	f1b8 0f00 	cmp.w	r8, #0
 8008ede:	d000      	beq.n	8008ee2 <_strtol_l.isra.0+0xe2>
 8008ee0:	426d      	negs	r5, r5
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	d0f7      	beq.n	8008ed6 <_strtol_l.isra.0+0xd6>
 8008ee6:	b10e      	cbz	r6, 8008eec <_strtol_l.isra.0+0xec>
 8008ee8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	e7f2      	b.n	8008ed6 <_strtol_l.isra.0+0xd6>
 8008ef0:	2430      	movs	r4, #48	; 0x30
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1b3      	bne.n	8008e5e <_strtol_l.isra.0+0x5e>
 8008ef6:	2308      	movs	r3, #8
 8008ef8:	e7b1      	b.n	8008e5e <_strtol_l.isra.0+0x5e>
 8008efa:	2c30      	cmp	r4, #48	; 0x30
 8008efc:	d0a4      	beq.n	8008e48 <_strtol_l.isra.0+0x48>
 8008efe:	230a      	movs	r3, #10
 8008f00:	e7ad      	b.n	8008e5e <_strtol_l.isra.0+0x5e>
 8008f02:	bf00      	nop
 8008f04:	0800bd79 	.word	0x0800bd79

08008f08 <_strtol_r>:
 8008f08:	f7ff bf7a 	b.w	8008e00 <_strtol_l.isra.0>

08008f0c <quorem>:
 8008f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	6903      	ldr	r3, [r0, #16]
 8008f12:	690c      	ldr	r4, [r1, #16]
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	4607      	mov	r7, r0
 8008f18:	f2c0 8081 	blt.w	800901e <quorem+0x112>
 8008f1c:	3c01      	subs	r4, #1
 8008f1e:	f101 0814 	add.w	r8, r1, #20
 8008f22:	f100 0514 	add.w	r5, r0, #20
 8008f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f34:	3301      	adds	r3, #1
 8008f36:	429a      	cmp	r2, r3
 8008f38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f40:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f44:	d331      	bcc.n	8008faa <quorem+0x9e>
 8008f46:	f04f 0e00 	mov.w	lr, #0
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	46ac      	mov	ip, r5
 8008f4e:	46f2      	mov	sl, lr
 8008f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f54:	b293      	uxth	r3, r2
 8008f56:	fb06 e303 	mla	r3, r6, r3, lr
 8008f5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ebaa 0303 	sub.w	r3, sl, r3
 8008f64:	0c12      	lsrs	r2, r2, #16
 8008f66:	f8dc a000 	ldr.w	sl, [ip]
 8008f6a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f6e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f76:	fa1f fa82 	uxth.w	sl, r2
 8008f7a:	f8dc 2000 	ldr.w	r2, [ip]
 8008f7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f8c:	4581      	cmp	r9, r0
 8008f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f96:	d2db      	bcs.n	8008f50 <quorem+0x44>
 8008f98:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f9c:	b92b      	cbnz	r3, 8008faa <quorem+0x9e>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	429d      	cmp	r5, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	d32e      	bcc.n	8009006 <quorem+0xfa>
 8008fa8:	613c      	str	r4, [r7, #16]
 8008faa:	4638      	mov	r0, r7
 8008fac:	f001 fd84 	bl	800aab8 <__mcmp>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	db24      	blt.n	8008ffe <quorem+0xf2>
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f04f 0c00 	mov.w	ip, #0
 8008fbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8008fc4:	b293      	uxth	r3, r2
 8008fc6:	ebac 0303 	sub.w	r3, ip, r3
 8008fca:	0c12      	lsrs	r2, r2, #16
 8008fcc:	fa13 f38e 	uxtah	r3, r3, lr
 8008fd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fde:	45c1      	cmp	r9, r8
 8008fe0:	f840 3b04 	str.w	r3, [r0], #4
 8008fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fe8:	d2e8      	bcs.n	8008fbc <quorem+0xb0>
 8008fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff2:	b922      	cbnz	r2, 8008ffe <quorem+0xf2>
 8008ff4:	3b04      	subs	r3, #4
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	d30a      	bcc.n	8009012 <quorem+0x106>
 8008ffc:	613c      	str	r4, [r7, #16]
 8008ffe:	4630      	mov	r0, r6
 8009000:	b003      	add	sp, #12
 8009002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	6812      	ldr	r2, [r2, #0]
 8009008:	3b04      	subs	r3, #4
 800900a:	2a00      	cmp	r2, #0
 800900c:	d1cc      	bne.n	8008fa8 <quorem+0x9c>
 800900e:	3c01      	subs	r4, #1
 8009010:	e7c7      	b.n	8008fa2 <quorem+0x96>
 8009012:	6812      	ldr	r2, [r2, #0]
 8009014:	3b04      	subs	r3, #4
 8009016:	2a00      	cmp	r2, #0
 8009018:	d1f0      	bne.n	8008ffc <quorem+0xf0>
 800901a:	3c01      	subs	r4, #1
 800901c:	e7eb      	b.n	8008ff6 <quorem+0xea>
 800901e:	2000      	movs	r0, #0
 8009020:	e7ee      	b.n	8009000 <quorem+0xf4>
 8009022:	0000      	movs	r0, r0
 8009024:	0000      	movs	r0, r0
	...

08009028 <_dtoa_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b02 	vpush	{d8}
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	b095      	sub	sp, #84	; 0x54
 8009036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800903c:	9105      	str	r1, [sp, #20]
 800903e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009042:	4604      	mov	r4, r0
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	930f      	str	r3, [sp, #60]	; 0x3c
 8009048:	b975      	cbnz	r5, 8009068 <_dtoa_r+0x40>
 800904a:	2010      	movs	r0, #16
 800904c:	f001 fa44 	bl	800a4d8 <malloc>
 8009050:	4602      	mov	r2, r0
 8009052:	6260      	str	r0, [r4, #36]	; 0x24
 8009054:	b920      	cbnz	r0, 8009060 <_dtoa_r+0x38>
 8009056:	4bb2      	ldr	r3, [pc, #712]	; (8009320 <_dtoa_r+0x2f8>)
 8009058:	21ea      	movs	r1, #234	; 0xea
 800905a:	48b2      	ldr	r0, [pc, #712]	; (8009324 <_dtoa_r+0x2fc>)
 800905c:	f002 fbde 	bl	800b81c <__assert_func>
 8009060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009064:	6005      	str	r5, [r0, #0]
 8009066:	60c5      	str	r5, [r0, #12]
 8009068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	b151      	cbz	r1, 8009084 <_dtoa_r+0x5c>
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	604a      	str	r2, [r1, #4]
 8009072:	2301      	movs	r3, #1
 8009074:	4093      	lsls	r3, r2
 8009076:	608b      	str	r3, [r1, #8]
 8009078:	4620      	mov	r0, r4
 800907a:	f001 fa95 	bl	800a5a8 <_Bfree>
 800907e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	1e3b      	subs	r3, r7, #0
 8009086:	bfb9      	ittee	lt
 8009088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800908c:	9303      	strlt	r3, [sp, #12]
 800908e:	2300      	movge	r3, #0
 8009090:	f8c8 3000 	strge.w	r3, [r8]
 8009094:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009098:	4ba3      	ldr	r3, [pc, #652]	; (8009328 <_dtoa_r+0x300>)
 800909a:	bfbc      	itt	lt
 800909c:	2201      	movlt	r2, #1
 800909e:	f8c8 2000 	strlt.w	r2, [r8]
 80090a2:	ea33 0309 	bics.w	r3, r3, r9
 80090a6:	d11b      	bne.n	80090e0 <_dtoa_r+0xb8>
 80090a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b4:	4333      	orrs	r3, r6
 80090b6:	f000 857a 	beq.w	8009bae <_dtoa_r+0xb86>
 80090ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090bc:	b963      	cbnz	r3, 80090d8 <_dtoa_r+0xb0>
 80090be:	4b9b      	ldr	r3, [pc, #620]	; (800932c <_dtoa_r+0x304>)
 80090c0:	e024      	b.n	800910c <_dtoa_r+0xe4>
 80090c2:	4b9b      	ldr	r3, [pc, #620]	; (8009330 <_dtoa_r+0x308>)
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	9800      	ldr	r0, [sp, #0]
 80090ce:	b015      	add	sp, #84	; 0x54
 80090d0:	ecbd 8b02 	vpop	{d8}
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	4b94      	ldr	r3, [pc, #592]	; (800932c <_dtoa_r+0x304>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	3303      	adds	r3, #3
 80090de:	e7f3      	b.n	80090c8 <_dtoa_r+0xa0>
 80090e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090e4:	2200      	movs	r2, #0
 80090e6:	ec51 0b17 	vmov	r0, r1, d7
 80090ea:	2300      	movs	r3, #0
 80090ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80090f0:	f7f7 fcfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80090f4:	4680      	mov	r8, r0
 80090f6:	b158      	cbz	r0, 8009110 <_dtoa_r+0xe8>
 80090f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090fa:	2301      	movs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 8551 	beq.w	8009ba8 <_dtoa_r+0xb80>
 8009106:	488b      	ldr	r0, [pc, #556]	; (8009334 <_dtoa_r+0x30c>)
 8009108:	6018      	str	r0, [r3, #0]
 800910a:	1e43      	subs	r3, r0, #1
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	e7dd      	b.n	80090cc <_dtoa_r+0xa4>
 8009110:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009114:	aa12      	add	r2, sp, #72	; 0x48
 8009116:	a913      	add	r1, sp, #76	; 0x4c
 8009118:	4620      	mov	r0, r4
 800911a:	f001 fded 	bl	800acf8 <__d2b>
 800911e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009122:	4683      	mov	fp, r0
 8009124:	2d00      	cmp	r5, #0
 8009126:	d07c      	beq.n	8009222 <_dtoa_r+0x1fa>
 8009128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800912e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009132:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009136:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800913a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800913e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009142:	4b7d      	ldr	r3, [pc, #500]	; (8009338 <_dtoa_r+0x310>)
 8009144:	2200      	movs	r2, #0
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 f8ad 	bl	80002a8 <__aeabi_dsub>
 800914e:	a36e      	add	r3, pc, #440	; (adr r3, 8009308 <_dtoa_r+0x2e0>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 fa60 	bl	8000618 <__aeabi_dmul>
 8009158:	a36d      	add	r3, pc, #436	; (adr r3, 8009310 <_dtoa_r+0x2e8>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 f8a5 	bl	80002ac <__adddf3>
 8009162:	4606      	mov	r6, r0
 8009164:	4628      	mov	r0, r5
 8009166:	460f      	mov	r7, r1
 8009168:	f7f7 f9ec 	bl	8000544 <__aeabi_i2d>
 800916c:	a36a      	add	r3, pc, #424	; (adr r3, 8009318 <_dtoa_r+0x2f0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 fa51 	bl	8000618 <__aeabi_dmul>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 f895 	bl	80002ac <__adddf3>
 8009182:	4606      	mov	r6, r0
 8009184:	460f      	mov	r7, r1
 8009186:	f7f7 fcf7 	bl	8000b78 <__aeabi_d2iz>
 800918a:	2200      	movs	r2, #0
 800918c:	4682      	mov	sl, r0
 800918e:	2300      	movs	r3, #0
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fcb2 	bl	8000afc <__aeabi_dcmplt>
 8009198:	b148      	cbz	r0, 80091ae <_dtoa_r+0x186>
 800919a:	4650      	mov	r0, sl
 800919c:	f7f7 f9d2 	bl	8000544 <__aeabi_i2d>
 80091a0:	4632      	mov	r2, r6
 80091a2:	463b      	mov	r3, r7
 80091a4:	f7f7 fca0 	bl	8000ae8 <__aeabi_dcmpeq>
 80091a8:	b908      	cbnz	r0, 80091ae <_dtoa_r+0x186>
 80091aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ae:	f1ba 0f16 	cmp.w	sl, #22
 80091b2:	d854      	bhi.n	800925e <_dtoa_r+0x236>
 80091b4:	4b61      	ldr	r3, [pc, #388]	; (800933c <_dtoa_r+0x314>)
 80091b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091c2:	f7f7 fc9b 	bl	8000afc <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d04b      	beq.n	8009262 <_dtoa_r+0x23a>
 80091ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ce:	2300      	movs	r3, #0
 80091d0:	930e      	str	r3, [sp, #56]	; 0x38
 80091d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091d4:	1b5d      	subs	r5, r3, r5
 80091d6:	1e6b      	subs	r3, r5, #1
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	bf43      	ittte	mi
 80091dc:	2300      	movmi	r3, #0
 80091de:	f1c5 0801 	rsbmi	r8, r5, #1
 80091e2:	9304      	strmi	r3, [sp, #16]
 80091e4:	f04f 0800 	movpl.w	r8, #0
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	db3b      	blt.n	8009266 <_dtoa_r+0x23e>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80091f4:	4453      	add	r3, sl
 80091f6:	9304      	str	r3, [sp, #16]
 80091f8:	2300      	movs	r3, #0
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	2b09      	cmp	r3, #9
 8009200:	d869      	bhi.n	80092d6 <_dtoa_r+0x2ae>
 8009202:	2b05      	cmp	r3, #5
 8009204:	bfc4      	itt	gt
 8009206:	3b04      	subgt	r3, #4
 8009208:	9305      	strgt	r3, [sp, #20]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	f1a3 0302 	sub.w	r3, r3, #2
 8009210:	bfcc      	ite	gt
 8009212:	2500      	movgt	r5, #0
 8009214:	2501      	movle	r5, #1
 8009216:	2b03      	cmp	r3, #3
 8009218:	d869      	bhi.n	80092ee <_dtoa_r+0x2c6>
 800921a:	e8df f003 	tbb	[pc, r3]
 800921e:	4e2c      	.short	0x4e2c
 8009220:	5a4c      	.short	0x5a4c
 8009222:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009226:	441d      	add	r5, r3
 8009228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800922c:	2b20      	cmp	r3, #32
 800922e:	bfc1      	itttt	gt
 8009230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009234:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009238:	fa09 f303 	lslgt.w	r3, r9, r3
 800923c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009240:	bfda      	itte	le
 8009242:	f1c3 0320 	rsble	r3, r3, #32
 8009246:	fa06 f003 	lslle.w	r0, r6, r3
 800924a:	4318      	orrgt	r0, r3
 800924c:	f7f7 f96a 	bl	8000524 <__aeabi_ui2d>
 8009250:	2301      	movs	r3, #1
 8009252:	4606      	mov	r6, r0
 8009254:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009258:	3d01      	subs	r5, #1
 800925a:	9310      	str	r3, [sp, #64]	; 0x40
 800925c:	e771      	b.n	8009142 <_dtoa_r+0x11a>
 800925e:	2301      	movs	r3, #1
 8009260:	e7b6      	b.n	80091d0 <_dtoa_r+0x1a8>
 8009262:	900e      	str	r0, [sp, #56]	; 0x38
 8009264:	e7b5      	b.n	80091d2 <_dtoa_r+0x1aa>
 8009266:	f1ca 0300 	rsb	r3, sl, #0
 800926a:	9306      	str	r3, [sp, #24]
 800926c:	2300      	movs	r3, #0
 800926e:	eba8 080a 	sub.w	r8, r8, sl
 8009272:	930d      	str	r3, [sp, #52]	; 0x34
 8009274:	e7c2      	b.n	80091fc <_dtoa_r+0x1d4>
 8009276:	2300      	movs	r3, #0
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc39      	bgt.n	80092f4 <_dtoa_r+0x2cc>
 8009280:	f04f 0901 	mov.w	r9, #1
 8009284:	f8cd 9004 	str.w	r9, [sp, #4]
 8009288:	464b      	mov	r3, r9
 800928a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800928e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009290:	2200      	movs	r2, #0
 8009292:	6042      	str	r2, [r0, #4]
 8009294:	2204      	movs	r2, #4
 8009296:	f102 0614 	add.w	r6, r2, #20
 800929a:	429e      	cmp	r6, r3
 800929c:	6841      	ldr	r1, [r0, #4]
 800929e:	d92f      	bls.n	8009300 <_dtoa_r+0x2d8>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f001 f941 	bl	800a528 <_Balloc>
 80092a6:	9000      	str	r0, [sp, #0]
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d14b      	bne.n	8009344 <_dtoa_r+0x31c>
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <_dtoa_r+0x318>)
 80092ae:	4602      	mov	r2, r0
 80092b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092b4:	e6d1      	b.n	800905a <_dtoa_r+0x32>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e7de      	b.n	8009278 <_dtoa_r+0x250>
 80092ba:	2300      	movs	r3, #0
 80092bc:	9308      	str	r3, [sp, #32]
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	eb0a 0903 	add.w	r9, sl, r3
 80092c4:	f109 0301 	add.w	r3, r9, #1
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	bfb8      	it	lt
 80092ce:	2301      	movlt	r3, #1
 80092d0:	e7dd      	b.n	800928e <_dtoa_r+0x266>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7f2      	b.n	80092bc <_dtoa_r+0x294>
 80092d6:	2501      	movs	r5, #1
 80092d8:	2300      	movs	r3, #0
 80092da:	9305      	str	r3, [sp, #20]
 80092dc:	9508      	str	r5, [sp, #32]
 80092de:	f04f 39ff 	mov.w	r9, #4294967295
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80092e8:	2312      	movs	r3, #18
 80092ea:	9209      	str	r2, [sp, #36]	; 0x24
 80092ec:	e7cf      	b.n	800928e <_dtoa_r+0x266>
 80092ee:	2301      	movs	r3, #1
 80092f0:	9308      	str	r3, [sp, #32]
 80092f2:	e7f4      	b.n	80092de <_dtoa_r+0x2b6>
 80092f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80092f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80092fc:	464b      	mov	r3, r9
 80092fe:	e7c6      	b.n	800928e <_dtoa_r+0x266>
 8009300:	3101      	adds	r1, #1
 8009302:	6041      	str	r1, [r0, #4]
 8009304:	0052      	lsls	r2, r2, #1
 8009306:	e7c6      	b.n	8009296 <_dtoa_r+0x26e>
 8009308:	636f4361 	.word	0x636f4361
 800930c:	3fd287a7 	.word	0x3fd287a7
 8009310:	8b60c8b3 	.word	0x8b60c8b3
 8009314:	3fc68a28 	.word	0x3fc68a28
 8009318:	509f79fb 	.word	0x509f79fb
 800931c:	3fd34413 	.word	0x3fd34413
 8009320:	0800be86 	.word	0x0800be86
 8009324:	0800be9d 	.word	0x0800be9d
 8009328:	7ff00000 	.word	0x7ff00000
 800932c:	0800be82 	.word	0x0800be82
 8009330:	0800be79 	.word	0x0800be79
 8009334:	0800bcfd 	.word	0x0800bcfd
 8009338:	3ff80000 	.word	0x3ff80000
 800933c:	0800c078 	.word	0x0800c078
 8009340:	0800befc 	.word	0x0800befc
 8009344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009346:	9a00      	ldr	r2, [sp, #0]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	2b0e      	cmp	r3, #14
 800934e:	f200 80ad 	bhi.w	80094ac <_dtoa_r+0x484>
 8009352:	2d00      	cmp	r5, #0
 8009354:	f000 80aa 	beq.w	80094ac <_dtoa_r+0x484>
 8009358:	f1ba 0f00 	cmp.w	sl, #0
 800935c:	dd36      	ble.n	80093cc <_dtoa_r+0x3a4>
 800935e:	4ac3      	ldr	r2, [pc, #780]	; (800966c <_dtoa_r+0x644>)
 8009360:	f00a 030f 	and.w	r3, sl, #15
 8009364:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009368:	ed93 7b00 	vldr	d7, [r3]
 800936c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009370:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009374:	eeb0 8a47 	vmov.f32	s16, s14
 8009378:	eef0 8a67 	vmov.f32	s17, s15
 800937c:	d016      	beq.n	80093ac <_dtoa_r+0x384>
 800937e:	4bbc      	ldr	r3, [pc, #752]	; (8009670 <_dtoa_r+0x648>)
 8009380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009388:	f7f7 fa70 	bl	800086c <__aeabi_ddiv>
 800938c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009390:	f007 070f 	and.w	r7, r7, #15
 8009394:	2503      	movs	r5, #3
 8009396:	4eb6      	ldr	r6, [pc, #728]	; (8009670 <_dtoa_r+0x648>)
 8009398:	b957      	cbnz	r7, 80093b0 <_dtoa_r+0x388>
 800939a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939e:	ec53 2b18 	vmov	r2, r3, d8
 80093a2:	f7f7 fa63 	bl	800086c <__aeabi_ddiv>
 80093a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093aa:	e029      	b.n	8009400 <_dtoa_r+0x3d8>
 80093ac:	2502      	movs	r5, #2
 80093ae:	e7f2      	b.n	8009396 <_dtoa_r+0x36e>
 80093b0:	07f9      	lsls	r1, r7, #31
 80093b2:	d508      	bpl.n	80093c6 <_dtoa_r+0x39e>
 80093b4:	ec51 0b18 	vmov	r0, r1, d8
 80093b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093bc:	f7f7 f92c 	bl	8000618 <__aeabi_dmul>
 80093c0:	ec41 0b18 	vmov	d8, r0, r1
 80093c4:	3501      	adds	r5, #1
 80093c6:	107f      	asrs	r7, r7, #1
 80093c8:	3608      	adds	r6, #8
 80093ca:	e7e5      	b.n	8009398 <_dtoa_r+0x370>
 80093cc:	f000 80a6 	beq.w	800951c <_dtoa_r+0x4f4>
 80093d0:	f1ca 0600 	rsb	r6, sl, #0
 80093d4:	4ba5      	ldr	r3, [pc, #660]	; (800966c <_dtoa_r+0x644>)
 80093d6:	4fa6      	ldr	r7, [pc, #664]	; (8009670 <_dtoa_r+0x648>)
 80093d8:	f006 020f 	and.w	r2, r6, #15
 80093dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093e8:	f7f7 f916 	bl	8000618 <__aeabi_dmul>
 80093ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f0:	1136      	asrs	r6, r6, #4
 80093f2:	2300      	movs	r3, #0
 80093f4:	2502      	movs	r5, #2
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	f040 8085 	bne.w	8009506 <_dtoa_r+0x4de>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1d2      	bne.n	80093a6 <_dtoa_r+0x37e>
 8009400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 808c 	beq.w	8009520 <_dtoa_r+0x4f8>
 8009408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800940c:	4b99      	ldr	r3, [pc, #612]	; (8009674 <_dtoa_r+0x64c>)
 800940e:	2200      	movs	r2, #0
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f7 fb72 	bl	8000afc <__aeabi_dcmplt>
 8009418:	2800      	cmp	r0, #0
 800941a:	f000 8081 	beq.w	8009520 <_dtoa_r+0x4f8>
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d07d      	beq.n	8009520 <_dtoa_r+0x4f8>
 8009424:	f1b9 0f00 	cmp.w	r9, #0
 8009428:	dd3c      	ble.n	80094a4 <_dtoa_r+0x47c>
 800942a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	2200      	movs	r2, #0
 8009432:	4b91      	ldr	r3, [pc, #580]	; (8009678 <_dtoa_r+0x650>)
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 f8ee 	bl	8000618 <__aeabi_dmul>
 800943c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009440:	3501      	adds	r5, #1
 8009442:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009446:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800944a:	4628      	mov	r0, r5
 800944c:	f7f7 f87a 	bl	8000544 <__aeabi_i2d>
 8009450:	4632      	mov	r2, r6
 8009452:	463b      	mov	r3, r7
 8009454:	f7f7 f8e0 	bl	8000618 <__aeabi_dmul>
 8009458:	4b88      	ldr	r3, [pc, #544]	; (800967c <_dtoa_r+0x654>)
 800945a:	2200      	movs	r2, #0
 800945c:	f7f6 ff26 	bl	80002ac <__adddf3>
 8009460:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	d15c      	bne.n	800952a <_dtoa_r+0x502>
 8009470:	4b83      	ldr	r3, [pc, #524]	; (8009680 <_dtoa_r+0x658>)
 8009472:	2200      	movs	r2, #0
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f7f6 ff16 	bl	80002a8 <__aeabi_dsub>
 800947c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009480:	4606      	mov	r6, r0
 8009482:	460f      	mov	r7, r1
 8009484:	f7f7 fb58 	bl	8000b38 <__aeabi_dcmpgt>
 8009488:	2800      	cmp	r0, #0
 800948a:	f040 8296 	bne.w	80099ba <_dtoa_r+0x992>
 800948e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009492:	4630      	mov	r0, r6
 8009494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 fb2f 	bl	8000afc <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f040 8288 	bne.w	80099b4 <_dtoa_r+0x98c>
 80094a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f2c0 8158 	blt.w	8009764 <_dtoa_r+0x73c>
 80094b4:	f1ba 0f0e 	cmp.w	sl, #14
 80094b8:	f300 8154 	bgt.w	8009764 <_dtoa_r+0x73c>
 80094bc:	4b6b      	ldr	r3, [pc, #428]	; (800966c <_dtoa_r+0x644>)
 80094be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f280 80e3 	bge.w	8009694 <_dtoa_r+0x66c>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f300 80df 	bgt.w	8009694 <_dtoa_r+0x66c>
 80094d6:	f040 826d 	bne.w	80099b4 <_dtoa_r+0x98c>
 80094da:	4b69      	ldr	r3, [pc, #420]	; (8009680 <_dtoa_r+0x658>)
 80094dc:	2200      	movs	r2, #0
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f7 f899 	bl	8000618 <__aeabi_dmul>
 80094e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ea:	f7f7 fb1b 	bl	8000b24 <__aeabi_dcmpge>
 80094ee:	9e01      	ldr	r6, [sp, #4]
 80094f0:	4637      	mov	r7, r6
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f040 8243 	bne.w	800997e <_dtoa_r+0x956>
 80094f8:	9d00      	ldr	r5, [sp, #0]
 80094fa:	2331      	movs	r3, #49	; 0x31
 80094fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009500:	f10a 0a01 	add.w	sl, sl, #1
 8009504:	e23f      	b.n	8009986 <_dtoa_r+0x95e>
 8009506:	07f2      	lsls	r2, r6, #31
 8009508:	d505      	bpl.n	8009516 <_dtoa_r+0x4ee>
 800950a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800950e:	f7f7 f883 	bl	8000618 <__aeabi_dmul>
 8009512:	3501      	adds	r5, #1
 8009514:	2301      	movs	r3, #1
 8009516:	1076      	asrs	r6, r6, #1
 8009518:	3708      	adds	r7, #8
 800951a:	e76c      	b.n	80093f6 <_dtoa_r+0x3ce>
 800951c:	2502      	movs	r5, #2
 800951e:	e76f      	b.n	8009400 <_dtoa_r+0x3d8>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f8cd a01c 	str.w	sl, [sp, #28]
 8009526:	930c      	str	r3, [sp, #48]	; 0x30
 8009528:	e78d      	b.n	8009446 <_dtoa_r+0x41e>
 800952a:	9900      	ldr	r1, [sp, #0]
 800952c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800952e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009530:	4b4e      	ldr	r3, [pc, #312]	; (800966c <_dtoa_r+0x644>)
 8009532:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009536:	4401      	add	r1, r0
 8009538:	9102      	str	r1, [sp, #8]
 800953a:	9908      	ldr	r1, [sp, #32]
 800953c:	eeb0 8a47 	vmov.f32	s16, s14
 8009540:	eef0 8a67 	vmov.f32	s17, s15
 8009544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009548:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800954c:	2900      	cmp	r1, #0
 800954e:	d045      	beq.n	80095dc <_dtoa_r+0x5b4>
 8009550:	494c      	ldr	r1, [pc, #304]	; (8009684 <_dtoa_r+0x65c>)
 8009552:	2000      	movs	r0, #0
 8009554:	f7f7 f98a 	bl	800086c <__aeabi_ddiv>
 8009558:	ec53 2b18 	vmov	r2, r3, d8
 800955c:	f7f6 fea4 	bl	80002a8 <__aeabi_dsub>
 8009560:	9d00      	ldr	r5, [sp, #0]
 8009562:	ec41 0b18 	vmov	d8, r0, r1
 8009566:	4639      	mov	r1, r7
 8009568:	4630      	mov	r0, r6
 800956a:	f7f7 fb05 	bl	8000b78 <__aeabi_d2iz>
 800956e:	900c      	str	r0, [sp, #48]	; 0x30
 8009570:	f7f6 ffe8 	bl	8000544 <__aeabi_i2d>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f6 fe94 	bl	80002a8 <__aeabi_dsub>
 8009580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009582:	3330      	adds	r3, #48	; 0x30
 8009584:	f805 3b01 	strb.w	r3, [r5], #1
 8009588:	ec53 2b18 	vmov	r2, r3, d8
 800958c:	4606      	mov	r6, r0
 800958e:	460f      	mov	r7, r1
 8009590:	f7f7 fab4 	bl	8000afc <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	d165      	bne.n	8009664 <_dtoa_r+0x63c>
 8009598:	4632      	mov	r2, r6
 800959a:	463b      	mov	r3, r7
 800959c:	4935      	ldr	r1, [pc, #212]	; (8009674 <_dtoa_r+0x64c>)
 800959e:	2000      	movs	r0, #0
 80095a0:	f7f6 fe82 	bl	80002a8 <__aeabi_dsub>
 80095a4:	ec53 2b18 	vmov	r2, r3, d8
 80095a8:	f7f7 faa8 	bl	8000afc <__aeabi_dcmplt>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f040 80b9 	bne.w	8009724 <_dtoa_r+0x6fc>
 80095b2:	9b02      	ldr	r3, [sp, #8]
 80095b4:	429d      	cmp	r5, r3
 80095b6:	f43f af75 	beq.w	80094a4 <_dtoa_r+0x47c>
 80095ba:	4b2f      	ldr	r3, [pc, #188]	; (8009678 <_dtoa_r+0x650>)
 80095bc:	ec51 0b18 	vmov	r0, r1, d8
 80095c0:	2200      	movs	r2, #0
 80095c2:	f7f7 f829 	bl	8000618 <__aeabi_dmul>
 80095c6:	4b2c      	ldr	r3, [pc, #176]	; (8009678 <_dtoa_r+0x650>)
 80095c8:	ec41 0b18 	vmov	d8, r0, r1
 80095cc:	2200      	movs	r2, #0
 80095ce:	4630      	mov	r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	f7f7 f821 	bl	8000618 <__aeabi_dmul>
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	e7c4      	b.n	8009566 <_dtoa_r+0x53e>
 80095dc:	ec51 0b17 	vmov	r0, r1, d7
 80095e0:	f7f7 f81a 	bl	8000618 <__aeabi_dmul>
 80095e4:	9b02      	ldr	r3, [sp, #8]
 80095e6:	9d00      	ldr	r5, [sp, #0]
 80095e8:	930c      	str	r3, [sp, #48]	; 0x30
 80095ea:	ec41 0b18 	vmov	d8, r0, r1
 80095ee:	4639      	mov	r1, r7
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7f7 fac1 	bl	8000b78 <__aeabi_d2iz>
 80095f6:	9011      	str	r0, [sp, #68]	; 0x44
 80095f8:	f7f6 ffa4 	bl	8000544 <__aeabi_i2d>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f6 fe50 	bl	80002a8 <__aeabi_dsub>
 8009608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800960a:	3330      	adds	r3, #48	; 0x30
 800960c:	f805 3b01 	strb.w	r3, [r5], #1
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	429d      	cmp	r5, r3
 8009614:	4606      	mov	r6, r0
 8009616:	460f      	mov	r7, r1
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	d134      	bne.n	8009688 <_dtoa_r+0x660>
 800961e:	4b19      	ldr	r3, [pc, #100]	; (8009684 <_dtoa_r+0x65c>)
 8009620:	ec51 0b18 	vmov	r0, r1, d8
 8009624:	f7f6 fe42 	bl	80002ac <__adddf3>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4630      	mov	r0, r6
 800962e:	4639      	mov	r1, r7
 8009630:	f7f7 fa82 	bl	8000b38 <__aeabi_dcmpgt>
 8009634:	2800      	cmp	r0, #0
 8009636:	d175      	bne.n	8009724 <_dtoa_r+0x6fc>
 8009638:	ec53 2b18 	vmov	r2, r3, d8
 800963c:	4911      	ldr	r1, [pc, #68]	; (8009684 <_dtoa_r+0x65c>)
 800963e:	2000      	movs	r0, #0
 8009640:	f7f6 fe32 	bl	80002a8 <__aeabi_dsub>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fa56 	bl	8000afc <__aeabi_dcmplt>
 8009650:	2800      	cmp	r0, #0
 8009652:	f43f af27 	beq.w	80094a4 <_dtoa_r+0x47c>
 8009656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009658:	1e6b      	subs	r3, r5, #1
 800965a:	930c      	str	r3, [sp, #48]	; 0x30
 800965c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009660:	2b30      	cmp	r3, #48	; 0x30
 8009662:	d0f8      	beq.n	8009656 <_dtoa_r+0x62e>
 8009664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009668:	e04a      	b.n	8009700 <_dtoa_r+0x6d8>
 800966a:	bf00      	nop
 800966c:	0800c078 	.word	0x0800c078
 8009670:	0800c050 	.word	0x0800c050
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	40240000 	.word	0x40240000
 800967c:	401c0000 	.word	0x401c0000
 8009680:	40140000 	.word	0x40140000
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	4baf      	ldr	r3, [pc, #700]	; (8009948 <_dtoa_r+0x920>)
 800968a:	f7f6 ffc5 	bl	8000618 <__aeabi_dmul>
 800968e:	4606      	mov	r6, r0
 8009690:	460f      	mov	r7, r1
 8009692:	e7ac      	b.n	80095ee <_dtoa_r+0x5c6>
 8009694:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009698:	9d00      	ldr	r5, [sp, #0]
 800969a:	4642      	mov	r2, r8
 800969c:	464b      	mov	r3, r9
 800969e:	4630      	mov	r0, r6
 80096a0:	4639      	mov	r1, r7
 80096a2:	f7f7 f8e3 	bl	800086c <__aeabi_ddiv>
 80096a6:	f7f7 fa67 	bl	8000b78 <__aeabi_d2iz>
 80096aa:	9002      	str	r0, [sp, #8]
 80096ac:	f7f6 ff4a 	bl	8000544 <__aeabi_i2d>
 80096b0:	4642      	mov	r2, r8
 80096b2:	464b      	mov	r3, r9
 80096b4:	f7f6 ffb0 	bl	8000618 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fdf2 	bl	80002a8 <__aeabi_dsub>
 80096c4:	9e02      	ldr	r6, [sp, #8]
 80096c6:	9f01      	ldr	r7, [sp, #4]
 80096c8:	3630      	adds	r6, #48	; 0x30
 80096ca:	f805 6b01 	strb.w	r6, [r5], #1
 80096ce:	9e00      	ldr	r6, [sp, #0]
 80096d0:	1bae      	subs	r6, r5, r6
 80096d2:	42b7      	cmp	r7, r6
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	d137      	bne.n	800974a <_dtoa_r+0x722>
 80096da:	f7f6 fde7 	bl	80002ac <__adddf3>
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	4606      	mov	r6, r0
 80096e4:	460f      	mov	r7, r1
 80096e6:	f7f7 fa27 	bl	8000b38 <__aeabi_dcmpgt>
 80096ea:	b9c8      	cbnz	r0, 8009720 <_dtoa_r+0x6f8>
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f7 f9f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80096f8:	b110      	cbz	r0, 8009700 <_dtoa_r+0x6d8>
 80096fa:	9b02      	ldr	r3, [sp, #8]
 80096fc:	07d9      	lsls	r1, r3, #31
 80096fe:	d40f      	bmi.n	8009720 <_dtoa_r+0x6f8>
 8009700:	4620      	mov	r0, r4
 8009702:	4659      	mov	r1, fp
 8009704:	f000 ff50 	bl	800a5a8 <_Bfree>
 8009708:	2300      	movs	r3, #0
 800970a:	702b      	strb	r3, [r5, #0]
 800970c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970e:	f10a 0001 	add.w	r0, sl, #1
 8009712:	6018      	str	r0, [r3, #0]
 8009714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f acd8 	beq.w	80090cc <_dtoa_r+0xa4>
 800971c:	601d      	str	r5, [r3, #0]
 800971e:	e4d5      	b.n	80090cc <_dtoa_r+0xa4>
 8009720:	f8cd a01c 	str.w	sl, [sp, #28]
 8009724:	462b      	mov	r3, r5
 8009726:	461d      	mov	r5, r3
 8009728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800972c:	2a39      	cmp	r2, #57	; 0x39
 800972e:	d108      	bne.n	8009742 <_dtoa_r+0x71a>
 8009730:	9a00      	ldr	r2, [sp, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d1f7      	bne.n	8009726 <_dtoa_r+0x6fe>
 8009736:	9a07      	ldr	r2, [sp, #28]
 8009738:	9900      	ldr	r1, [sp, #0]
 800973a:	3201      	adds	r2, #1
 800973c:	9207      	str	r2, [sp, #28]
 800973e:	2230      	movs	r2, #48	; 0x30
 8009740:	700a      	strb	r2, [r1, #0]
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	3201      	adds	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	e78c      	b.n	8009664 <_dtoa_r+0x63c>
 800974a:	4b7f      	ldr	r3, [pc, #508]	; (8009948 <_dtoa_r+0x920>)
 800974c:	2200      	movs	r2, #0
 800974e:	f7f6 ff63 	bl	8000618 <__aeabi_dmul>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	f7f7 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800975e:	2800      	cmp	r0, #0
 8009760:	d09b      	beq.n	800969a <_dtoa_r+0x672>
 8009762:	e7cd      	b.n	8009700 <_dtoa_r+0x6d8>
 8009764:	9a08      	ldr	r2, [sp, #32]
 8009766:	2a00      	cmp	r2, #0
 8009768:	f000 80c4 	beq.w	80098f4 <_dtoa_r+0x8cc>
 800976c:	9a05      	ldr	r2, [sp, #20]
 800976e:	2a01      	cmp	r2, #1
 8009770:	f300 80a8 	bgt.w	80098c4 <_dtoa_r+0x89c>
 8009774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009776:	2a00      	cmp	r2, #0
 8009778:	f000 80a0 	beq.w	80098bc <_dtoa_r+0x894>
 800977c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009780:	9e06      	ldr	r6, [sp, #24]
 8009782:	4645      	mov	r5, r8
 8009784:	9a04      	ldr	r2, [sp, #16]
 8009786:	2101      	movs	r1, #1
 8009788:	441a      	add	r2, r3
 800978a:	4620      	mov	r0, r4
 800978c:	4498      	add	r8, r3
 800978e:	9204      	str	r2, [sp, #16]
 8009790:	f001 f810 	bl	800a7b4 <__i2b>
 8009794:	4607      	mov	r7, r0
 8009796:	2d00      	cmp	r5, #0
 8009798:	dd0b      	ble.n	80097b2 <_dtoa_r+0x78a>
 800979a:	9b04      	ldr	r3, [sp, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd08      	ble.n	80097b2 <_dtoa_r+0x78a>
 80097a0:	42ab      	cmp	r3, r5
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	bfa8      	it	ge
 80097a6:	462b      	movge	r3, r5
 80097a8:	eba8 0803 	sub.w	r8, r8, r3
 80097ac:	1aed      	subs	r5, r5, r3
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	9b06      	ldr	r3, [sp, #24]
 80097b4:	b1fb      	cbz	r3, 80097f6 <_dtoa_r+0x7ce>
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 809f 	beq.w	80098fc <_dtoa_r+0x8d4>
 80097be:	2e00      	cmp	r6, #0
 80097c0:	dd11      	ble.n	80097e6 <_dtoa_r+0x7be>
 80097c2:	4639      	mov	r1, r7
 80097c4:	4632      	mov	r2, r6
 80097c6:	4620      	mov	r0, r4
 80097c8:	f001 f8b0 	bl	800a92c <__pow5mult>
 80097cc:	465a      	mov	r2, fp
 80097ce:	4601      	mov	r1, r0
 80097d0:	4607      	mov	r7, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	f001 f804 	bl	800a7e0 <__multiply>
 80097d8:	4659      	mov	r1, fp
 80097da:	9007      	str	r0, [sp, #28]
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 fee3 	bl	800a5a8 <_Bfree>
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	469b      	mov	fp, r3
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	1b9a      	subs	r2, r3, r6
 80097ea:	d004      	beq.n	80097f6 <_dtoa_r+0x7ce>
 80097ec:	4659      	mov	r1, fp
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 f89c 	bl	800a92c <__pow5mult>
 80097f4:	4683      	mov	fp, r0
 80097f6:	2101      	movs	r1, #1
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 ffdb 	bl	800a7b4 <__i2b>
 80097fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009800:	2b00      	cmp	r3, #0
 8009802:	4606      	mov	r6, r0
 8009804:	dd7c      	ble.n	8009900 <_dtoa_r+0x8d8>
 8009806:	461a      	mov	r2, r3
 8009808:	4601      	mov	r1, r0
 800980a:	4620      	mov	r0, r4
 800980c:	f001 f88e 	bl	800a92c <__pow5mult>
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	2b01      	cmp	r3, #1
 8009814:	4606      	mov	r6, r0
 8009816:	dd76      	ble.n	8009906 <_dtoa_r+0x8de>
 8009818:	2300      	movs	r3, #0
 800981a:	9306      	str	r3, [sp, #24]
 800981c:	6933      	ldr	r3, [r6, #16]
 800981e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009822:	6918      	ldr	r0, [r3, #16]
 8009824:	f000 ff76 	bl	800a714 <__hi0bits>
 8009828:	f1c0 0020 	rsb	r0, r0, #32
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	4418      	add	r0, r3
 8009830:	f010 001f 	ands.w	r0, r0, #31
 8009834:	f000 8086 	beq.w	8009944 <_dtoa_r+0x91c>
 8009838:	f1c0 0320 	rsb	r3, r0, #32
 800983c:	2b04      	cmp	r3, #4
 800983e:	dd7f      	ble.n	8009940 <_dtoa_r+0x918>
 8009840:	f1c0 001c 	rsb	r0, r0, #28
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	4403      	add	r3, r0
 8009848:	4480      	add	r8, r0
 800984a:	4405      	add	r5, r0
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	f1b8 0f00 	cmp.w	r8, #0
 8009852:	dd05      	ble.n	8009860 <_dtoa_r+0x838>
 8009854:	4659      	mov	r1, fp
 8009856:	4642      	mov	r2, r8
 8009858:	4620      	mov	r0, r4
 800985a:	f001 f8c1 	bl	800a9e0 <__lshift>
 800985e:	4683      	mov	fp, r0
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	dd05      	ble.n	8009872 <_dtoa_r+0x84a>
 8009866:	4631      	mov	r1, r6
 8009868:	461a      	mov	r2, r3
 800986a:	4620      	mov	r0, r4
 800986c:	f001 f8b8 	bl	800a9e0 <__lshift>
 8009870:	4606      	mov	r6, r0
 8009872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009874:	2b00      	cmp	r3, #0
 8009876:	d069      	beq.n	800994c <_dtoa_r+0x924>
 8009878:	4631      	mov	r1, r6
 800987a:	4658      	mov	r0, fp
 800987c:	f001 f91c 	bl	800aab8 <__mcmp>
 8009880:	2800      	cmp	r0, #0
 8009882:	da63      	bge.n	800994c <_dtoa_r+0x924>
 8009884:	2300      	movs	r3, #0
 8009886:	4659      	mov	r1, fp
 8009888:	220a      	movs	r2, #10
 800988a:	4620      	mov	r0, r4
 800988c:	f000 feae 	bl	800a5ec <__multadd>
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009896:	4683      	mov	fp, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 818f 	beq.w	8009bbc <_dtoa_r+0xb94>
 800989e:	4639      	mov	r1, r7
 80098a0:	2300      	movs	r3, #0
 80098a2:	220a      	movs	r2, #10
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fea1 	bl	800a5ec <__multadd>
 80098aa:	f1b9 0f00 	cmp.w	r9, #0
 80098ae:	4607      	mov	r7, r0
 80098b0:	f300 808e 	bgt.w	80099d0 <_dtoa_r+0x9a8>
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	dc50      	bgt.n	800995c <_dtoa_r+0x934>
 80098ba:	e089      	b.n	80099d0 <_dtoa_r+0x9a8>
 80098bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098c2:	e75d      	b.n	8009780 <_dtoa_r+0x758>
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	1e5e      	subs	r6, r3, #1
 80098c8:	9b06      	ldr	r3, [sp, #24]
 80098ca:	42b3      	cmp	r3, r6
 80098cc:	bfbf      	itttt	lt
 80098ce:	9b06      	ldrlt	r3, [sp, #24]
 80098d0:	9606      	strlt	r6, [sp, #24]
 80098d2:	1af2      	sublt	r2, r6, r3
 80098d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80098d6:	bfb6      	itet	lt
 80098d8:	189b      	addlt	r3, r3, r2
 80098da:	1b9e      	subge	r6, r3, r6
 80098dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	bfb8      	it	lt
 80098e2:	2600      	movlt	r6, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfb5      	itete	lt
 80098e8:	eba8 0503 	sublt.w	r5, r8, r3
 80098ec:	9b01      	ldrge	r3, [sp, #4]
 80098ee:	2300      	movlt	r3, #0
 80098f0:	4645      	movge	r5, r8
 80098f2:	e747      	b.n	8009784 <_dtoa_r+0x75c>
 80098f4:	9e06      	ldr	r6, [sp, #24]
 80098f6:	9f08      	ldr	r7, [sp, #32]
 80098f8:	4645      	mov	r5, r8
 80098fa:	e74c      	b.n	8009796 <_dtoa_r+0x76e>
 80098fc:	9a06      	ldr	r2, [sp, #24]
 80098fe:	e775      	b.n	80097ec <_dtoa_r+0x7c4>
 8009900:	9b05      	ldr	r3, [sp, #20]
 8009902:	2b01      	cmp	r3, #1
 8009904:	dc18      	bgt.n	8009938 <_dtoa_r+0x910>
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	b9b3      	cbnz	r3, 8009938 <_dtoa_r+0x910>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009910:	b9a3      	cbnz	r3, 800993c <_dtoa_r+0x914>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	051b      	lsls	r3, r3, #20
 800991c:	b12b      	cbz	r3, 800992a <_dtoa_r+0x902>
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	3301      	adds	r3, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	f108 0801 	add.w	r8, r8, #1
 8009928:	2301      	movs	r3, #1
 800992a:	9306      	str	r3, [sp, #24]
 800992c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992e:	2b00      	cmp	r3, #0
 8009930:	f47f af74 	bne.w	800981c <_dtoa_r+0x7f4>
 8009934:	2001      	movs	r0, #1
 8009936:	e779      	b.n	800982c <_dtoa_r+0x804>
 8009938:	2300      	movs	r3, #0
 800993a:	e7f6      	b.n	800992a <_dtoa_r+0x902>
 800993c:	9b02      	ldr	r3, [sp, #8]
 800993e:	e7f4      	b.n	800992a <_dtoa_r+0x902>
 8009940:	d085      	beq.n	800984e <_dtoa_r+0x826>
 8009942:	4618      	mov	r0, r3
 8009944:	301c      	adds	r0, #28
 8009946:	e77d      	b.n	8009844 <_dtoa_r+0x81c>
 8009948:	40240000 	.word	0x40240000
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	dc38      	bgt.n	80099c4 <_dtoa_r+0x99c>
 8009952:	9b05      	ldr	r3, [sp, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	dd35      	ble.n	80099c4 <_dtoa_r+0x99c>
 8009958:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800995c:	f1b9 0f00 	cmp.w	r9, #0
 8009960:	d10d      	bne.n	800997e <_dtoa_r+0x956>
 8009962:	4631      	mov	r1, r6
 8009964:	464b      	mov	r3, r9
 8009966:	2205      	movs	r2, #5
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fe3f 	bl	800a5ec <__multadd>
 800996e:	4601      	mov	r1, r0
 8009970:	4606      	mov	r6, r0
 8009972:	4658      	mov	r0, fp
 8009974:	f001 f8a0 	bl	800aab8 <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	f73f adbd 	bgt.w	80094f8 <_dtoa_r+0x4d0>
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	9d00      	ldr	r5, [sp, #0]
 8009982:	ea6f 0a03 	mvn.w	sl, r3
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	4631      	mov	r1, r6
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fe0b 	bl	800a5a8 <_Bfree>
 8009992:	2f00      	cmp	r7, #0
 8009994:	f43f aeb4 	beq.w	8009700 <_dtoa_r+0x6d8>
 8009998:	f1b8 0f00 	cmp.w	r8, #0
 800999c:	d005      	beq.n	80099aa <_dtoa_r+0x982>
 800999e:	45b8      	cmp	r8, r7
 80099a0:	d003      	beq.n	80099aa <_dtoa_r+0x982>
 80099a2:	4641      	mov	r1, r8
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fdff 	bl	800a5a8 <_Bfree>
 80099aa:	4639      	mov	r1, r7
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fdfb 	bl	800a5a8 <_Bfree>
 80099b2:	e6a5      	b.n	8009700 <_dtoa_r+0x6d8>
 80099b4:	2600      	movs	r6, #0
 80099b6:	4637      	mov	r7, r6
 80099b8:	e7e1      	b.n	800997e <_dtoa_r+0x956>
 80099ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80099bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099c0:	4637      	mov	r7, r6
 80099c2:	e599      	b.n	80094f8 <_dtoa_r+0x4d0>
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80fd 	beq.w	8009bca <_dtoa_r+0xba2>
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	dd05      	ble.n	80099e0 <_dtoa_r+0x9b8>
 80099d4:	4639      	mov	r1, r7
 80099d6:	462a      	mov	r2, r5
 80099d8:	4620      	mov	r0, r4
 80099da:	f001 f801 	bl	800a9e0 <__lshift>
 80099de:	4607      	mov	r7, r0
 80099e0:	9b06      	ldr	r3, [sp, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d05c      	beq.n	8009aa0 <_dtoa_r+0xa78>
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fd9d 	bl	800a528 <_Balloc>
 80099ee:	4605      	mov	r5, r0
 80099f0:	b928      	cbnz	r0, 80099fe <_dtoa_r+0x9d6>
 80099f2:	4b80      	ldr	r3, [pc, #512]	; (8009bf4 <_dtoa_r+0xbcc>)
 80099f4:	4602      	mov	r2, r0
 80099f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099fa:	f7ff bb2e 	b.w	800905a <_dtoa_r+0x32>
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	3202      	adds	r2, #2
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	f107 010c 	add.w	r1, r7, #12
 8009a08:	300c      	adds	r0, #12
 8009a0a:	f000 fd7f 	bl	800a50c <memcpy>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4629      	mov	r1, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 ffe4 	bl	800a9e0 <__lshift>
 8009a18:	9b00      	ldr	r3, [sp, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	444b      	add	r3, r9
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	46b8      	mov	r8, r7
 8009a2c:	9306      	str	r3, [sp, #24]
 8009a2e:	4607      	mov	r7, r0
 8009a30:	9b01      	ldr	r3, [sp, #4]
 8009a32:	4631      	mov	r1, r6
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4658      	mov	r0, fp
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	f7ff fa67 	bl	8008f0c <quorem>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	3330      	adds	r3, #48	; 0x30
 8009a42:	9004      	str	r0, [sp, #16]
 8009a44:	4641      	mov	r1, r8
 8009a46:	4658      	mov	r0, fp
 8009a48:	9308      	str	r3, [sp, #32]
 8009a4a:	f001 f835 	bl	800aab8 <__mcmp>
 8009a4e:	463a      	mov	r2, r7
 8009a50:	4681      	mov	r9, r0
 8009a52:	4631      	mov	r1, r6
 8009a54:	4620      	mov	r0, r4
 8009a56:	f001 f84b 	bl	800aaf0 <__mdiff>
 8009a5a:	68c2      	ldr	r2, [r0, #12]
 8009a5c:	9b08      	ldr	r3, [sp, #32]
 8009a5e:	4605      	mov	r5, r0
 8009a60:	bb02      	cbnz	r2, 8009aa4 <_dtoa_r+0xa7c>
 8009a62:	4601      	mov	r1, r0
 8009a64:	4658      	mov	r0, fp
 8009a66:	f001 f827 	bl	800aab8 <__mcmp>
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4620      	mov	r0, r4
 8009a72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a76:	f000 fd97 	bl	800a5a8 <_Bfree>
 8009a7a:	9b05      	ldr	r3, [sp, #20]
 8009a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7e:	9d01      	ldr	r5, [sp, #4]
 8009a80:	ea43 0102 	orr.w	r1, r3, r2
 8009a84:	9b06      	ldr	r3, [sp, #24]
 8009a86:	430b      	orrs	r3, r1
 8009a88:	9b08      	ldr	r3, [sp, #32]
 8009a8a:	d10d      	bne.n	8009aa8 <_dtoa_r+0xa80>
 8009a8c:	2b39      	cmp	r3, #57	; 0x39
 8009a8e:	d029      	beq.n	8009ae4 <_dtoa_r+0xabc>
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	dd01      	ble.n	8009a9a <_dtoa_r+0xa72>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	3331      	adds	r3, #49	; 0x31
 8009a9a:	9a02      	ldr	r2, [sp, #8]
 8009a9c:	7013      	strb	r3, [r2, #0]
 8009a9e:	e774      	b.n	800998a <_dtoa_r+0x962>
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	e7b9      	b.n	8009a18 <_dtoa_r+0x9f0>
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	e7e2      	b.n	8009a6e <_dtoa_r+0xa46>
 8009aa8:	f1b9 0f00 	cmp.w	r9, #0
 8009aac:	db06      	blt.n	8009abc <_dtoa_r+0xa94>
 8009aae:	9905      	ldr	r1, [sp, #20]
 8009ab0:	ea41 0909 	orr.w	r9, r1, r9
 8009ab4:	9906      	ldr	r1, [sp, #24]
 8009ab6:	ea59 0101 	orrs.w	r1, r9, r1
 8009aba:	d120      	bne.n	8009afe <_dtoa_r+0xad6>
 8009abc:	2a00      	cmp	r2, #0
 8009abe:	ddec      	ble.n	8009a9a <_dtoa_r+0xa72>
 8009ac0:	4659      	mov	r1, fp
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	f000 ff8a 	bl	800a9e0 <__lshift>
 8009acc:	4631      	mov	r1, r6
 8009ace:	4683      	mov	fp, r0
 8009ad0:	f000 fff2 	bl	800aab8 <__mcmp>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	dc02      	bgt.n	8009ae0 <_dtoa_r+0xab8>
 8009ada:	d1de      	bne.n	8009a9a <_dtoa_r+0xa72>
 8009adc:	07da      	lsls	r2, r3, #31
 8009ade:	d5dc      	bpl.n	8009a9a <_dtoa_r+0xa72>
 8009ae0:	2b39      	cmp	r3, #57	; 0x39
 8009ae2:	d1d8      	bne.n	8009a96 <_dtoa_r+0xa6e>
 8009ae4:	9a02      	ldr	r2, [sp, #8]
 8009ae6:	2339      	movs	r3, #57	; 0x39
 8009ae8:	7013      	strb	r3, [r2, #0]
 8009aea:	462b      	mov	r3, r5
 8009aec:	461d      	mov	r5, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009af4:	2a39      	cmp	r2, #57	; 0x39
 8009af6:	d050      	beq.n	8009b9a <_dtoa_r+0xb72>
 8009af8:	3201      	adds	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	e745      	b.n	800998a <_dtoa_r+0x962>
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	dd03      	ble.n	8009b0a <_dtoa_r+0xae2>
 8009b02:	2b39      	cmp	r3, #57	; 0x39
 8009b04:	d0ee      	beq.n	8009ae4 <_dtoa_r+0xabc>
 8009b06:	3301      	adds	r3, #1
 8009b08:	e7c7      	b.n	8009a9a <_dtoa_r+0xa72>
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	9907      	ldr	r1, [sp, #28]
 8009b0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b12:	428a      	cmp	r2, r1
 8009b14:	d02a      	beq.n	8009b6c <_dtoa_r+0xb44>
 8009b16:	4659      	mov	r1, fp
 8009b18:	2300      	movs	r3, #0
 8009b1a:	220a      	movs	r2, #10
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 fd65 	bl	800a5ec <__multadd>
 8009b22:	45b8      	cmp	r8, r7
 8009b24:	4683      	mov	fp, r0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	f04f 020a 	mov.w	r2, #10
 8009b2e:	4641      	mov	r1, r8
 8009b30:	4620      	mov	r0, r4
 8009b32:	d107      	bne.n	8009b44 <_dtoa_r+0xb1c>
 8009b34:	f000 fd5a 	bl	800a5ec <__multadd>
 8009b38:	4680      	mov	r8, r0
 8009b3a:	4607      	mov	r7, r0
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	e775      	b.n	8009a30 <_dtoa_r+0xa08>
 8009b44:	f000 fd52 	bl	800a5ec <__multadd>
 8009b48:	4639      	mov	r1, r7
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	220a      	movs	r2, #10
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fd4b 	bl	800a5ec <__multadd>
 8009b56:	4607      	mov	r7, r0
 8009b58:	e7f0      	b.n	8009b3c <_dtoa_r+0xb14>
 8009b5a:	f1b9 0f00 	cmp.w	r9, #0
 8009b5e:	9a00      	ldr	r2, [sp, #0]
 8009b60:	bfcc      	ite	gt
 8009b62:	464d      	movgt	r5, r9
 8009b64:	2501      	movle	r5, #1
 8009b66:	4415      	add	r5, r2
 8009b68:	f04f 0800 	mov.w	r8, #0
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4620      	mov	r0, r4
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f000 ff34 	bl	800a9e0 <__lshift>
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4683      	mov	fp, r0
 8009b7c:	f000 ff9c 	bl	800aab8 <__mcmp>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dcb2      	bgt.n	8009aea <_dtoa_r+0xac2>
 8009b84:	d102      	bne.n	8009b8c <_dtoa_r+0xb64>
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	07db      	lsls	r3, r3, #31
 8009b8a:	d4ae      	bmi.n	8009aea <_dtoa_r+0xac2>
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	461d      	mov	r5, r3
 8009b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b94:	2a30      	cmp	r2, #48	; 0x30
 8009b96:	d0fa      	beq.n	8009b8e <_dtoa_r+0xb66>
 8009b98:	e6f7      	b.n	800998a <_dtoa_r+0x962>
 8009b9a:	9a00      	ldr	r2, [sp, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d1a5      	bne.n	8009aec <_dtoa_r+0xac4>
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	2331      	movs	r3, #49	; 0x31
 8009ba6:	e779      	b.n	8009a9c <_dtoa_r+0xa74>
 8009ba8:	4b13      	ldr	r3, [pc, #76]	; (8009bf8 <_dtoa_r+0xbd0>)
 8009baa:	f7ff baaf 	b.w	800910c <_dtoa_r+0xe4>
 8009bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f47f aa86 	bne.w	80090c2 <_dtoa_r+0x9a>
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <_dtoa_r+0xbd4>)
 8009bb8:	f7ff baa8 	b.w	800910c <_dtoa_r+0xe4>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	dc03      	bgt.n	8009bca <_dtoa_r+0xba2>
 8009bc2:	9b05      	ldr	r3, [sp, #20]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	f73f aec9 	bgt.w	800995c <_dtoa_r+0x934>
 8009bca:	9d00      	ldr	r5, [sp, #0]
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f7ff f99c 	bl	8008f0c <quorem>
 8009bd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009bd8:	f805 3b01 	strb.w	r3, [r5], #1
 8009bdc:	9a00      	ldr	r2, [sp, #0]
 8009bde:	1aaa      	subs	r2, r5, r2
 8009be0:	4591      	cmp	r9, r2
 8009be2:	ddba      	ble.n	8009b5a <_dtoa_r+0xb32>
 8009be4:	4659      	mov	r1, fp
 8009be6:	2300      	movs	r3, #0
 8009be8:	220a      	movs	r2, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fcfe 	bl	800a5ec <__multadd>
 8009bf0:	4683      	mov	fp, r0
 8009bf2:	e7eb      	b.n	8009bcc <_dtoa_r+0xba4>
 8009bf4:	0800befc 	.word	0x0800befc
 8009bf8:	0800bcfc 	.word	0x0800bcfc
 8009bfc:	0800be79 	.word	0x0800be79

08009c00 <std>:
 8009c00:	2300      	movs	r3, #0
 8009c02:	b510      	push	{r4, lr}
 8009c04:	4604      	mov	r4, r0
 8009c06:	e9c0 3300 	strd	r3, r3, [r0]
 8009c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c0e:	6083      	str	r3, [r0, #8]
 8009c10:	8181      	strh	r1, [r0, #12]
 8009c12:	6643      	str	r3, [r0, #100]	; 0x64
 8009c14:	81c2      	strh	r2, [r0, #14]
 8009c16:	6183      	str	r3, [r0, #24]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	305c      	adds	r0, #92	; 0x5c
 8009c1e:	f7fd fc19 	bl	8007454 <memset>
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <std+0x38>)
 8009c24:	6263      	str	r3, [r4, #36]	; 0x24
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <std+0x3c>)
 8009c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <std+0x40>)
 8009c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <std+0x44>)
 8009c30:	6224      	str	r4, [r4, #32]
 8009c32:	6323      	str	r3, [r4, #48]	; 0x30
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	bf00      	nop
 8009c38:	0800b5b1 	.word	0x0800b5b1
 8009c3c:	0800b5d3 	.word	0x0800b5d3
 8009c40:	0800b60b 	.word	0x0800b60b
 8009c44:	0800b62f 	.word	0x0800b62f

08009c48 <_cleanup_r>:
 8009c48:	4901      	ldr	r1, [pc, #4]	; (8009c50 <_cleanup_r+0x8>)
 8009c4a:	f000 b8af 	b.w	8009dac <_fwalk_reent>
 8009c4e:	bf00      	nop
 8009c50:	0800b985 	.word	0x0800b985

08009c54 <__sfmoreglue>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	1e4a      	subs	r2, r1, #1
 8009c58:	2568      	movs	r5, #104	; 0x68
 8009c5a:	4355      	muls	r5, r2
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c62:	f001 f97b 	bl	800af5c <_malloc_r>
 8009c66:	4604      	mov	r4, r0
 8009c68:	b140      	cbz	r0, 8009c7c <__sfmoreglue+0x28>
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c70:	300c      	adds	r0, #12
 8009c72:	60a0      	str	r0, [r4, #8]
 8009c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c78:	f7fd fbec 	bl	8007454 <memset>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <__sfp_lock_acquire>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__sfp_lock_acquire+0x8>)
 8009c82:	f000 bc26 	b.w	800a4d2 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20000790 	.word	0x20000790

08009c8c <__sfp_lock_release>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__sfp_lock_release+0x8>)
 8009c8e:	f000 bc21 	b.w	800a4d4 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20000790 	.word	0x20000790

08009c98 <__sinit_lock_acquire>:
 8009c98:	4801      	ldr	r0, [pc, #4]	; (8009ca0 <__sinit_lock_acquire+0x8>)
 8009c9a:	f000 bc1a 	b.w	800a4d2 <__retarget_lock_acquire_recursive>
 8009c9e:	bf00      	nop
 8009ca0:	2000078b 	.word	0x2000078b

08009ca4 <__sinit_lock_release>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__sinit_lock_release+0x8>)
 8009ca6:	f000 bc15 	b.w	800a4d4 <__retarget_lock_release_recursive>
 8009caa:	bf00      	nop
 8009cac:	2000078b 	.word	0x2000078b

08009cb0 <__sinit>:
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	f7ff fff0 	bl	8009c98 <__sinit_lock_acquire>
 8009cb8:	69a3      	ldr	r3, [r4, #24]
 8009cba:	b11b      	cbz	r3, 8009cc4 <__sinit+0x14>
 8009cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc0:	f7ff bff0 	b.w	8009ca4 <__sinit_lock_release>
 8009cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <__sinit+0x68>)
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <__sinit+0x6c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	bf04      	itt	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	61a3      	streq	r3, [r4, #24]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f820 	bl	8009d20 <__sfp>
 8009ce0:	6060      	str	r0, [r4, #4]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f81c 	bl	8009d20 <__sfp>
 8009ce8:	60a0      	str	r0, [r4, #8]
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 f818 	bl	8009d20 <__sfp>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	60e0      	str	r0, [r4, #12]
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	6860      	ldr	r0, [r4, #4]
 8009cf8:	f7ff ff82 	bl	8009c00 <std>
 8009cfc:	68a0      	ldr	r0, [r4, #8]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	2109      	movs	r1, #9
 8009d02:	f7ff ff7d 	bl	8009c00 <std>
 8009d06:	68e0      	ldr	r0, [r4, #12]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	2112      	movs	r1, #18
 8009d0c:	f7ff ff78 	bl	8009c00 <std>
 8009d10:	2301      	movs	r3, #1
 8009d12:	61a3      	str	r3, [r4, #24]
 8009d14:	e7d2      	b.n	8009cbc <__sinit+0xc>
 8009d16:	bf00      	nop
 8009d18:	0800bce8 	.word	0x0800bce8
 8009d1c:	08009c49 	.word	0x08009c49

08009d20 <__sfp>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	4607      	mov	r7, r0
 8009d24:	f7ff ffac 	bl	8009c80 <__sfp_lock_acquire>
 8009d28:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <__sfp+0x84>)
 8009d2a:	681e      	ldr	r6, [r3, #0]
 8009d2c:	69b3      	ldr	r3, [r6, #24]
 8009d2e:	b913      	cbnz	r3, 8009d36 <__sfp+0x16>
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ffbd 	bl	8009cb0 <__sinit>
 8009d36:	3648      	adds	r6, #72	; 0x48
 8009d38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	d503      	bpl.n	8009d48 <__sfp+0x28>
 8009d40:	6833      	ldr	r3, [r6, #0]
 8009d42:	b30b      	cbz	r3, 8009d88 <__sfp+0x68>
 8009d44:	6836      	ldr	r6, [r6, #0]
 8009d46:	e7f7      	b.n	8009d38 <__sfp+0x18>
 8009d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d4c:	b9d5      	cbnz	r5, 8009d84 <__sfp+0x64>
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <__sfp+0x88>)
 8009d50:	60e3      	str	r3, [r4, #12]
 8009d52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d56:	6665      	str	r5, [r4, #100]	; 0x64
 8009d58:	f000 fbba 	bl	800a4d0 <__retarget_lock_init_recursive>
 8009d5c:	f7ff ff96 	bl	8009c8c <__sfp_lock_release>
 8009d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d68:	6025      	str	r5, [r4, #0]
 8009d6a:	61a5      	str	r5, [r4, #24]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d74:	f7fd fb6e 	bl	8007454 <memset>
 8009d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d80:	4620      	mov	r0, r4
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	3468      	adds	r4, #104	; 0x68
 8009d86:	e7d9      	b.n	8009d3c <__sfp+0x1c>
 8009d88:	2104      	movs	r1, #4
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f7ff ff62 	bl	8009c54 <__sfmoreglue>
 8009d90:	4604      	mov	r4, r0
 8009d92:	6030      	str	r0, [r6, #0]
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d1d5      	bne.n	8009d44 <__sfp+0x24>
 8009d98:	f7ff ff78 	bl	8009c8c <__sfp_lock_release>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	e7ee      	b.n	8009d80 <__sfp+0x60>
 8009da2:	bf00      	nop
 8009da4:	0800bce8 	.word	0x0800bce8
 8009da8:	ffff0001 	.word	0xffff0001

08009dac <_fwalk_reent>:
 8009dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4606      	mov	r6, r0
 8009db2:	4688      	mov	r8, r1
 8009db4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009db8:	2700      	movs	r7, #0
 8009dba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009dc2:	d505      	bpl.n	8009dd0 <_fwalk_reent+0x24>
 8009dc4:	6824      	ldr	r4, [r4, #0]
 8009dc6:	2c00      	cmp	r4, #0
 8009dc8:	d1f7      	bne.n	8009dba <_fwalk_reent+0xe>
 8009dca:	4638      	mov	r0, r7
 8009dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd0:	89ab      	ldrh	r3, [r5, #12]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d907      	bls.n	8009de6 <_fwalk_reent+0x3a>
 8009dd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	d003      	beq.n	8009de6 <_fwalk_reent+0x3a>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	47c0      	blx	r8
 8009de4:	4307      	orrs	r7, r0
 8009de6:	3568      	adds	r5, #104	; 0x68
 8009de8:	e7e9      	b.n	8009dbe <_fwalk_reent+0x12>

08009dea <rshift>:
 8009dea:	6903      	ldr	r3, [r0, #16]
 8009dec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009df4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009df8:	f100 0414 	add.w	r4, r0, #20
 8009dfc:	dd45      	ble.n	8009e8a <rshift+0xa0>
 8009dfe:	f011 011f 	ands.w	r1, r1, #31
 8009e02:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e06:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e0a:	d10c      	bne.n	8009e26 <rshift+0x3c>
 8009e0c:	f100 0710 	add.w	r7, r0, #16
 8009e10:	4629      	mov	r1, r5
 8009e12:	42b1      	cmp	r1, r6
 8009e14:	d334      	bcc.n	8009e80 <rshift+0x96>
 8009e16:	1a9b      	subs	r3, r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	1eea      	subs	r2, r5, #3
 8009e1c:	4296      	cmp	r6, r2
 8009e1e:	bf38      	it	cc
 8009e20:	2300      	movcc	r3, #0
 8009e22:	4423      	add	r3, r4
 8009e24:	e015      	b.n	8009e52 <rshift+0x68>
 8009e26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e2a:	f1c1 0820 	rsb	r8, r1, #32
 8009e2e:	40cf      	lsrs	r7, r1
 8009e30:	f105 0e04 	add.w	lr, r5, #4
 8009e34:	46a1      	mov	r9, r4
 8009e36:	4576      	cmp	r6, lr
 8009e38:	46f4      	mov	ip, lr
 8009e3a:	d815      	bhi.n	8009e68 <rshift+0x7e>
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	009a      	lsls	r2, r3, #2
 8009e40:	3a04      	subs	r2, #4
 8009e42:	3501      	adds	r5, #1
 8009e44:	42ae      	cmp	r6, r5
 8009e46:	bf38      	it	cc
 8009e48:	2200      	movcc	r2, #0
 8009e4a:	18a3      	adds	r3, r4, r2
 8009e4c:	50a7      	str	r7, [r4, r2]
 8009e4e:	b107      	cbz	r7, 8009e52 <rshift+0x68>
 8009e50:	3304      	adds	r3, #4
 8009e52:	1b1a      	subs	r2, r3, r4
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e5a:	bf08      	it	eq
 8009e5c:	2300      	moveq	r3, #0
 8009e5e:	6102      	str	r2, [r0, #16]
 8009e60:	bf08      	it	eq
 8009e62:	6143      	streq	r3, [r0, #20]
 8009e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e68:	f8dc c000 	ldr.w	ip, [ip]
 8009e6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e70:	ea4c 0707 	orr.w	r7, ip, r7
 8009e74:	f849 7b04 	str.w	r7, [r9], #4
 8009e78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e7c:	40cf      	lsrs	r7, r1
 8009e7e:	e7da      	b.n	8009e36 <rshift+0x4c>
 8009e80:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e84:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e88:	e7c3      	b.n	8009e12 <rshift+0x28>
 8009e8a:	4623      	mov	r3, r4
 8009e8c:	e7e1      	b.n	8009e52 <rshift+0x68>

08009e8e <__hexdig_fun>:
 8009e8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e92:	2b09      	cmp	r3, #9
 8009e94:	d802      	bhi.n	8009e9c <__hexdig_fun+0xe>
 8009e96:	3820      	subs	r0, #32
 8009e98:	b2c0      	uxtb	r0, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ea0:	2b05      	cmp	r3, #5
 8009ea2:	d801      	bhi.n	8009ea8 <__hexdig_fun+0x1a>
 8009ea4:	3847      	subs	r0, #71	; 0x47
 8009ea6:	e7f7      	b.n	8009e98 <__hexdig_fun+0xa>
 8009ea8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	d801      	bhi.n	8009eb4 <__hexdig_fun+0x26>
 8009eb0:	3827      	subs	r0, #39	; 0x27
 8009eb2:	e7f1      	b.n	8009e98 <__hexdig_fun+0xa>
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	4770      	bx	lr

08009eb8 <__gethex>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	ed2d 8b02 	vpush	{d8}
 8009ec0:	b089      	sub	sp, #36	; 0x24
 8009ec2:	ee08 0a10 	vmov	s16, r0
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	4bbc      	ldr	r3, [pc, #752]	; (800a1bc <__gethex+0x304>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	4690      	mov	r8, r2
 8009ed4:	f7f6 f98c 	bl	80001f0 <strlen>
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	f8db 2000 	ldr.w	r2, [fp]
 8009ede:	4403      	add	r3, r0
 8009ee0:	4682      	mov	sl, r0
 8009ee2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	1c93      	adds	r3, r2, #2
 8009eea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009eee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ef2:	32fe      	adds	r2, #254	; 0xfe
 8009ef4:	18d1      	adds	r1, r2, r3
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009efc:	9100      	str	r1, [sp, #0]
 8009efe:	2830      	cmp	r0, #48	; 0x30
 8009f00:	d0f8      	beq.n	8009ef4 <__gethex+0x3c>
 8009f02:	f7ff ffc4 	bl	8009e8e <__hexdig_fun>
 8009f06:	4604      	mov	r4, r0
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d13a      	bne.n	8009f82 <__gethex+0xca>
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	4652      	mov	r2, sl
 8009f10:	4638      	mov	r0, r7
 8009f12:	f001 fb90 	bl	800b636 <strncmp>
 8009f16:	4605      	mov	r5, r0
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d168      	bne.n	8009fee <__gethex+0x136>
 8009f1c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f20:	eb07 060a 	add.w	r6, r7, sl
 8009f24:	f7ff ffb3 	bl	8009e8e <__hexdig_fun>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d062      	beq.n	8009ff2 <__gethex+0x13a>
 8009f2c:	4633      	mov	r3, r6
 8009f2e:	7818      	ldrb	r0, [r3, #0]
 8009f30:	2830      	cmp	r0, #48	; 0x30
 8009f32:	461f      	mov	r7, r3
 8009f34:	f103 0301 	add.w	r3, r3, #1
 8009f38:	d0f9      	beq.n	8009f2e <__gethex+0x76>
 8009f3a:	f7ff ffa8 	bl	8009e8e <__hexdig_fun>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	fab0 f480 	clz	r4, r0
 8009f44:	0964      	lsrs	r4, r4, #5
 8009f46:	4635      	mov	r5, r6
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	3201      	adds	r2, #1
 8009f50:	7830      	ldrb	r0, [r6, #0]
 8009f52:	f7ff ff9c 	bl	8009e8e <__hexdig_fun>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d1f8      	bne.n	8009f4c <__gethex+0x94>
 8009f5a:	9901      	ldr	r1, [sp, #4]
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f001 fb69 	bl	800b636 <strncmp>
 8009f64:	b980      	cbnz	r0, 8009f88 <__gethex+0xd0>
 8009f66:	b94d      	cbnz	r5, 8009f7c <__gethex+0xc4>
 8009f68:	eb06 050a 	add.w	r5, r6, sl
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4616      	mov	r6, r2
 8009f70:	3201      	adds	r2, #1
 8009f72:	7830      	ldrb	r0, [r6, #0]
 8009f74:	f7ff ff8b 	bl	8009e8e <__hexdig_fun>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d1f8      	bne.n	8009f6e <__gethex+0xb6>
 8009f7c:	1bad      	subs	r5, r5, r6
 8009f7e:	00ad      	lsls	r5, r5, #2
 8009f80:	e004      	b.n	8009f8c <__gethex+0xd4>
 8009f82:	2400      	movs	r4, #0
 8009f84:	4625      	mov	r5, r4
 8009f86:	e7e0      	b.n	8009f4a <__gethex+0x92>
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	d1f7      	bne.n	8009f7c <__gethex+0xc4>
 8009f8c:	7833      	ldrb	r3, [r6, #0]
 8009f8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f92:	2b50      	cmp	r3, #80	; 0x50
 8009f94:	d13b      	bne.n	800a00e <__gethex+0x156>
 8009f96:	7873      	ldrb	r3, [r6, #1]
 8009f98:	2b2b      	cmp	r3, #43	; 0x2b
 8009f9a:	d02c      	beq.n	8009ff6 <__gethex+0x13e>
 8009f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8009f9e:	d02e      	beq.n	8009ffe <__gethex+0x146>
 8009fa0:	1c71      	adds	r1, r6, #1
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	7808      	ldrb	r0, [r1, #0]
 8009fa8:	f7ff ff71 	bl	8009e8e <__hexdig_fun>
 8009fac:	1e43      	subs	r3, r0, #1
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b18      	cmp	r3, #24
 8009fb2:	d82c      	bhi.n	800a00e <__gethex+0x156>
 8009fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8009fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fbc:	f7ff ff67 	bl	8009e8e <__hexdig_fun>
 8009fc0:	1e43      	subs	r3, r0, #1
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b18      	cmp	r3, #24
 8009fc6:	d91d      	bls.n	800a004 <__gethex+0x14c>
 8009fc8:	f1b9 0f00 	cmp.w	r9, #0
 8009fcc:	d000      	beq.n	8009fd0 <__gethex+0x118>
 8009fce:	4252      	negs	r2, r2
 8009fd0:	4415      	add	r5, r2
 8009fd2:	f8cb 1000 	str.w	r1, [fp]
 8009fd6:	b1e4      	cbz	r4, 800a012 <__gethex+0x15a>
 8009fd8:	9b00      	ldr	r3, [sp, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bf14      	ite	ne
 8009fde:	2700      	movne	r7, #0
 8009fe0:	2706      	moveq	r7, #6
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	b009      	add	sp, #36	; 0x24
 8009fe6:	ecbd 8b02 	vpop	{d8}
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	463e      	mov	r6, r7
 8009ff0:	4625      	mov	r5, r4
 8009ff2:	2401      	movs	r4, #1
 8009ff4:	e7ca      	b.n	8009f8c <__gethex+0xd4>
 8009ff6:	f04f 0900 	mov.w	r9, #0
 8009ffa:	1cb1      	adds	r1, r6, #2
 8009ffc:	e7d3      	b.n	8009fa6 <__gethex+0xee>
 8009ffe:	f04f 0901 	mov.w	r9, #1
 800a002:	e7fa      	b.n	8009ffa <__gethex+0x142>
 800a004:	230a      	movs	r3, #10
 800a006:	fb03 0202 	mla	r2, r3, r2, r0
 800a00a:	3a10      	subs	r2, #16
 800a00c:	e7d4      	b.n	8009fb8 <__gethex+0x100>
 800a00e:	4631      	mov	r1, r6
 800a010:	e7df      	b.n	8009fd2 <__gethex+0x11a>
 800a012:	1bf3      	subs	r3, r6, r7
 800a014:	3b01      	subs	r3, #1
 800a016:	4621      	mov	r1, r4
 800a018:	2b07      	cmp	r3, #7
 800a01a:	dc0b      	bgt.n	800a034 <__gethex+0x17c>
 800a01c:	ee18 0a10 	vmov	r0, s16
 800a020:	f000 fa82 	bl	800a528 <_Balloc>
 800a024:	4604      	mov	r4, r0
 800a026:	b940      	cbnz	r0, 800a03a <__gethex+0x182>
 800a028:	4b65      	ldr	r3, [pc, #404]	; (800a1c0 <__gethex+0x308>)
 800a02a:	4602      	mov	r2, r0
 800a02c:	21de      	movs	r1, #222	; 0xde
 800a02e:	4865      	ldr	r0, [pc, #404]	; (800a1c4 <__gethex+0x30c>)
 800a030:	f001 fbf4 	bl	800b81c <__assert_func>
 800a034:	3101      	adds	r1, #1
 800a036:	105b      	asrs	r3, r3, #1
 800a038:	e7ee      	b.n	800a018 <__gethex+0x160>
 800a03a:	f100 0914 	add.w	r9, r0, #20
 800a03e:	f04f 0b00 	mov.w	fp, #0
 800a042:	f1ca 0301 	rsb	r3, sl, #1
 800a046:	f8cd 9008 	str.w	r9, [sp, #8]
 800a04a:	f8cd b000 	str.w	fp, [sp]
 800a04e:	9306      	str	r3, [sp, #24]
 800a050:	42b7      	cmp	r7, r6
 800a052:	d340      	bcc.n	800a0d6 <__gethex+0x21e>
 800a054:	9802      	ldr	r0, [sp, #8]
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	f840 3b04 	str.w	r3, [r0], #4
 800a05c:	eba0 0009 	sub.w	r0, r0, r9
 800a060:	1080      	asrs	r0, r0, #2
 800a062:	0146      	lsls	r6, r0, #5
 800a064:	6120      	str	r0, [r4, #16]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fb54 	bl	800a714 <__hi0bits>
 800a06c:	1a30      	subs	r0, r6, r0
 800a06e:	f8d8 6000 	ldr.w	r6, [r8]
 800a072:	42b0      	cmp	r0, r6
 800a074:	dd63      	ble.n	800a13e <__gethex+0x286>
 800a076:	1b87      	subs	r7, r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 feee 	bl	800ae5c <__any_on>
 800a080:	4682      	mov	sl, r0
 800a082:	b1a8      	cbz	r0, 800a0b0 <__gethex+0x1f8>
 800a084:	1e7b      	subs	r3, r7, #1
 800a086:	1159      	asrs	r1, r3, #5
 800a088:	f003 021f 	and.w	r2, r3, #31
 800a08c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a090:	f04f 0a01 	mov.w	sl, #1
 800a094:	fa0a f202 	lsl.w	r2, sl, r2
 800a098:	420a      	tst	r2, r1
 800a09a:	d009      	beq.n	800a0b0 <__gethex+0x1f8>
 800a09c:	4553      	cmp	r3, sl
 800a09e:	dd05      	ble.n	800a0ac <__gethex+0x1f4>
 800a0a0:	1eb9      	subs	r1, r7, #2
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 feda 	bl	800ae5c <__any_on>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d145      	bne.n	800a138 <__gethex+0x280>
 800a0ac:	f04f 0a02 	mov.w	sl, #2
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f7ff fe99 	bl	8009dea <rshift>
 800a0b8:	443d      	add	r5, r7
 800a0ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0be:	42ab      	cmp	r3, r5
 800a0c0:	da4c      	bge.n	800a15c <__gethex+0x2a4>
 800a0c2:	ee18 0a10 	vmov	r0, s16
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	f000 fa6e 	bl	800a5a8 <_Bfree>
 800a0cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	27a3      	movs	r7, #163	; 0xa3
 800a0d4:	e785      	b.n	8009fe2 <__gethex+0x12a>
 800a0d6:	1e73      	subs	r3, r6, #1
 800a0d8:	9a05      	ldr	r2, [sp, #20]
 800a0da:	9303      	str	r3, [sp, #12]
 800a0dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d019      	beq.n	800a118 <__gethex+0x260>
 800a0e4:	f1bb 0f20 	cmp.w	fp, #32
 800a0e8:	d107      	bne.n	800a0fa <__gethex+0x242>
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	9a00      	ldr	r2, [sp, #0]
 800a0ee:	f843 2b04 	str.w	r2, [r3], #4
 800a0f2:	9302      	str	r3, [sp, #8]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	469b      	mov	fp, r3
 800a0fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a0fe:	f7ff fec6 	bl	8009e8e <__hexdig_fun>
 800a102:	9b00      	ldr	r3, [sp, #0]
 800a104:	f000 000f 	and.w	r0, r0, #15
 800a108:	fa00 f00b 	lsl.w	r0, r0, fp
 800a10c:	4303      	orrs	r3, r0
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	f10b 0b04 	add.w	fp, fp, #4
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	e00d      	b.n	800a134 <__gethex+0x27c>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	9a06      	ldr	r2, [sp, #24]
 800a11c:	4413      	add	r3, r2
 800a11e:	42bb      	cmp	r3, r7
 800a120:	d3e0      	bcc.n	800a0e4 <__gethex+0x22c>
 800a122:	4618      	mov	r0, r3
 800a124:	9901      	ldr	r1, [sp, #4]
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	4652      	mov	r2, sl
 800a12a:	f001 fa84 	bl	800b636 <strncmp>
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	2800      	cmp	r0, #0
 800a132:	d1d7      	bne.n	800a0e4 <__gethex+0x22c>
 800a134:	461e      	mov	r6, r3
 800a136:	e78b      	b.n	800a050 <__gethex+0x198>
 800a138:	f04f 0a03 	mov.w	sl, #3
 800a13c:	e7b8      	b.n	800a0b0 <__gethex+0x1f8>
 800a13e:	da0a      	bge.n	800a156 <__gethex+0x29e>
 800a140:	1a37      	subs	r7, r6, r0
 800a142:	4621      	mov	r1, r4
 800a144:	ee18 0a10 	vmov	r0, s16
 800a148:	463a      	mov	r2, r7
 800a14a:	f000 fc49 	bl	800a9e0 <__lshift>
 800a14e:	1bed      	subs	r5, r5, r7
 800a150:	4604      	mov	r4, r0
 800a152:	f100 0914 	add.w	r9, r0, #20
 800a156:	f04f 0a00 	mov.w	sl, #0
 800a15a:	e7ae      	b.n	800a0ba <__gethex+0x202>
 800a15c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a160:	42a8      	cmp	r0, r5
 800a162:	dd72      	ble.n	800a24a <__gethex+0x392>
 800a164:	1b45      	subs	r5, r0, r5
 800a166:	42ae      	cmp	r6, r5
 800a168:	dc36      	bgt.n	800a1d8 <__gethex+0x320>
 800a16a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d02a      	beq.n	800a1c8 <__gethex+0x310>
 800a172:	2b03      	cmp	r3, #3
 800a174:	d02c      	beq.n	800a1d0 <__gethex+0x318>
 800a176:	2b01      	cmp	r3, #1
 800a178:	d115      	bne.n	800a1a6 <__gethex+0x2ee>
 800a17a:	42ae      	cmp	r6, r5
 800a17c:	d113      	bne.n	800a1a6 <__gethex+0x2ee>
 800a17e:	2e01      	cmp	r6, #1
 800a180:	d10b      	bne.n	800a19a <__gethex+0x2e2>
 800a182:	9a04      	ldr	r2, [sp, #16]
 800a184:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	2301      	movs	r3, #1
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	f8c9 3000 	str.w	r3, [r9]
 800a192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a194:	2762      	movs	r7, #98	; 0x62
 800a196:	601c      	str	r4, [r3, #0]
 800a198:	e723      	b.n	8009fe2 <__gethex+0x12a>
 800a19a:	1e71      	subs	r1, r6, #1
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fe5d 	bl	800ae5c <__any_on>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d1ed      	bne.n	800a182 <__gethex+0x2ca>
 800a1a6:	ee18 0a10 	vmov	r0, s16
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	f000 f9fc 	bl	800a5a8 <_Bfree>
 800a1b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	2750      	movs	r7, #80	; 0x50
 800a1b8:	e713      	b.n	8009fe2 <__gethex+0x12a>
 800a1ba:	bf00      	nop
 800a1bc:	0800bfdc 	.word	0x0800bfdc
 800a1c0:	0800befc 	.word	0x0800befc
 800a1c4:	0800bf70 	.word	0x0800bf70
 800a1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1eb      	bne.n	800a1a6 <__gethex+0x2ee>
 800a1ce:	e7d8      	b.n	800a182 <__gethex+0x2ca>
 800a1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1d5      	bne.n	800a182 <__gethex+0x2ca>
 800a1d6:	e7e6      	b.n	800a1a6 <__gethex+0x2ee>
 800a1d8:	1e6f      	subs	r7, r5, #1
 800a1da:	f1ba 0f00 	cmp.w	sl, #0
 800a1de:	d131      	bne.n	800a244 <__gethex+0x38c>
 800a1e0:	b127      	cbz	r7, 800a1ec <__gethex+0x334>
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fe39 	bl	800ae5c <__any_on>
 800a1ea:	4682      	mov	sl, r0
 800a1ec:	117b      	asrs	r3, r7, #5
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a1f4:	f007 071f 	and.w	r7, r7, #31
 800a1f8:	fa01 f707 	lsl.w	r7, r1, r7
 800a1fc:	421f      	tst	r7, r3
 800a1fe:	4629      	mov	r1, r5
 800a200:	4620      	mov	r0, r4
 800a202:	bf18      	it	ne
 800a204:	f04a 0a02 	orrne.w	sl, sl, #2
 800a208:	1b76      	subs	r6, r6, r5
 800a20a:	f7ff fdee 	bl	8009dea <rshift>
 800a20e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a212:	2702      	movs	r7, #2
 800a214:	f1ba 0f00 	cmp.w	sl, #0
 800a218:	d048      	beq.n	800a2ac <__gethex+0x3f4>
 800a21a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d015      	beq.n	800a24e <__gethex+0x396>
 800a222:	2b03      	cmp	r3, #3
 800a224:	d017      	beq.n	800a256 <__gethex+0x39e>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d109      	bne.n	800a23e <__gethex+0x386>
 800a22a:	f01a 0f02 	tst.w	sl, #2
 800a22e:	d006      	beq.n	800a23e <__gethex+0x386>
 800a230:	f8d9 0000 	ldr.w	r0, [r9]
 800a234:	ea4a 0a00 	orr.w	sl, sl, r0
 800a238:	f01a 0f01 	tst.w	sl, #1
 800a23c:	d10e      	bne.n	800a25c <__gethex+0x3a4>
 800a23e:	f047 0710 	orr.w	r7, r7, #16
 800a242:	e033      	b.n	800a2ac <__gethex+0x3f4>
 800a244:	f04f 0a01 	mov.w	sl, #1
 800a248:	e7d0      	b.n	800a1ec <__gethex+0x334>
 800a24a:	2701      	movs	r7, #1
 800a24c:	e7e2      	b.n	800a214 <__gethex+0x35c>
 800a24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a250:	f1c3 0301 	rsb	r3, r3, #1
 800a254:	9315      	str	r3, [sp, #84]	; 0x54
 800a256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <__gethex+0x386>
 800a25c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a260:	f104 0314 	add.w	r3, r4, #20
 800a264:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a268:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a26c:	f04f 0c00 	mov.w	ip, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f853 2b04 	ldr.w	r2, [r3], #4
 800a276:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a27a:	d01c      	beq.n	800a2b6 <__gethex+0x3fe>
 800a27c:	3201      	adds	r2, #1
 800a27e:	6002      	str	r2, [r0, #0]
 800a280:	2f02      	cmp	r7, #2
 800a282:	f104 0314 	add.w	r3, r4, #20
 800a286:	d13f      	bne.n	800a308 <__gethex+0x450>
 800a288:	f8d8 2000 	ldr.w	r2, [r8]
 800a28c:	3a01      	subs	r2, #1
 800a28e:	42b2      	cmp	r2, r6
 800a290:	d10a      	bne.n	800a2a8 <__gethex+0x3f0>
 800a292:	1171      	asrs	r1, r6, #5
 800a294:	2201      	movs	r2, #1
 800a296:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a29a:	f006 061f 	and.w	r6, r6, #31
 800a29e:	fa02 f606 	lsl.w	r6, r2, r6
 800a2a2:	421e      	tst	r6, r3
 800a2a4:	bf18      	it	ne
 800a2a6:	4617      	movne	r7, r2
 800a2a8:	f047 0720 	orr.w	r7, r7, #32
 800a2ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2ae:	601c      	str	r4, [r3, #0]
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	601d      	str	r5, [r3, #0]
 800a2b4:	e695      	b.n	8009fe2 <__gethex+0x12a>
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2bc:	d8d8      	bhi.n	800a270 <__gethex+0x3b8>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	459b      	cmp	fp, r3
 800a2c2:	db19      	blt.n	800a2f8 <__gethex+0x440>
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	ee18 0a10 	vmov	r0, s16
 800a2ca:	3101      	adds	r1, #1
 800a2cc:	f000 f92c 	bl	800a528 <_Balloc>
 800a2d0:	4681      	mov	r9, r0
 800a2d2:	b918      	cbnz	r0, 800a2dc <__gethex+0x424>
 800a2d4:	4b1a      	ldr	r3, [pc, #104]	; (800a340 <__gethex+0x488>)
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	2184      	movs	r1, #132	; 0x84
 800a2da:	e6a8      	b.n	800a02e <__gethex+0x176>
 800a2dc:	6922      	ldr	r2, [r4, #16]
 800a2de:	3202      	adds	r2, #2
 800a2e0:	f104 010c 	add.w	r1, r4, #12
 800a2e4:	0092      	lsls	r2, r2, #2
 800a2e6:	300c      	adds	r0, #12
 800a2e8:	f000 f910 	bl	800a50c <memcpy>
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	ee18 0a10 	vmov	r0, s16
 800a2f2:	f000 f959 	bl	800a5a8 <_Bfree>
 800a2f6:	464c      	mov	r4, r9
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a300:	6122      	str	r2, [r4, #16]
 800a302:	2201      	movs	r2, #1
 800a304:	615a      	str	r2, [r3, #20]
 800a306:	e7bb      	b.n	800a280 <__gethex+0x3c8>
 800a308:	6922      	ldr	r2, [r4, #16]
 800a30a:	455a      	cmp	r2, fp
 800a30c:	dd0b      	ble.n	800a326 <__gethex+0x46e>
 800a30e:	2101      	movs	r1, #1
 800a310:	4620      	mov	r0, r4
 800a312:	f7ff fd6a 	bl	8009dea <rshift>
 800a316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a31a:	3501      	adds	r5, #1
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	f6ff aed0 	blt.w	800a0c2 <__gethex+0x20a>
 800a322:	2701      	movs	r7, #1
 800a324:	e7c0      	b.n	800a2a8 <__gethex+0x3f0>
 800a326:	f016 061f 	ands.w	r6, r6, #31
 800a32a:	d0fa      	beq.n	800a322 <__gethex+0x46a>
 800a32c:	449a      	add	sl, r3
 800a32e:	f1c6 0620 	rsb	r6, r6, #32
 800a332:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a336:	f000 f9ed 	bl	800a714 <__hi0bits>
 800a33a:	42b0      	cmp	r0, r6
 800a33c:	dbe7      	blt.n	800a30e <__gethex+0x456>
 800a33e:	e7f0      	b.n	800a322 <__gethex+0x46a>
 800a340:	0800befc 	.word	0x0800befc

0800a344 <L_shift>:
 800a344:	f1c2 0208 	rsb	r2, r2, #8
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	f1c2 0620 	rsb	r6, r2, #32
 800a350:	6843      	ldr	r3, [r0, #4]
 800a352:	6804      	ldr	r4, [r0, #0]
 800a354:	fa03 f506 	lsl.w	r5, r3, r6
 800a358:	432c      	orrs	r4, r5
 800a35a:	40d3      	lsrs	r3, r2
 800a35c:	6004      	str	r4, [r0, #0]
 800a35e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a362:	4288      	cmp	r0, r1
 800a364:	d3f4      	bcc.n	800a350 <L_shift+0xc>
 800a366:	bd70      	pop	{r4, r5, r6, pc}

0800a368 <__match>:
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a372:	b914      	cbnz	r4, 800a37a <__match+0x12>
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	2001      	movs	r0, #1
 800a378:	bd30      	pop	{r4, r5, pc}
 800a37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a382:	2d19      	cmp	r5, #25
 800a384:	bf98      	it	ls
 800a386:	3220      	addls	r2, #32
 800a388:	42a2      	cmp	r2, r4
 800a38a:	d0f0      	beq.n	800a36e <__match+0x6>
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7f3      	b.n	800a378 <__match+0x10>

0800a390 <__hexnan>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	680b      	ldr	r3, [r1, #0]
 800a396:	6801      	ldr	r1, [r0, #0]
 800a398:	115e      	asrs	r6, r3, #5
 800a39a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a39e:	f013 031f 	ands.w	r3, r3, #31
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	bf18      	it	ne
 800a3a6:	3604      	addne	r6, #4
 800a3a8:	2500      	movs	r5, #0
 800a3aa:	1f37      	subs	r7, r6, #4
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	4690      	mov	r8, r2
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3b6:	46b9      	mov	r9, r7
 800a3b8:	463c      	mov	r4, r7
 800a3ba:	9502      	str	r5, [sp, #8]
 800a3bc:	46ab      	mov	fp, r5
 800a3be:	784a      	ldrb	r2, [r1, #1]
 800a3c0:	1c4b      	adds	r3, r1, #1
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	b342      	cbz	r2, 800a418 <__hexnan+0x88>
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	9105      	str	r1, [sp, #20]
 800a3ca:	9204      	str	r2, [sp, #16]
 800a3cc:	f7ff fd5f 	bl	8009e8e <__hexdig_fun>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d14f      	bne.n	800a474 <__hexnan+0xe4>
 800a3d4:	9a04      	ldr	r2, [sp, #16]
 800a3d6:	9905      	ldr	r1, [sp, #20]
 800a3d8:	2a20      	cmp	r2, #32
 800a3da:	d818      	bhi.n	800a40e <__hexnan+0x7e>
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	459b      	cmp	fp, r3
 800a3e0:	dd13      	ble.n	800a40a <__hexnan+0x7a>
 800a3e2:	454c      	cmp	r4, r9
 800a3e4:	d206      	bcs.n	800a3f4 <__hexnan+0x64>
 800a3e6:	2d07      	cmp	r5, #7
 800a3e8:	dc04      	bgt.n	800a3f4 <__hexnan+0x64>
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff ffa8 	bl	800a344 <L_shift>
 800a3f4:	4544      	cmp	r4, r8
 800a3f6:	d950      	bls.n	800a49a <__hexnan+0x10a>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a3fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a402:	f8cd b008 	str.w	fp, [sp, #8]
 800a406:	464c      	mov	r4, r9
 800a408:	461d      	mov	r5, r3
 800a40a:	9903      	ldr	r1, [sp, #12]
 800a40c:	e7d7      	b.n	800a3be <__hexnan+0x2e>
 800a40e:	2a29      	cmp	r2, #41	; 0x29
 800a410:	d156      	bne.n	800a4c0 <__hexnan+0x130>
 800a412:	3102      	adds	r1, #2
 800a414:	f8ca 1000 	str.w	r1, [sl]
 800a418:	f1bb 0f00 	cmp.w	fp, #0
 800a41c:	d050      	beq.n	800a4c0 <__hexnan+0x130>
 800a41e:	454c      	cmp	r4, r9
 800a420:	d206      	bcs.n	800a430 <__hexnan+0xa0>
 800a422:	2d07      	cmp	r5, #7
 800a424:	dc04      	bgt.n	800a430 <__hexnan+0xa0>
 800a426:	462a      	mov	r2, r5
 800a428:	4649      	mov	r1, r9
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff ff8a 	bl	800a344 <L_shift>
 800a430:	4544      	cmp	r4, r8
 800a432:	d934      	bls.n	800a49e <__hexnan+0x10e>
 800a434:	f1a8 0204 	sub.w	r2, r8, #4
 800a438:	4623      	mov	r3, r4
 800a43a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a43e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a442:	429f      	cmp	r7, r3
 800a444:	d2f9      	bcs.n	800a43a <__hexnan+0xaa>
 800a446:	1b3b      	subs	r3, r7, r4
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	3401      	adds	r4, #1
 800a450:	3e03      	subs	r6, #3
 800a452:	42b4      	cmp	r4, r6
 800a454:	bf88      	it	hi
 800a456:	2304      	movhi	r3, #4
 800a458:	4443      	add	r3, r8
 800a45a:	2200      	movs	r2, #0
 800a45c:	f843 2b04 	str.w	r2, [r3], #4
 800a460:	429f      	cmp	r7, r3
 800a462:	d2fb      	bcs.n	800a45c <__hexnan+0xcc>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	b91b      	cbnz	r3, 800a470 <__hexnan+0xe0>
 800a468:	4547      	cmp	r7, r8
 800a46a:	d127      	bne.n	800a4bc <__hexnan+0x12c>
 800a46c:	2301      	movs	r3, #1
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	2005      	movs	r0, #5
 800a472:	e026      	b.n	800a4c2 <__hexnan+0x132>
 800a474:	3501      	adds	r5, #1
 800a476:	2d08      	cmp	r5, #8
 800a478:	f10b 0b01 	add.w	fp, fp, #1
 800a47c:	dd06      	ble.n	800a48c <__hexnan+0xfc>
 800a47e:	4544      	cmp	r4, r8
 800a480:	d9c3      	bls.n	800a40a <__hexnan+0x7a>
 800a482:	2300      	movs	r3, #0
 800a484:	f844 3c04 	str.w	r3, [r4, #-4]
 800a488:	2501      	movs	r5, #1
 800a48a:	3c04      	subs	r4, #4
 800a48c:	6822      	ldr	r2, [r4, #0]
 800a48e:	f000 000f 	and.w	r0, r0, #15
 800a492:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	e7b7      	b.n	800a40a <__hexnan+0x7a>
 800a49a:	2508      	movs	r5, #8
 800a49c:	e7b5      	b.n	800a40a <__hexnan+0x7a>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0df      	beq.n	800a464 <__hexnan+0xd4>
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	f1c3 0320 	rsb	r3, r3, #32
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a4b4:	401a      	ands	r2, r3
 800a4b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a4ba:	e7d3      	b.n	800a464 <__hexnan+0xd4>
 800a4bc:	3f04      	subs	r7, #4
 800a4be:	e7d1      	b.n	800a464 <__hexnan+0xd4>
 800a4c0:	2004      	movs	r0, #4
 800a4c2:	b007      	add	sp, #28
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4c8 <_localeconv_r>:
 800a4c8:	4800      	ldr	r0, [pc, #0]	; (800a4cc <_localeconv_r+0x4>)
 800a4ca:	4770      	bx	lr
 800a4cc:	20000170 	.word	0x20000170

0800a4d0 <__retarget_lock_init_recursive>:
 800a4d0:	4770      	bx	lr

0800a4d2 <__retarget_lock_acquire_recursive>:
 800a4d2:	4770      	bx	lr

0800a4d4 <__retarget_lock_release_recursive>:
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <malloc>:
 800a4d8:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <malloc+0xc>)
 800a4da:	4601      	mov	r1, r0
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	f000 bd3d 	b.w	800af5c <_malloc_r>
 800a4e2:	bf00      	nop
 800a4e4:	20000018 	.word	0x20000018

0800a4e8 <__ascii_mbtowc>:
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	b901      	cbnz	r1, 800a4ee <__ascii_mbtowc+0x6>
 800a4ec:	a901      	add	r1, sp, #4
 800a4ee:	b142      	cbz	r2, 800a502 <__ascii_mbtowc+0x1a>
 800a4f0:	b14b      	cbz	r3, 800a506 <__ascii_mbtowc+0x1e>
 800a4f2:	7813      	ldrb	r3, [r2, #0]
 800a4f4:	600b      	str	r3, [r1, #0]
 800a4f6:	7812      	ldrb	r2, [r2, #0]
 800a4f8:	1e10      	subs	r0, r2, #0
 800a4fa:	bf18      	it	ne
 800a4fc:	2001      	movne	r0, #1
 800a4fe:	b002      	add	sp, #8
 800a500:	4770      	bx	lr
 800a502:	4610      	mov	r0, r2
 800a504:	e7fb      	b.n	800a4fe <__ascii_mbtowc+0x16>
 800a506:	f06f 0001 	mvn.w	r0, #1
 800a50a:	e7f8      	b.n	800a4fe <__ascii_mbtowc+0x16>

0800a50c <memcpy>:
 800a50c:	440a      	add	r2, r1
 800a50e:	4291      	cmp	r1, r2
 800a510:	f100 33ff 	add.w	r3, r0, #4294967295
 800a514:	d100      	bne.n	800a518 <memcpy+0xc>
 800a516:	4770      	bx	lr
 800a518:	b510      	push	{r4, lr}
 800a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a522:	4291      	cmp	r1, r2
 800a524:	d1f9      	bne.n	800a51a <memcpy+0xe>
 800a526:	bd10      	pop	{r4, pc}

0800a528 <_Balloc>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	b976      	cbnz	r6, 800a550 <_Balloc+0x28>
 800a532:	2010      	movs	r0, #16
 800a534:	f7ff ffd0 	bl	800a4d8 <malloc>
 800a538:	4602      	mov	r2, r0
 800a53a:	6260      	str	r0, [r4, #36]	; 0x24
 800a53c:	b920      	cbnz	r0, 800a548 <_Balloc+0x20>
 800a53e:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <_Balloc+0x78>)
 800a540:	4818      	ldr	r0, [pc, #96]	; (800a5a4 <_Balloc+0x7c>)
 800a542:	2166      	movs	r1, #102	; 0x66
 800a544:	f001 f96a 	bl	800b81c <__assert_func>
 800a548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a54c:	6006      	str	r6, [r0, #0]
 800a54e:	60c6      	str	r6, [r0, #12]
 800a550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a552:	68f3      	ldr	r3, [r6, #12]
 800a554:	b183      	cbz	r3, 800a578 <_Balloc+0x50>
 800a556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a55e:	b9b8      	cbnz	r0, 800a590 <_Balloc+0x68>
 800a560:	2101      	movs	r1, #1
 800a562:	fa01 f605 	lsl.w	r6, r1, r5
 800a566:	1d72      	adds	r2, r6, #5
 800a568:	0092      	lsls	r2, r2, #2
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 fc97 	bl	800ae9e <_calloc_r>
 800a570:	b160      	cbz	r0, 800a58c <_Balloc+0x64>
 800a572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a576:	e00e      	b.n	800a596 <_Balloc+0x6e>
 800a578:	2221      	movs	r2, #33	; 0x21
 800a57a:	2104      	movs	r1, #4
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fc8e 	bl	800ae9e <_calloc_r>
 800a582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a584:	60f0      	str	r0, [r6, #12]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e4      	bne.n	800a556 <_Balloc+0x2e>
 800a58c:	2000      	movs	r0, #0
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	6802      	ldr	r2, [r0, #0]
 800a592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a596:	2300      	movs	r3, #0
 800a598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a59c:	e7f7      	b.n	800a58e <_Balloc+0x66>
 800a59e:	bf00      	nop
 800a5a0:	0800be86 	.word	0x0800be86
 800a5a4:	0800bff0 	.word	0x0800bff0

0800a5a8 <_Bfree>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	b976      	cbnz	r6, 800a5d0 <_Bfree+0x28>
 800a5b2:	2010      	movs	r0, #16
 800a5b4:	f7ff ff90 	bl	800a4d8 <malloc>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	6268      	str	r0, [r5, #36]	; 0x24
 800a5bc:	b920      	cbnz	r0, 800a5c8 <_Bfree+0x20>
 800a5be:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <_Bfree+0x3c>)
 800a5c0:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <_Bfree+0x40>)
 800a5c2:	218a      	movs	r1, #138	; 0x8a
 800a5c4:	f001 f92a 	bl	800b81c <__assert_func>
 800a5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5cc:	6006      	str	r6, [r0, #0]
 800a5ce:	60c6      	str	r6, [r0, #12]
 800a5d0:	b13c      	cbz	r4, 800a5e2 <_Bfree+0x3a>
 800a5d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5d4:	6862      	ldr	r2, [r4, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5dc:	6021      	str	r1, [r4, #0]
 800a5de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	0800be86 	.word	0x0800be86
 800a5e8:	0800bff0 	.word	0x0800bff0

0800a5ec <__multadd>:
 800a5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f0:	690e      	ldr	r6, [r1, #16]
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	f101 0014 	add.w	r0, r1, #20
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6805      	ldr	r5, [r0, #0]
 800a600:	b2a9      	uxth	r1, r5
 800a602:	fb02 8101 	mla	r1, r2, r1, r8
 800a606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a60a:	0c2d      	lsrs	r5, r5, #16
 800a60c:	fb02 c505 	mla	r5, r2, r5, ip
 800a610:	b289      	uxth	r1, r1
 800a612:	3301      	adds	r3, #1
 800a614:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a618:	429e      	cmp	r6, r3
 800a61a:	f840 1b04 	str.w	r1, [r0], #4
 800a61e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a622:	dcec      	bgt.n	800a5fe <__multadd+0x12>
 800a624:	f1b8 0f00 	cmp.w	r8, #0
 800a628:	d022      	beq.n	800a670 <__multadd+0x84>
 800a62a:	68a3      	ldr	r3, [r4, #8]
 800a62c:	42b3      	cmp	r3, r6
 800a62e:	dc19      	bgt.n	800a664 <__multadd+0x78>
 800a630:	6861      	ldr	r1, [r4, #4]
 800a632:	4638      	mov	r0, r7
 800a634:	3101      	adds	r1, #1
 800a636:	f7ff ff77 	bl	800a528 <_Balloc>
 800a63a:	4605      	mov	r5, r0
 800a63c:	b928      	cbnz	r0, 800a64a <__multadd+0x5e>
 800a63e:	4602      	mov	r2, r0
 800a640:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <__multadd+0x8c>)
 800a642:	480e      	ldr	r0, [pc, #56]	; (800a67c <__multadd+0x90>)
 800a644:	21b5      	movs	r1, #181	; 0xb5
 800a646:	f001 f8e9 	bl	800b81c <__assert_func>
 800a64a:	6922      	ldr	r2, [r4, #16]
 800a64c:	3202      	adds	r2, #2
 800a64e:	f104 010c 	add.w	r1, r4, #12
 800a652:	0092      	lsls	r2, r2, #2
 800a654:	300c      	adds	r0, #12
 800a656:	f7ff ff59 	bl	800a50c <memcpy>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ffa3 	bl	800a5a8 <_Bfree>
 800a662:	462c      	mov	r4, r5
 800a664:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a668:	3601      	adds	r6, #1
 800a66a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a66e:	6126      	str	r6, [r4, #16]
 800a670:	4620      	mov	r0, r4
 800a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a676:	bf00      	nop
 800a678:	0800befc 	.word	0x0800befc
 800a67c:	0800bff0 	.word	0x0800bff0

0800a680 <__s2b>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	4615      	mov	r5, r2
 800a688:	461f      	mov	r7, r3
 800a68a:	2209      	movs	r2, #9
 800a68c:	3308      	adds	r3, #8
 800a68e:	4606      	mov	r6, r0
 800a690:	fb93 f3f2 	sdiv	r3, r3, r2
 800a694:	2100      	movs	r1, #0
 800a696:	2201      	movs	r2, #1
 800a698:	429a      	cmp	r2, r3
 800a69a:	db09      	blt.n	800a6b0 <__s2b+0x30>
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff ff43 	bl	800a528 <_Balloc>
 800a6a2:	b940      	cbnz	r0, 800a6b6 <__s2b+0x36>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b19      	ldr	r3, [pc, #100]	; (800a70c <__s2b+0x8c>)
 800a6a8:	4819      	ldr	r0, [pc, #100]	; (800a710 <__s2b+0x90>)
 800a6aa:	21ce      	movs	r1, #206	; 0xce
 800a6ac:	f001 f8b6 	bl	800b81c <__assert_func>
 800a6b0:	0052      	lsls	r2, r2, #1
 800a6b2:	3101      	adds	r1, #1
 800a6b4:	e7f0      	b.n	800a698 <__s2b+0x18>
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	6143      	str	r3, [r0, #20]
 800a6ba:	2d09      	cmp	r5, #9
 800a6bc:	f04f 0301 	mov.w	r3, #1
 800a6c0:	6103      	str	r3, [r0, #16]
 800a6c2:	dd16      	ble.n	800a6f2 <__s2b+0x72>
 800a6c4:	f104 0909 	add.w	r9, r4, #9
 800a6c8:	46c8      	mov	r8, r9
 800a6ca:	442c      	add	r4, r5
 800a6cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	3b30      	subs	r3, #48	; 0x30
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff ff88 	bl	800a5ec <__multadd>
 800a6dc:	45a0      	cmp	r8, r4
 800a6de:	d1f5      	bne.n	800a6cc <__s2b+0x4c>
 800a6e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a6e4:	444c      	add	r4, r9
 800a6e6:	1b2d      	subs	r5, r5, r4
 800a6e8:	1963      	adds	r3, r4, r5
 800a6ea:	42bb      	cmp	r3, r7
 800a6ec:	db04      	blt.n	800a6f8 <__s2b+0x78>
 800a6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f2:	340a      	adds	r4, #10
 800a6f4:	2509      	movs	r5, #9
 800a6f6:	e7f6      	b.n	800a6e6 <__s2b+0x66>
 800a6f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	3b30      	subs	r3, #48	; 0x30
 800a700:	220a      	movs	r2, #10
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff ff72 	bl	800a5ec <__multadd>
 800a708:	e7ee      	b.n	800a6e8 <__s2b+0x68>
 800a70a:	bf00      	nop
 800a70c:	0800befc 	.word	0x0800befc
 800a710:	0800bff0 	.word	0x0800bff0

0800a714 <__hi0bits>:
 800a714:	0c03      	lsrs	r3, r0, #16
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	b9d3      	cbnz	r3, 800a750 <__hi0bits+0x3c>
 800a71a:	0400      	lsls	r0, r0, #16
 800a71c:	2310      	movs	r3, #16
 800a71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a722:	bf04      	itt	eq
 800a724:	0200      	lsleq	r0, r0, #8
 800a726:	3308      	addeq	r3, #8
 800a728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a72c:	bf04      	itt	eq
 800a72e:	0100      	lsleq	r0, r0, #4
 800a730:	3304      	addeq	r3, #4
 800a732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a736:	bf04      	itt	eq
 800a738:	0080      	lsleq	r0, r0, #2
 800a73a:	3302      	addeq	r3, #2
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db05      	blt.n	800a74c <__hi0bits+0x38>
 800a740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	bf08      	it	eq
 800a74a:	2320      	moveq	r3, #32
 800a74c:	4618      	mov	r0, r3
 800a74e:	4770      	bx	lr
 800a750:	2300      	movs	r3, #0
 800a752:	e7e4      	b.n	800a71e <__hi0bits+0xa>

0800a754 <__lo0bits>:
 800a754:	6803      	ldr	r3, [r0, #0]
 800a756:	f013 0207 	ands.w	r2, r3, #7
 800a75a:	4601      	mov	r1, r0
 800a75c:	d00b      	beq.n	800a776 <__lo0bits+0x22>
 800a75e:	07da      	lsls	r2, r3, #31
 800a760:	d424      	bmi.n	800a7ac <__lo0bits+0x58>
 800a762:	0798      	lsls	r0, r3, #30
 800a764:	bf49      	itett	mi
 800a766:	085b      	lsrmi	r3, r3, #1
 800a768:	089b      	lsrpl	r3, r3, #2
 800a76a:	2001      	movmi	r0, #1
 800a76c:	600b      	strmi	r3, [r1, #0]
 800a76e:	bf5c      	itt	pl
 800a770:	600b      	strpl	r3, [r1, #0]
 800a772:	2002      	movpl	r0, #2
 800a774:	4770      	bx	lr
 800a776:	b298      	uxth	r0, r3
 800a778:	b9b0      	cbnz	r0, 800a7a8 <__lo0bits+0x54>
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	2010      	movs	r0, #16
 800a77e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a782:	bf04      	itt	eq
 800a784:	0a1b      	lsreq	r3, r3, #8
 800a786:	3008      	addeq	r0, #8
 800a788:	071a      	lsls	r2, r3, #28
 800a78a:	bf04      	itt	eq
 800a78c:	091b      	lsreq	r3, r3, #4
 800a78e:	3004      	addeq	r0, #4
 800a790:	079a      	lsls	r2, r3, #30
 800a792:	bf04      	itt	eq
 800a794:	089b      	lsreq	r3, r3, #2
 800a796:	3002      	addeq	r0, #2
 800a798:	07da      	lsls	r2, r3, #31
 800a79a:	d403      	bmi.n	800a7a4 <__lo0bits+0x50>
 800a79c:	085b      	lsrs	r3, r3, #1
 800a79e:	f100 0001 	add.w	r0, r0, #1
 800a7a2:	d005      	beq.n	800a7b0 <__lo0bits+0x5c>
 800a7a4:	600b      	str	r3, [r1, #0]
 800a7a6:	4770      	bx	lr
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	e7e8      	b.n	800a77e <__lo0bits+0x2a>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr
 800a7b0:	2020      	movs	r0, #32
 800a7b2:	4770      	bx	lr

0800a7b4 <__i2b>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff feb5 	bl	800a528 <_Balloc>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__i2b+0x1a>
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <__i2b+0x24>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	; (800a7dc <__i2b+0x28>)
 800a7c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ca:	f001 f827 	bl	800b81c <__assert_func>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6144      	str	r4, [r0, #20]
 800a7d2:	6103      	str	r3, [r0, #16]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800befc 	.word	0x0800befc
 800a7dc:	0800bff0 	.word	0x0800bff0

0800a7e0 <__multiply>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	690a      	ldr	r2, [r1, #16]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	bfb8      	it	lt
 800a7ee:	460b      	movlt	r3, r1
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	bfbc      	itt	lt
 800a7f4:	4625      	movlt	r5, r4
 800a7f6:	461c      	movlt	r4, r3
 800a7f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a7fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a800:	68ab      	ldr	r3, [r5, #8]
 800a802:	6869      	ldr	r1, [r5, #4]
 800a804:	eb0a 0709 	add.w	r7, sl, r9
 800a808:	42bb      	cmp	r3, r7
 800a80a:	b085      	sub	sp, #20
 800a80c:	bfb8      	it	lt
 800a80e:	3101      	addlt	r1, #1
 800a810:	f7ff fe8a 	bl	800a528 <_Balloc>
 800a814:	b930      	cbnz	r0, 800a824 <__multiply+0x44>
 800a816:	4602      	mov	r2, r0
 800a818:	4b42      	ldr	r3, [pc, #264]	; (800a924 <__multiply+0x144>)
 800a81a:	4843      	ldr	r0, [pc, #268]	; (800a928 <__multiply+0x148>)
 800a81c:	f240 115d 	movw	r1, #349	; 0x15d
 800a820:	f000 fffc 	bl	800b81c <__assert_func>
 800a824:	f100 0614 	add.w	r6, r0, #20
 800a828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a82c:	4633      	mov	r3, r6
 800a82e:	2200      	movs	r2, #0
 800a830:	4543      	cmp	r3, r8
 800a832:	d31e      	bcc.n	800a872 <__multiply+0x92>
 800a834:	f105 0c14 	add.w	ip, r5, #20
 800a838:	f104 0314 	add.w	r3, r4, #20
 800a83c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a844:	9202      	str	r2, [sp, #8]
 800a846:	ebac 0205 	sub.w	r2, ip, r5
 800a84a:	3a15      	subs	r2, #21
 800a84c:	f022 0203 	bic.w	r2, r2, #3
 800a850:	3204      	adds	r2, #4
 800a852:	f105 0115 	add.w	r1, r5, #21
 800a856:	458c      	cmp	ip, r1
 800a858:	bf38      	it	cc
 800a85a:	2204      	movcc	r2, #4
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9a02      	ldr	r2, [sp, #8]
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d808      	bhi.n	800a878 <__multiply+0x98>
 800a866:	2f00      	cmp	r7, #0
 800a868:	dc55      	bgt.n	800a916 <__multiply+0x136>
 800a86a:	6107      	str	r7, [r0, #16]
 800a86c:	b005      	add	sp, #20
 800a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a872:	f843 2b04 	str.w	r2, [r3], #4
 800a876:	e7db      	b.n	800a830 <__multiply+0x50>
 800a878:	f8b3 a000 	ldrh.w	sl, [r3]
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	d020      	beq.n	800a8c4 <__multiply+0xe4>
 800a882:	f105 0e14 	add.w	lr, r5, #20
 800a886:	46b1      	mov	r9, r6
 800a888:	2200      	movs	r2, #0
 800a88a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a88e:	f8d9 b000 	ldr.w	fp, [r9]
 800a892:	b2a1      	uxth	r1, r4
 800a894:	fa1f fb8b 	uxth.w	fp, fp
 800a898:	fb0a b101 	mla	r1, sl, r1, fp
 800a89c:	4411      	add	r1, r2
 800a89e:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a2:	0c24      	lsrs	r4, r4, #16
 800a8a4:	0c12      	lsrs	r2, r2, #16
 800a8a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a8aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a8ae:	b289      	uxth	r1, r1
 800a8b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8b4:	45f4      	cmp	ip, lr
 800a8b6:	f849 1b04 	str.w	r1, [r9], #4
 800a8ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a8be:	d8e4      	bhi.n	800a88a <__multiply+0xaa>
 800a8c0:	9901      	ldr	r1, [sp, #4]
 800a8c2:	5072      	str	r2, [r6, r1]
 800a8c4:	9a03      	ldr	r2, [sp, #12]
 800a8c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	d01f      	beq.n	800a912 <__multiply+0x132>
 800a8d2:	6834      	ldr	r4, [r6, #0]
 800a8d4:	f105 0114 	add.w	r1, r5, #20
 800a8d8:	46b6      	mov	lr, r6
 800a8da:	f04f 0a00 	mov.w	sl, #0
 800a8de:	880a      	ldrh	r2, [r1, #0]
 800a8e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a8e4:	fb09 b202 	mla	r2, r9, r2, fp
 800a8e8:	4492      	add	sl, r2
 800a8ea:	b2a4      	uxth	r4, r4
 800a8ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a8f0:	f84e 4b04 	str.w	r4, [lr], #4
 800a8f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a8f8:	f8be 2000 	ldrh.w	r2, [lr]
 800a8fc:	0c24      	lsrs	r4, r4, #16
 800a8fe:	fb09 2404 	mla	r4, r9, r4, r2
 800a902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a906:	458c      	cmp	ip, r1
 800a908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a90c:	d8e7      	bhi.n	800a8de <__multiply+0xfe>
 800a90e:	9a01      	ldr	r2, [sp, #4]
 800a910:	50b4      	str	r4, [r6, r2]
 800a912:	3604      	adds	r6, #4
 800a914:	e7a3      	b.n	800a85e <__multiply+0x7e>
 800a916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1a5      	bne.n	800a86a <__multiply+0x8a>
 800a91e:	3f01      	subs	r7, #1
 800a920:	e7a1      	b.n	800a866 <__multiply+0x86>
 800a922:	bf00      	nop
 800a924:	0800befc 	.word	0x0800befc
 800a928:	0800bff0 	.word	0x0800bff0

0800a92c <__pow5mult>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4615      	mov	r5, r2
 800a932:	f012 0203 	ands.w	r2, r2, #3
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	d007      	beq.n	800a94c <__pow5mult+0x20>
 800a93c:	4c25      	ldr	r4, [pc, #148]	; (800a9d4 <__pow5mult+0xa8>)
 800a93e:	3a01      	subs	r2, #1
 800a940:	2300      	movs	r3, #0
 800a942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a946:	f7ff fe51 	bl	800a5ec <__multadd>
 800a94a:	4607      	mov	r7, r0
 800a94c:	10ad      	asrs	r5, r5, #2
 800a94e:	d03d      	beq.n	800a9cc <__pow5mult+0xa0>
 800a950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a952:	b97c      	cbnz	r4, 800a974 <__pow5mult+0x48>
 800a954:	2010      	movs	r0, #16
 800a956:	f7ff fdbf 	bl	800a4d8 <malloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6270      	str	r0, [r6, #36]	; 0x24
 800a95e:	b928      	cbnz	r0, 800a96c <__pow5mult+0x40>
 800a960:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <__pow5mult+0xac>)
 800a962:	481e      	ldr	r0, [pc, #120]	; (800a9dc <__pow5mult+0xb0>)
 800a964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a968:	f000 ff58 	bl	800b81c <__assert_func>
 800a96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a970:	6004      	str	r4, [r0, #0]
 800a972:	60c4      	str	r4, [r0, #12]
 800a974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a97c:	b94c      	cbnz	r4, 800a992 <__pow5mult+0x66>
 800a97e:	f240 2171 	movw	r1, #625	; 0x271
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ff16 	bl	800a7b4 <__i2b>
 800a988:	2300      	movs	r3, #0
 800a98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a98e:	4604      	mov	r4, r0
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	f04f 0900 	mov.w	r9, #0
 800a996:	07eb      	lsls	r3, r5, #31
 800a998:	d50a      	bpl.n	800a9b0 <__pow5mult+0x84>
 800a99a:	4639      	mov	r1, r7
 800a99c:	4622      	mov	r2, r4
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ff1e 	bl	800a7e0 <__multiply>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff fdfd 	bl	800a5a8 <_Bfree>
 800a9ae:	4647      	mov	r7, r8
 800a9b0:	106d      	asrs	r5, r5, #1
 800a9b2:	d00b      	beq.n	800a9cc <__pow5mult+0xa0>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	b938      	cbnz	r0, 800a9c8 <__pow5mult+0x9c>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff ff0f 	bl	800a7e0 <__multiply>
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	f8c0 9000 	str.w	r9, [r0]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	e7e4      	b.n	800a996 <__pow5mult+0x6a>
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800c140 	.word	0x0800c140
 800a9d8:	0800be86 	.word	0x0800be86
 800a9dc:	0800bff0 	.word	0x0800bff0

0800a9e0 <__lshift>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	6849      	ldr	r1, [r1, #4]
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	4691      	mov	r9, r2
 800a9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9f8:	f108 0601 	add.w	r6, r8, #1
 800a9fc:	42b3      	cmp	r3, r6
 800a9fe:	db0b      	blt.n	800aa18 <__lshift+0x38>
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff fd91 	bl	800a528 <_Balloc>
 800aa06:	4605      	mov	r5, r0
 800aa08:	b948      	cbnz	r0, 800aa1e <__lshift+0x3e>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	4b28      	ldr	r3, [pc, #160]	; (800aab0 <__lshift+0xd0>)
 800aa0e:	4829      	ldr	r0, [pc, #164]	; (800aab4 <__lshift+0xd4>)
 800aa10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa14:	f000 ff02 	bl	800b81c <__assert_func>
 800aa18:	3101      	adds	r1, #1
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	e7ee      	b.n	800a9fc <__lshift+0x1c>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f100 0114 	add.w	r1, r0, #20
 800aa24:	f100 0210 	add.w	r2, r0, #16
 800aa28:	4618      	mov	r0, r3
 800aa2a:	4553      	cmp	r3, sl
 800aa2c:	db33      	blt.n	800aa96 <__lshift+0xb6>
 800aa2e:	6920      	ldr	r0, [r4, #16]
 800aa30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa34:	f104 0314 	add.w	r3, r4, #20
 800aa38:	f019 091f 	ands.w	r9, r9, #31
 800aa3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa44:	d02b      	beq.n	800aa9e <__lshift+0xbe>
 800aa46:	f1c9 0e20 	rsb	lr, r9, #32
 800aa4a:	468a      	mov	sl, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	fa00 f009 	lsl.w	r0, r0, r9
 800aa54:	4302      	orrs	r2, r0
 800aa56:	f84a 2b04 	str.w	r2, [sl], #4
 800aa5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa5e:	459c      	cmp	ip, r3
 800aa60:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa64:	d8f3      	bhi.n	800aa4e <__lshift+0x6e>
 800aa66:	ebac 0304 	sub.w	r3, ip, r4
 800aa6a:	3b15      	subs	r3, #21
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	3304      	adds	r3, #4
 800aa72:	f104 0015 	add.w	r0, r4, #21
 800aa76:	4584      	cmp	ip, r0
 800aa78:	bf38      	it	cc
 800aa7a:	2304      	movcc	r3, #4
 800aa7c:	50ca      	str	r2, [r1, r3]
 800aa7e:	b10a      	cbz	r2, 800aa84 <__lshift+0xa4>
 800aa80:	f108 0602 	add.w	r6, r8, #2
 800aa84:	3e01      	subs	r6, #1
 800aa86:	4638      	mov	r0, r7
 800aa88:	612e      	str	r6, [r5, #16]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f7ff fd8c 	bl	800a5a8 <_Bfree>
 800aa90:	4628      	mov	r0, r5
 800aa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa96:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	e7c5      	b.n	800aa2a <__lshift+0x4a>
 800aa9e:	3904      	subs	r1, #4
 800aaa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaa8:	459c      	cmp	ip, r3
 800aaaa:	d8f9      	bhi.n	800aaa0 <__lshift+0xc0>
 800aaac:	e7ea      	b.n	800aa84 <__lshift+0xa4>
 800aaae:	bf00      	nop
 800aab0:	0800befc 	.word	0x0800befc
 800aab4:	0800bff0 	.word	0x0800bff0

0800aab8 <__mcmp>:
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	6902      	ldr	r2, [r0, #16]
 800aabc:	690c      	ldr	r4, [r1, #16]
 800aabe:	1b12      	subs	r2, r2, r4
 800aac0:	d10e      	bne.n	800aae0 <__mcmp+0x28>
 800aac2:	f100 0314 	add.w	r3, r0, #20
 800aac6:	3114      	adds	r1, #20
 800aac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aacc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aad8:	42a5      	cmp	r5, r4
 800aada:	d003      	beq.n	800aae4 <__mcmp+0x2c>
 800aadc:	d305      	bcc.n	800aaea <__mcmp+0x32>
 800aade:	2201      	movs	r2, #1
 800aae0:	4610      	mov	r0, r2
 800aae2:	bd30      	pop	{r4, r5, pc}
 800aae4:	4283      	cmp	r3, r0
 800aae6:	d3f3      	bcc.n	800aad0 <__mcmp+0x18>
 800aae8:	e7fa      	b.n	800aae0 <__mcmp+0x28>
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295
 800aaee:	e7f7      	b.n	800aae0 <__mcmp+0x28>

0800aaf0 <__mdiff>:
 800aaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4620      	mov	r0, r4
 800aafc:	4617      	mov	r7, r2
 800aafe:	f7ff ffdb 	bl	800aab8 <__mcmp>
 800ab02:	1e05      	subs	r5, r0, #0
 800ab04:	d110      	bne.n	800ab28 <__mdiff+0x38>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff fd0d 	bl	800a528 <_Balloc>
 800ab0e:	b930      	cbnz	r0, 800ab1e <__mdiff+0x2e>
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <__mdiff+0x108>)
 800ab12:	4602      	mov	r2, r0
 800ab14:	f240 2132 	movw	r1, #562	; 0x232
 800ab18:	4838      	ldr	r0, [pc, #224]	; (800abfc <__mdiff+0x10c>)
 800ab1a:	f000 fe7f 	bl	800b81c <__assert_func>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab28:	bfa4      	itt	ge
 800ab2a:	463b      	movge	r3, r7
 800ab2c:	4627      	movge	r7, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	bfa6      	itte	ge
 800ab34:	461c      	movge	r4, r3
 800ab36:	2500      	movge	r5, #0
 800ab38:	2501      	movlt	r5, #1
 800ab3a:	f7ff fcf5 	bl	800a528 <_Balloc>
 800ab3e:	b920      	cbnz	r0, 800ab4a <__mdiff+0x5a>
 800ab40:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <__mdiff+0x108>)
 800ab42:	4602      	mov	r2, r0
 800ab44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab48:	e7e6      	b.n	800ab18 <__mdiff+0x28>
 800ab4a:	693e      	ldr	r6, [r7, #16]
 800ab4c:	60c5      	str	r5, [r0, #12]
 800ab4e:	6925      	ldr	r5, [r4, #16]
 800ab50:	f107 0114 	add.w	r1, r7, #20
 800ab54:	f104 0914 	add.w	r9, r4, #20
 800ab58:	f100 0e14 	add.w	lr, r0, #20
 800ab5c:	f107 0210 	add.w	r2, r7, #16
 800ab60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ab64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ab68:	46f2      	mov	sl, lr
 800ab6a:	2700      	movs	r7, #0
 800ab6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab74:	fa1f f883 	uxth.w	r8, r3
 800ab78:	fa17 f78b 	uxtah	r7, r7, fp
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	eba7 0808 	sub.w	r8, r7, r8
 800ab82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab8a:	fa1f f888 	uxth.w	r8, r8
 800ab8e:	141f      	asrs	r7, r3, #16
 800ab90:	454d      	cmp	r5, r9
 800ab92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab96:	f84a 3b04 	str.w	r3, [sl], #4
 800ab9a:	d8e7      	bhi.n	800ab6c <__mdiff+0x7c>
 800ab9c:	1b2b      	subs	r3, r5, r4
 800ab9e:	3b15      	subs	r3, #21
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	3304      	adds	r3, #4
 800aba6:	3415      	adds	r4, #21
 800aba8:	42a5      	cmp	r5, r4
 800abaa:	bf38      	it	cc
 800abac:	2304      	movcc	r3, #4
 800abae:	4419      	add	r1, r3
 800abb0:	4473      	add	r3, lr
 800abb2:	469e      	mov	lr, r3
 800abb4:	460d      	mov	r5, r1
 800abb6:	4565      	cmp	r5, ip
 800abb8:	d30e      	bcc.n	800abd8 <__mdiff+0xe8>
 800abba:	f10c 0203 	add.w	r2, ip, #3
 800abbe:	1a52      	subs	r2, r2, r1
 800abc0:	f022 0203 	bic.w	r2, r2, #3
 800abc4:	3903      	subs	r1, #3
 800abc6:	458c      	cmp	ip, r1
 800abc8:	bf38      	it	cc
 800abca:	2200      	movcc	r2, #0
 800abcc:	441a      	add	r2, r3
 800abce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abd2:	b17b      	cbz	r3, 800abf4 <__mdiff+0x104>
 800abd4:	6106      	str	r6, [r0, #16]
 800abd6:	e7a5      	b.n	800ab24 <__mdiff+0x34>
 800abd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800abdc:	fa17 f488 	uxtah	r4, r7, r8
 800abe0:	1422      	asrs	r2, r4, #16
 800abe2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800abe6:	b2a4      	uxth	r4, r4
 800abe8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800abec:	f84e 4b04 	str.w	r4, [lr], #4
 800abf0:	1417      	asrs	r7, r2, #16
 800abf2:	e7e0      	b.n	800abb6 <__mdiff+0xc6>
 800abf4:	3e01      	subs	r6, #1
 800abf6:	e7ea      	b.n	800abce <__mdiff+0xde>
 800abf8:	0800befc 	.word	0x0800befc
 800abfc:	0800bff0 	.word	0x0800bff0

0800ac00 <__ulp>:
 800ac00:	b082      	sub	sp, #8
 800ac02:	ed8d 0b00 	vstr	d0, [sp]
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	4912      	ldr	r1, [pc, #72]	; (800ac54 <__ulp+0x54>)
 800ac0a:	4019      	ands	r1, r3
 800ac0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac10:	2900      	cmp	r1, #0
 800ac12:	dd05      	ble.n	800ac20 <__ulp+0x20>
 800ac14:	2200      	movs	r2, #0
 800ac16:	460b      	mov	r3, r1
 800ac18:	ec43 2b10 	vmov	d0, r2, r3
 800ac1c:	b002      	add	sp, #8
 800ac1e:	4770      	bx	lr
 800ac20:	4249      	negs	r1, r1
 800ac22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	da04      	bge.n	800ac3e <__ulp+0x3e>
 800ac34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac38:	fa41 f300 	asr.w	r3, r1, r0
 800ac3c:	e7ec      	b.n	800ac18 <__ulp+0x18>
 800ac3e:	f1a0 0114 	sub.w	r1, r0, #20
 800ac42:	291e      	cmp	r1, #30
 800ac44:	bfda      	itte	le
 800ac46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ac4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ac4e:	2101      	movgt	r1, #1
 800ac50:	460a      	mov	r2, r1
 800ac52:	e7e1      	b.n	800ac18 <__ulp+0x18>
 800ac54:	7ff00000 	.word	0x7ff00000

0800ac58 <__b2d>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	6905      	ldr	r5, [r0, #16]
 800ac5c:	f100 0714 	add.w	r7, r0, #20
 800ac60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ac64:	1f2e      	subs	r6, r5, #4
 800ac66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fd52 	bl	800a714 <__hi0bits>
 800ac70:	f1c0 0320 	rsb	r3, r0, #32
 800ac74:	280a      	cmp	r0, #10
 800ac76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800acf4 <__b2d+0x9c>
 800ac7a:	600b      	str	r3, [r1, #0]
 800ac7c:	dc14      	bgt.n	800aca8 <__b2d+0x50>
 800ac7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ac82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ac86:	42b7      	cmp	r7, r6
 800ac88:	ea41 030c 	orr.w	r3, r1, ip
 800ac8c:	bf34      	ite	cc
 800ac8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac92:	2100      	movcs	r1, #0
 800ac94:	3015      	adds	r0, #21
 800ac96:	fa04 f000 	lsl.w	r0, r4, r0
 800ac9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac9e:	ea40 0201 	orr.w	r2, r0, r1
 800aca2:	ec43 2b10 	vmov	d0, r2, r3
 800aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca8:	42b7      	cmp	r7, r6
 800acaa:	bf3a      	itte	cc
 800acac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800acb4:	2100      	movcs	r1, #0
 800acb6:	380b      	subs	r0, #11
 800acb8:	d017      	beq.n	800acea <__b2d+0x92>
 800acba:	f1c0 0c20 	rsb	ip, r0, #32
 800acbe:	fa04 f500 	lsl.w	r5, r4, r0
 800acc2:	42be      	cmp	r6, r7
 800acc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800acc8:	ea45 0504 	orr.w	r5, r5, r4
 800accc:	bf8c      	ite	hi
 800acce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800acd2:	2400      	movls	r4, #0
 800acd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800acd8:	fa01 f000 	lsl.w	r0, r1, r0
 800acdc:	fa24 f40c 	lsr.w	r4, r4, ip
 800ace0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ace4:	ea40 0204 	orr.w	r2, r0, r4
 800ace8:	e7db      	b.n	800aca2 <__b2d+0x4a>
 800acea:	ea44 030c 	orr.w	r3, r4, ip
 800acee:	460a      	mov	r2, r1
 800acf0:	e7d7      	b.n	800aca2 <__b2d+0x4a>
 800acf2:	bf00      	nop
 800acf4:	3ff00000 	.word	0x3ff00000

0800acf8 <__d2b>:
 800acf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4689      	mov	r9, r1
 800acfe:	2101      	movs	r1, #1
 800ad00:	ec57 6b10 	vmov	r6, r7, d0
 800ad04:	4690      	mov	r8, r2
 800ad06:	f7ff fc0f 	bl	800a528 <_Balloc>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	b930      	cbnz	r0, 800ad1c <__d2b+0x24>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <__d2b+0xb0>)
 800ad12:	4826      	ldr	r0, [pc, #152]	; (800adac <__d2b+0xb4>)
 800ad14:	f240 310a 	movw	r1, #778	; 0x30a
 800ad18:	f000 fd80 	bl	800b81c <__assert_func>
 800ad1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad24:	bb35      	cbnz	r5, 800ad74 <__d2b+0x7c>
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	d028      	beq.n	800ad7e <__d2b+0x86>
 800ad2c:	4668      	mov	r0, sp
 800ad2e:	9600      	str	r6, [sp, #0]
 800ad30:	f7ff fd10 	bl	800a754 <__lo0bits>
 800ad34:	9900      	ldr	r1, [sp, #0]
 800ad36:	b300      	cbz	r0, 800ad7a <__d2b+0x82>
 800ad38:	9a01      	ldr	r2, [sp, #4]
 800ad3a:	f1c0 0320 	rsb	r3, r0, #32
 800ad3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad42:	430b      	orrs	r3, r1
 800ad44:	40c2      	lsrs	r2, r0
 800ad46:	6163      	str	r3, [r4, #20]
 800ad48:	9201      	str	r2, [sp, #4]
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	61a3      	str	r3, [r4, #24]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bf14      	ite	ne
 800ad52:	2202      	movne	r2, #2
 800ad54:	2201      	moveq	r2, #1
 800ad56:	6122      	str	r2, [r4, #16]
 800ad58:	b1d5      	cbz	r5, 800ad90 <__d2b+0x98>
 800ad5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad5e:	4405      	add	r5, r0
 800ad60:	f8c9 5000 	str.w	r5, [r9]
 800ad64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad68:	f8c8 0000 	str.w	r0, [r8]
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	b003      	add	sp, #12
 800ad70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad78:	e7d5      	b.n	800ad26 <__d2b+0x2e>
 800ad7a:	6161      	str	r1, [r4, #20]
 800ad7c:	e7e5      	b.n	800ad4a <__d2b+0x52>
 800ad7e:	a801      	add	r0, sp, #4
 800ad80:	f7ff fce8 	bl	800a754 <__lo0bits>
 800ad84:	9b01      	ldr	r3, [sp, #4]
 800ad86:	6163      	str	r3, [r4, #20]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	6122      	str	r2, [r4, #16]
 800ad8c:	3020      	adds	r0, #32
 800ad8e:	e7e3      	b.n	800ad58 <__d2b+0x60>
 800ad90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad98:	f8c9 0000 	str.w	r0, [r9]
 800ad9c:	6918      	ldr	r0, [r3, #16]
 800ad9e:	f7ff fcb9 	bl	800a714 <__hi0bits>
 800ada2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ada6:	e7df      	b.n	800ad68 <__d2b+0x70>
 800ada8:	0800befc 	.word	0x0800befc
 800adac:	0800bff0 	.word	0x0800bff0

0800adb0 <__ratio>:
 800adb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	4688      	mov	r8, r1
 800adb6:	4669      	mov	r1, sp
 800adb8:	4681      	mov	r9, r0
 800adba:	f7ff ff4d 	bl	800ac58 <__b2d>
 800adbe:	a901      	add	r1, sp, #4
 800adc0:	4640      	mov	r0, r8
 800adc2:	ec55 4b10 	vmov	r4, r5, d0
 800adc6:	f7ff ff47 	bl	800ac58 <__b2d>
 800adca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800add2:	eba3 0c02 	sub.w	ip, r3, r2
 800add6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ade0:	ec51 0b10 	vmov	r0, r1, d0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfd6      	itet	le
 800ade8:	460a      	movle	r2, r1
 800adea:	462a      	movgt	r2, r5
 800adec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adf0:	468b      	mov	fp, r1
 800adf2:	462f      	mov	r7, r5
 800adf4:	bfd4      	ite	le
 800adf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800adfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adfe:	4620      	mov	r0, r4
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	465b      	mov	r3, fp
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fd30 	bl	800086c <__aeabi_ddiv>
 800ae0c:	ec41 0b10 	vmov	d0, r0, r1
 800ae10:	b003      	add	sp, #12
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae16 <__copybits>:
 800ae16:	3901      	subs	r1, #1
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	1149      	asrs	r1, r1, #5
 800ae1c:	6914      	ldr	r4, [r2, #16]
 800ae1e:	3101      	adds	r1, #1
 800ae20:	f102 0314 	add.w	r3, r2, #20
 800ae24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae2c:	1f05      	subs	r5, r0, #4
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	d30c      	bcc.n	800ae4c <__copybits+0x36>
 800ae32:	1aa3      	subs	r3, r4, r2
 800ae34:	3b11      	subs	r3, #17
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	3211      	adds	r2, #17
 800ae3c:	42a2      	cmp	r2, r4
 800ae3e:	bf88      	it	hi
 800ae40:	2300      	movhi	r3, #0
 800ae42:	4418      	add	r0, r3
 800ae44:	2300      	movs	r3, #0
 800ae46:	4288      	cmp	r0, r1
 800ae48:	d305      	bcc.n	800ae56 <__copybits+0x40>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae54:	e7eb      	b.n	800ae2e <__copybits+0x18>
 800ae56:	f840 3b04 	str.w	r3, [r0], #4
 800ae5a:	e7f4      	b.n	800ae46 <__copybits+0x30>

0800ae5c <__any_on>:
 800ae5c:	f100 0214 	add.w	r2, r0, #20
 800ae60:	6900      	ldr	r0, [r0, #16]
 800ae62:	114b      	asrs	r3, r1, #5
 800ae64:	4298      	cmp	r0, r3
 800ae66:	b510      	push	{r4, lr}
 800ae68:	db11      	blt.n	800ae8e <__any_on+0x32>
 800ae6a:	dd0a      	ble.n	800ae82 <__any_on+0x26>
 800ae6c:	f011 011f 	ands.w	r1, r1, #31
 800ae70:	d007      	beq.n	800ae82 <__any_on+0x26>
 800ae72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae76:	fa24 f001 	lsr.w	r0, r4, r1
 800ae7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ae7e:	428c      	cmp	r4, r1
 800ae80:	d10b      	bne.n	800ae9a <__any_on+0x3e>
 800ae82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d803      	bhi.n	800ae92 <__any_on+0x36>
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	4603      	mov	r3, r0
 800ae90:	e7f7      	b.n	800ae82 <__any_on+0x26>
 800ae92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae96:	2900      	cmp	r1, #0
 800ae98:	d0f5      	beq.n	800ae86 <__any_on+0x2a>
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	e7f6      	b.n	800ae8c <__any_on+0x30>

0800ae9e <_calloc_r>:
 800ae9e:	b513      	push	{r0, r1, r4, lr}
 800aea0:	434a      	muls	r2, r1
 800aea2:	4611      	mov	r1, r2
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	f000 f859 	bl	800af5c <_malloc_r>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	b118      	cbz	r0, 800aeb6 <_calloc_r+0x18>
 800aeae:	9a01      	ldr	r2, [sp, #4]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	f7fc facf 	bl	8007454 <memset>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd10      	pop	{r4, pc}

0800aebc <_free_r>:
 800aebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aebe:	2900      	cmp	r1, #0
 800aec0:	d048      	beq.n	800af54 <_free_r+0x98>
 800aec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec6:	9001      	str	r0, [sp, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f1a1 0404 	sub.w	r4, r1, #4
 800aece:	bfb8      	it	lt
 800aed0:	18e4      	addlt	r4, r4, r3
 800aed2:	f000 fe35 	bl	800bb40 <__malloc_lock>
 800aed6:	4a20      	ldr	r2, [pc, #128]	; (800af58 <_free_r+0x9c>)
 800aed8:	9801      	ldr	r0, [sp, #4]
 800aeda:	6813      	ldr	r3, [r2, #0]
 800aedc:	4615      	mov	r5, r2
 800aede:	b933      	cbnz	r3, 800aeee <_free_r+0x32>
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	6014      	str	r4, [r2, #0]
 800aee4:	b003      	add	sp, #12
 800aee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeea:	f000 be2f 	b.w	800bb4c <__malloc_unlock>
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	d90b      	bls.n	800af0a <_free_r+0x4e>
 800aef2:	6821      	ldr	r1, [r4, #0]
 800aef4:	1862      	adds	r2, r4, r1
 800aef6:	4293      	cmp	r3, r2
 800aef8:	bf04      	itt	eq
 800aefa:	681a      	ldreq	r2, [r3, #0]
 800aefc:	685b      	ldreq	r3, [r3, #4]
 800aefe:	6063      	str	r3, [r4, #4]
 800af00:	bf04      	itt	eq
 800af02:	1852      	addeq	r2, r2, r1
 800af04:	6022      	streq	r2, [r4, #0]
 800af06:	602c      	str	r4, [r5, #0]
 800af08:	e7ec      	b.n	800aee4 <_free_r+0x28>
 800af0a:	461a      	mov	r2, r3
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	b10b      	cbz	r3, 800af14 <_free_r+0x58>
 800af10:	42a3      	cmp	r3, r4
 800af12:	d9fa      	bls.n	800af0a <_free_r+0x4e>
 800af14:	6811      	ldr	r1, [r2, #0]
 800af16:	1855      	adds	r5, r2, r1
 800af18:	42a5      	cmp	r5, r4
 800af1a:	d10b      	bne.n	800af34 <_free_r+0x78>
 800af1c:	6824      	ldr	r4, [r4, #0]
 800af1e:	4421      	add	r1, r4
 800af20:	1854      	adds	r4, r2, r1
 800af22:	42a3      	cmp	r3, r4
 800af24:	6011      	str	r1, [r2, #0]
 800af26:	d1dd      	bne.n	800aee4 <_free_r+0x28>
 800af28:	681c      	ldr	r4, [r3, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	6053      	str	r3, [r2, #4]
 800af2e:	4421      	add	r1, r4
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	e7d7      	b.n	800aee4 <_free_r+0x28>
 800af34:	d902      	bls.n	800af3c <_free_r+0x80>
 800af36:	230c      	movs	r3, #12
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	e7d3      	b.n	800aee4 <_free_r+0x28>
 800af3c:	6825      	ldr	r5, [r4, #0]
 800af3e:	1961      	adds	r1, r4, r5
 800af40:	428b      	cmp	r3, r1
 800af42:	bf04      	itt	eq
 800af44:	6819      	ldreq	r1, [r3, #0]
 800af46:	685b      	ldreq	r3, [r3, #4]
 800af48:	6063      	str	r3, [r4, #4]
 800af4a:	bf04      	itt	eq
 800af4c:	1949      	addeq	r1, r1, r5
 800af4e:	6021      	streq	r1, [r4, #0]
 800af50:	6054      	str	r4, [r2, #4]
 800af52:	e7c7      	b.n	800aee4 <_free_r+0x28>
 800af54:	b003      	add	sp, #12
 800af56:	bd30      	pop	{r4, r5, pc}
 800af58:	20000234 	.word	0x20000234

0800af5c <_malloc_r>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	1ccd      	adds	r5, r1, #3
 800af60:	f025 0503 	bic.w	r5, r5, #3
 800af64:	3508      	adds	r5, #8
 800af66:	2d0c      	cmp	r5, #12
 800af68:	bf38      	it	cc
 800af6a:	250c      	movcc	r5, #12
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	4606      	mov	r6, r0
 800af70:	db01      	blt.n	800af76 <_malloc_r+0x1a>
 800af72:	42a9      	cmp	r1, r5
 800af74:	d903      	bls.n	800af7e <_malloc_r+0x22>
 800af76:	230c      	movs	r3, #12
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	2000      	movs	r0, #0
 800af7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af7e:	f000 fddf 	bl	800bb40 <__malloc_lock>
 800af82:	4921      	ldr	r1, [pc, #132]	; (800b008 <_malloc_r+0xac>)
 800af84:	680a      	ldr	r2, [r1, #0]
 800af86:	4614      	mov	r4, r2
 800af88:	b99c      	cbnz	r4, 800afb2 <_malloc_r+0x56>
 800af8a:	4f20      	ldr	r7, [pc, #128]	; (800b00c <_malloc_r+0xb0>)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	b923      	cbnz	r3, 800af9a <_malloc_r+0x3e>
 800af90:	4621      	mov	r1, r4
 800af92:	4630      	mov	r0, r6
 800af94:	f000 fafc 	bl	800b590 <_sbrk_r>
 800af98:	6038      	str	r0, [r7, #0]
 800af9a:	4629      	mov	r1, r5
 800af9c:	4630      	mov	r0, r6
 800af9e:	f000 faf7 	bl	800b590 <_sbrk_r>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d123      	bne.n	800afee <_malloc_r+0x92>
 800afa6:	230c      	movs	r3, #12
 800afa8:	6033      	str	r3, [r6, #0]
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 fdce 	bl	800bb4c <__malloc_unlock>
 800afb0:	e7e3      	b.n	800af7a <_malloc_r+0x1e>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	1b5b      	subs	r3, r3, r5
 800afb6:	d417      	bmi.n	800afe8 <_malloc_r+0x8c>
 800afb8:	2b0b      	cmp	r3, #11
 800afba:	d903      	bls.n	800afc4 <_malloc_r+0x68>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	441c      	add	r4, r3
 800afc0:	6025      	str	r5, [r4, #0]
 800afc2:	e004      	b.n	800afce <_malloc_r+0x72>
 800afc4:	6863      	ldr	r3, [r4, #4]
 800afc6:	42a2      	cmp	r2, r4
 800afc8:	bf0c      	ite	eq
 800afca:	600b      	streq	r3, [r1, #0]
 800afcc:	6053      	strne	r3, [r2, #4]
 800afce:	4630      	mov	r0, r6
 800afd0:	f000 fdbc 	bl	800bb4c <__malloc_unlock>
 800afd4:	f104 000b 	add.w	r0, r4, #11
 800afd8:	1d23      	adds	r3, r4, #4
 800afda:	f020 0007 	bic.w	r0, r0, #7
 800afde:	1ac2      	subs	r2, r0, r3
 800afe0:	d0cc      	beq.n	800af7c <_malloc_r+0x20>
 800afe2:	1a1b      	subs	r3, r3, r0
 800afe4:	50a3      	str	r3, [r4, r2]
 800afe6:	e7c9      	b.n	800af7c <_malloc_r+0x20>
 800afe8:	4622      	mov	r2, r4
 800afea:	6864      	ldr	r4, [r4, #4]
 800afec:	e7cc      	b.n	800af88 <_malloc_r+0x2c>
 800afee:	1cc4      	adds	r4, r0, #3
 800aff0:	f024 0403 	bic.w	r4, r4, #3
 800aff4:	42a0      	cmp	r0, r4
 800aff6:	d0e3      	beq.n	800afc0 <_malloc_r+0x64>
 800aff8:	1a21      	subs	r1, r4, r0
 800affa:	4630      	mov	r0, r6
 800affc:	f000 fac8 	bl	800b590 <_sbrk_r>
 800b000:	3001      	adds	r0, #1
 800b002:	d1dd      	bne.n	800afc0 <_malloc_r+0x64>
 800b004:	e7cf      	b.n	800afa6 <_malloc_r+0x4a>
 800b006:	bf00      	nop
 800b008:	20000234 	.word	0x20000234
 800b00c:	20000238 	.word	0x20000238

0800b010 <__ssputs_r>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	688e      	ldr	r6, [r1, #8]
 800b016:	429e      	cmp	r6, r3
 800b018:	4682      	mov	sl, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	4690      	mov	r8, r2
 800b01e:	461f      	mov	r7, r3
 800b020:	d838      	bhi.n	800b094 <__ssputs_r+0x84>
 800b022:	898a      	ldrh	r2, [r1, #12]
 800b024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b028:	d032      	beq.n	800b090 <__ssputs_r+0x80>
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	6909      	ldr	r1, [r1, #16]
 800b02e:	eba5 0901 	sub.w	r9, r5, r1
 800b032:	6965      	ldr	r5, [r4, #20]
 800b034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b03c:	3301      	adds	r3, #1
 800b03e:	444b      	add	r3, r9
 800b040:	106d      	asrs	r5, r5, #1
 800b042:	429d      	cmp	r5, r3
 800b044:	bf38      	it	cc
 800b046:	461d      	movcc	r5, r3
 800b048:	0553      	lsls	r3, r2, #21
 800b04a:	d531      	bpl.n	800b0b0 <__ssputs_r+0xa0>
 800b04c:	4629      	mov	r1, r5
 800b04e:	f7ff ff85 	bl	800af5c <_malloc_r>
 800b052:	4606      	mov	r6, r0
 800b054:	b950      	cbnz	r0, 800b06c <__ssputs_r+0x5c>
 800b056:	230c      	movs	r3, #12
 800b058:	f8ca 3000 	str.w	r3, [sl]
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06c:	6921      	ldr	r1, [r4, #16]
 800b06e:	464a      	mov	r2, r9
 800b070:	f7ff fa4c 	bl	800a50c <memcpy>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07e:	81a3      	strh	r3, [r4, #12]
 800b080:	6126      	str	r6, [r4, #16]
 800b082:	6165      	str	r5, [r4, #20]
 800b084:	444e      	add	r6, r9
 800b086:	eba5 0509 	sub.w	r5, r5, r9
 800b08a:	6026      	str	r6, [r4, #0]
 800b08c:	60a5      	str	r5, [r4, #8]
 800b08e:	463e      	mov	r6, r7
 800b090:	42be      	cmp	r6, r7
 800b092:	d900      	bls.n	800b096 <__ssputs_r+0x86>
 800b094:	463e      	mov	r6, r7
 800b096:	4632      	mov	r2, r6
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	4641      	mov	r1, r8
 800b09c:	f000 fd36 	bl	800bb0c <memmove>
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	1b9b      	subs	r3, r3, r6
 800b0a6:	4432      	add	r2, r6
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	6022      	str	r2, [r4, #0]
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7db      	b.n	800b068 <__ssputs_r+0x58>
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	f000 fd51 	bl	800bb58 <_realloc_r>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1e1      	bne.n	800b080 <__ssputs_r+0x70>
 800b0bc:	6921      	ldr	r1, [r4, #16]
 800b0be:	4650      	mov	r0, sl
 800b0c0:	f7ff fefc 	bl	800aebc <_free_r>
 800b0c4:	e7c7      	b.n	800b056 <__ssputs_r+0x46>
	...

0800b0c8 <_svfiprintf_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	4698      	mov	r8, r3
 800b0ce:	898b      	ldrh	r3, [r1, #12]
 800b0d0:	061b      	lsls	r3, r3, #24
 800b0d2:	b09d      	sub	sp, #116	; 0x74
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	4614      	mov	r4, r2
 800b0da:	d50e      	bpl.n	800b0fa <_svfiprintf_r+0x32>
 800b0dc:	690b      	ldr	r3, [r1, #16]
 800b0de:	b963      	cbnz	r3, 800b0fa <_svfiprintf_r+0x32>
 800b0e0:	2140      	movs	r1, #64	; 0x40
 800b0e2:	f7ff ff3b 	bl	800af5c <_malloc_r>
 800b0e6:	6028      	str	r0, [r5, #0]
 800b0e8:	6128      	str	r0, [r5, #16]
 800b0ea:	b920      	cbnz	r0, 800b0f6 <_svfiprintf_r+0x2e>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	e0d1      	b.n	800b29a <_svfiprintf_r+0x1d2>
 800b0f6:	2340      	movs	r3, #64	; 0x40
 800b0f8:	616b      	str	r3, [r5, #20]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fe:	2320      	movs	r3, #32
 800b100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b104:	f8cd 800c 	str.w	r8, [sp, #12]
 800b108:	2330      	movs	r3, #48	; 0x30
 800b10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2b4 <_svfiprintf_r+0x1ec>
 800b10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b112:	f04f 0901 	mov.w	r9, #1
 800b116:	4623      	mov	r3, r4
 800b118:	469a      	mov	sl, r3
 800b11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b11e:	b10a      	cbz	r2, 800b124 <_svfiprintf_r+0x5c>
 800b120:	2a25      	cmp	r2, #37	; 0x25
 800b122:	d1f9      	bne.n	800b118 <_svfiprintf_r+0x50>
 800b124:	ebba 0b04 	subs.w	fp, sl, r4
 800b128:	d00b      	beq.n	800b142 <_svfiprintf_r+0x7a>
 800b12a:	465b      	mov	r3, fp
 800b12c:	4622      	mov	r2, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	4638      	mov	r0, r7
 800b132:	f7ff ff6d 	bl	800b010 <__ssputs_r>
 800b136:	3001      	adds	r0, #1
 800b138:	f000 80aa 	beq.w	800b290 <_svfiprintf_r+0x1c8>
 800b13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b13e:	445a      	add	r2, fp
 800b140:	9209      	str	r2, [sp, #36]	; 0x24
 800b142:	f89a 3000 	ldrb.w	r3, [sl]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 80a2 	beq.w	800b290 <_svfiprintf_r+0x1c8>
 800b14c:	2300      	movs	r3, #0
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295
 800b152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b156:	f10a 0a01 	add.w	sl, sl, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	9307      	str	r3, [sp, #28]
 800b15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b162:	931a      	str	r3, [sp, #104]	; 0x68
 800b164:	4654      	mov	r4, sl
 800b166:	2205      	movs	r2, #5
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	4851      	ldr	r0, [pc, #324]	; (800b2b4 <_svfiprintf_r+0x1ec>)
 800b16e:	f7f5 f847 	bl	8000200 <memchr>
 800b172:	9a04      	ldr	r2, [sp, #16]
 800b174:	b9d8      	cbnz	r0, 800b1ae <_svfiprintf_r+0xe6>
 800b176:	06d0      	lsls	r0, r2, #27
 800b178:	bf44      	itt	mi
 800b17a:	2320      	movmi	r3, #32
 800b17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b180:	0711      	lsls	r1, r2, #28
 800b182:	bf44      	itt	mi
 800b184:	232b      	movmi	r3, #43	; 0x2b
 800b186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18a:	f89a 3000 	ldrb.w	r3, [sl]
 800b18e:	2b2a      	cmp	r3, #42	; 0x2a
 800b190:	d015      	beq.n	800b1be <_svfiprintf_r+0xf6>
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	4654      	mov	r4, sl
 800b196:	2000      	movs	r0, #0
 800b198:	f04f 0c0a 	mov.w	ip, #10
 800b19c:	4621      	mov	r1, r4
 800b19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a2:	3b30      	subs	r3, #48	; 0x30
 800b1a4:	2b09      	cmp	r3, #9
 800b1a6:	d94e      	bls.n	800b246 <_svfiprintf_r+0x17e>
 800b1a8:	b1b0      	cbz	r0, 800b1d8 <_svfiprintf_r+0x110>
 800b1aa:	9207      	str	r2, [sp, #28]
 800b1ac:	e014      	b.n	800b1d8 <_svfiprintf_r+0x110>
 800b1ae:	eba0 0308 	sub.w	r3, r0, r8
 800b1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	46a2      	mov	sl, r4
 800b1bc:	e7d2      	b.n	800b164 <_svfiprintf_r+0x9c>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	1d19      	adds	r1, r3, #4
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	9103      	str	r1, [sp, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bfbb      	ittet	lt
 800b1ca:	425b      	neglt	r3, r3
 800b1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d0:	9307      	strge	r3, [sp, #28]
 800b1d2:	9307      	strlt	r3, [sp, #28]
 800b1d4:	bfb8      	it	lt
 800b1d6:	9204      	strlt	r2, [sp, #16]
 800b1d8:	7823      	ldrb	r3, [r4, #0]
 800b1da:	2b2e      	cmp	r3, #46	; 0x2e
 800b1dc:	d10c      	bne.n	800b1f8 <_svfiprintf_r+0x130>
 800b1de:	7863      	ldrb	r3, [r4, #1]
 800b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e2:	d135      	bne.n	800b250 <_svfiprintf_r+0x188>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	9203      	str	r2, [sp, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bfb8      	it	lt
 800b1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1f4:	3402      	adds	r4, #2
 800b1f6:	9305      	str	r3, [sp, #20]
 800b1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2c4 <_svfiprintf_r+0x1fc>
 800b1fc:	7821      	ldrb	r1, [r4, #0]
 800b1fe:	2203      	movs	r2, #3
 800b200:	4650      	mov	r0, sl
 800b202:	f7f4 fffd 	bl	8000200 <memchr>
 800b206:	b140      	cbz	r0, 800b21a <_svfiprintf_r+0x152>
 800b208:	2340      	movs	r3, #64	; 0x40
 800b20a:	eba0 000a 	sub.w	r0, r0, sl
 800b20e:	fa03 f000 	lsl.w	r0, r3, r0
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	4303      	orrs	r3, r0
 800b216:	3401      	adds	r4, #1
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21e:	4826      	ldr	r0, [pc, #152]	; (800b2b8 <_svfiprintf_r+0x1f0>)
 800b220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b224:	2206      	movs	r2, #6
 800b226:	f7f4 ffeb 	bl	8000200 <memchr>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d038      	beq.n	800b2a0 <_svfiprintf_r+0x1d8>
 800b22e:	4b23      	ldr	r3, [pc, #140]	; (800b2bc <_svfiprintf_r+0x1f4>)
 800b230:	bb1b      	cbnz	r3, 800b27a <_svfiprintf_r+0x1b2>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	3307      	adds	r3, #7
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	3308      	adds	r3, #8
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b240:	4433      	add	r3, r6
 800b242:	9309      	str	r3, [sp, #36]	; 0x24
 800b244:	e767      	b.n	800b116 <_svfiprintf_r+0x4e>
 800b246:	fb0c 3202 	mla	r2, ip, r2, r3
 800b24a:	460c      	mov	r4, r1
 800b24c:	2001      	movs	r0, #1
 800b24e:	e7a5      	b.n	800b19c <_svfiprintf_r+0xd4>
 800b250:	2300      	movs	r3, #0
 800b252:	3401      	adds	r4, #1
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	4619      	mov	r1, r3
 800b258:	f04f 0c0a 	mov.w	ip, #10
 800b25c:	4620      	mov	r0, r4
 800b25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b262:	3a30      	subs	r2, #48	; 0x30
 800b264:	2a09      	cmp	r2, #9
 800b266:	d903      	bls.n	800b270 <_svfiprintf_r+0x1a8>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0c5      	beq.n	800b1f8 <_svfiprintf_r+0x130>
 800b26c:	9105      	str	r1, [sp, #20]
 800b26e:	e7c3      	b.n	800b1f8 <_svfiprintf_r+0x130>
 800b270:	fb0c 2101 	mla	r1, ip, r1, r2
 800b274:	4604      	mov	r4, r0
 800b276:	2301      	movs	r3, #1
 800b278:	e7f0      	b.n	800b25c <_svfiprintf_r+0x194>
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <_svfiprintf_r+0x1f8>)
 800b282:	a904      	add	r1, sp, #16
 800b284:	4638      	mov	r0, r7
 800b286:	f7fc f98d 	bl	80075a4 <_printf_float>
 800b28a:	1c42      	adds	r2, r0, #1
 800b28c:	4606      	mov	r6, r0
 800b28e:	d1d6      	bne.n	800b23e <_svfiprintf_r+0x176>
 800b290:	89ab      	ldrh	r3, [r5, #12]
 800b292:	065b      	lsls	r3, r3, #25
 800b294:	f53f af2c 	bmi.w	800b0f0 <_svfiprintf_r+0x28>
 800b298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b29a:	b01d      	add	sp, #116	; 0x74
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	ab03      	add	r3, sp, #12
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	462a      	mov	r2, r5
 800b2a6:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <_svfiprintf_r+0x1f8>)
 800b2a8:	a904      	add	r1, sp, #16
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7fc fc1e 	bl	8007aec <_printf_i>
 800b2b0:	e7eb      	b.n	800b28a <_svfiprintf_r+0x1c2>
 800b2b2:	bf00      	nop
 800b2b4:	0800c14c 	.word	0x0800c14c
 800b2b8:	0800c156 	.word	0x0800c156
 800b2bc:	080075a5 	.word	0x080075a5
 800b2c0:	0800b011 	.word	0x0800b011
 800b2c4:	0800c152 	.word	0x0800c152

0800b2c8 <__sfputc_r>:
 800b2c8:	6893      	ldr	r3, [r2, #8]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	b410      	push	{r4}
 800b2d0:	6093      	str	r3, [r2, #8]
 800b2d2:	da08      	bge.n	800b2e6 <__sfputc_r+0x1e>
 800b2d4:	6994      	ldr	r4, [r2, #24]
 800b2d6:	42a3      	cmp	r3, r4
 800b2d8:	db01      	blt.n	800b2de <__sfputc_r+0x16>
 800b2da:	290a      	cmp	r1, #10
 800b2dc:	d103      	bne.n	800b2e6 <__sfputc_r+0x1e>
 800b2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e2:	f000 b9bb 	b.w	800b65c <__swbuf_r>
 800b2e6:	6813      	ldr	r3, [r2, #0]
 800b2e8:	1c58      	adds	r0, r3, #1
 800b2ea:	6010      	str	r0, [r2, #0]
 800b2ec:	7019      	strb	r1, [r3, #0]
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <__sfputs_r>:
 800b2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	460f      	mov	r7, r1
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	18d5      	adds	r5, r2, r3
 800b300:	42ac      	cmp	r4, r5
 800b302:	d101      	bne.n	800b308 <__sfputs_r+0x12>
 800b304:	2000      	movs	r0, #0
 800b306:	e007      	b.n	800b318 <__sfputs_r+0x22>
 800b308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30c:	463a      	mov	r2, r7
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ffda 	bl	800b2c8 <__sfputc_r>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d1f3      	bne.n	800b300 <__sfputs_r+0xa>
 800b318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b31c <_vfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	460d      	mov	r5, r1
 800b322:	b09d      	sub	sp, #116	; 0x74
 800b324:	4614      	mov	r4, r2
 800b326:	4698      	mov	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	b118      	cbz	r0, 800b334 <_vfiprintf_r+0x18>
 800b32c:	6983      	ldr	r3, [r0, #24]
 800b32e:	b90b      	cbnz	r3, 800b334 <_vfiprintf_r+0x18>
 800b330:	f7fe fcbe 	bl	8009cb0 <__sinit>
 800b334:	4b89      	ldr	r3, [pc, #548]	; (800b55c <_vfiprintf_r+0x240>)
 800b336:	429d      	cmp	r5, r3
 800b338:	d11b      	bne.n	800b372 <_vfiprintf_r+0x56>
 800b33a:	6875      	ldr	r5, [r6, #4]
 800b33c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33e:	07d9      	lsls	r1, r3, #31
 800b340:	d405      	bmi.n	800b34e <_vfiprintf_r+0x32>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	059a      	lsls	r2, r3, #22
 800b346:	d402      	bmi.n	800b34e <_vfiprintf_r+0x32>
 800b348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b34a:	f7ff f8c2 	bl	800a4d2 <__retarget_lock_acquire_recursive>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	071b      	lsls	r3, r3, #28
 800b352:	d501      	bpl.n	800b358 <_vfiprintf_r+0x3c>
 800b354:	692b      	ldr	r3, [r5, #16]
 800b356:	b9eb      	cbnz	r3, 800b394 <_vfiprintf_r+0x78>
 800b358:	4629      	mov	r1, r5
 800b35a:	4630      	mov	r0, r6
 800b35c:	f000 f9f0 	bl	800b740 <__swsetup_r>
 800b360:	b1c0      	cbz	r0, 800b394 <_vfiprintf_r+0x78>
 800b362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b364:	07dc      	lsls	r4, r3, #31
 800b366:	d50e      	bpl.n	800b386 <_vfiprintf_r+0x6a>
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	b01d      	add	sp, #116	; 0x74
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b372:	4b7b      	ldr	r3, [pc, #492]	; (800b560 <_vfiprintf_r+0x244>)
 800b374:	429d      	cmp	r5, r3
 800b376:	d101      	bne.n	800b37c <_vfiprintf_r+0x60>
 800b378:	68b5      	ldr	r5, [r6, #8]
 800b37a:	e7df      	b.n	800b33c <_vfiprintf_r+0x20>
 800b37c:	4b79      	ldr	r3, [pc, #484]	; (800b564 <_vfiprintf_r+0x248>)
 800b37e:	429d      	cmp	r5, r3
 800b380:	bf08      	it	eq
 800b382:	68f5      	ldreq	r5, [r6, #12]
 800b384:	e7da      	b.n	800b33c <_vfiprintf_r+0x20>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	0598      	lsls	r0, r3, #22
 800b38a:	d4ed      	bmi.n	800b368 <_vfiprintf_r+0x4c>
 800b38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b38e:	f7ff f8a1 	bl	800a4d4 <__retarget_lock_release_recursive>
 800b392:	e7e9      	b.n	800b368 <_vfiprintf_r+0x4c>
 800b394:	2300      	movs	r3, #0
 800b396:	9309      	str	r3, [sp, #36]	; 0x24
 800b398:	2320      	movs	r3, #32
 800b39a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3a2:	2330      	movs	r3, #48	; 0x30
 800b3a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b568 <_vfiprintf_r+0x24c>
 800b3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ac:	f04f 0901 	mov.w	r9, #1
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	469a      	mov	sl, r3
 800b3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b8:	b10a      	cbz	r2, 800b3be <_vfiprintf_r+0xa2>
 800b3ba:	2a25      	cmp	r2, #37	; 0x25
 800b3bc:	d1f9      	bne.n	800b3b2 <_vfiprintf_r+0x96>
 800b3be:	ebba 0b04 	subs.w	fp, sl, r4
 800b3c2:	d00b      	beq.n	800b3dc <_vfiprintf_r+0xc0>
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	4622      	mov	r2, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f7ff ff93 	bl	800b2f6 <__sfputs_r>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f000 80aa 	beq.w	800b52a <_vfiprintf_r+0x20e>
 800b3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d8:	445a      	add	r2, fp
 800b3da:	9209      	str	r2, [sp, #36]	; 0x24
 800b3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80a2 	beq.w	800b52a <_vfiprintf_r+0x20e>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3f0:	f10a 0a01 	add.w	sl, sl, #1
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b3fe:	4654      	mov	r4, sl
 800b400:	2205      	movs	r2, #5
 800b402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b406:	4858      	ldr	r0, [pc, #352]	; (800b568 <_vfiprintf_r+0x24c>)
 800b408:	f7f4 fefa 	bl	8000200 <memchr>
 800b40c:	9a04      	ldr	r2, [sp, #16]
 800b40e:	b9d8      	cbnz	r0, 800b448 <_vfiprintf_r+0x12c>
 800b410:	06d1      	lsls	r1, r2, #27
 800b412:	bf44      	itt	mi
 800b414:	2320      	movmi	r3, #32
 800b416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b41a:	0713      	lsls	r3, r2, #28
 800b41c:	bf44      	itt	mi
 800b41e:	232b      	movmi	r3, #43	; 0x2b
 800b420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b424:	f89a 3000 	ldrb.w	r3, [sl]
 800b428:	2b2a      	cmp	r3, #42	; 0x2a
 800b42a:	d015      	beq.n	800b458 <_vfiprintf_r+0x13c>
 800b42c:	9a07      	ldr	r2, [sp, #28]
 800b42e:	4654      	mov	r4, sl
 800b430:	2000      	movs	r0, #0
 800b432:	f04f 0c0a 	mov.w	ip, #10
 800b436:	4621      	mov	r1, r4
 800b438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b43c:	3b30      	subs	r3, #48	; 0x30
 800b43e:	2b09      	cmp	r3, #9
 800b440:	d94e      	bls.n	800b4e0 <_vfiprintf_r+0x1c4>
 800b442:	b1b0      	cbz	r0, 800b472 <_vfiprintf_r+0x156>
 800b444:	9207      	str	r2, [sp, #28]
 800b446:	e014      	b.n	800b472 <_vfiprintf_r+0x156>
 800b448:	eba0 0308 	sub.w	r3, r0, r8
 800b44c:	fa09 f303 	lsl.w	r3, r9, r3
 800b450:	4313      	orrs	r3, r2
 800b452:	9304      	str	r3, [sp, #16]
 800b454:	46a2      	mov	sl, r4
 800b456:	e7d2      	b.n	800b3fe <_vfiprintf_r+0xe2>
 800b458:	9b03      	ldr	r3, [sp, #12]
 800b45a:	1d19      	adds	r1, r3, #4
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	9103      	str	r1, [sp, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfbb      	ittet	lt
 800b464:	425b      	neglt	r3, r3
 800b466:	f042 0202 	orrlt.w	r2, r2, #2
 800b46a:	9307      	strge	r3, [sp, #28]
 800b46c:	9307      	strlt	r3, [sp, #28]
 800b46e:	bfb8      	it	lt
 800b470:	9204      	strlt	r2, [sp, #16]
 800b472:	7823      	ldrb	r3, [r4, #0]
 800b474:	2b2e      	cmp	r3, #46	; 0x2e
 800b476:	d10c      	bne.n	800b492 <_vfiprintf_r+0x176>
 800b478:	7863      	ldrb	r3, [r4, #1]
 800b47a:	2b2a      	cmp	r3, #42	; 0x2a
 800b47c:	d135      	bne.n	800b4ea <_vfiprintf_r+0x1ce>
 800b47e:	9b03      	ldr	r3, [sp, #12]
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	9203      	str	r2, [sp, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	bfb8      	it	lt
 800b48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b48e:	3402      	adds	r4, #2
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b578 <_vfiprintf_r+0x25c>
 800b496:	7821      	ldrb	r1, [r4, #0]
 800b498:	2203      	movs	r2, #3
 800b49a:	4650      	mov	r0, sl
 800b49c:	f7f4 feb0 	bl	8000200 <memchr>
 800b4a0:	b140      	cbz	r0, 800b4b4 <_vfiprintf_r+0x198>
 800b4a2:	2340      	movs	r3, #64	; 0x40
 800b4a4:	eba0 000a 	sub.w	r0, r0, sl
 800b4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	4303      	orrs	r3, r0
 800b4b0:	3401      	adds	r4, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	482c      	ldr	r0, [pc, #176]	; (800b56c <_vfiprintf_r+0x250>)
 800b4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4be:	2206      	movs	r2, #6
 800b4c0:	f7f4 fe9e 	bl	8000200 <memchr>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d03f      	beq.n	800b548 <_vfiprintf_r+0x22c>
 800b4c8:	4b29      	ldr	r3, [pc, #164]	; (800b570 <_vfiprintf_r+0x254>)
 800b4ca:	bb1b      	cbnz	r3, 800b514 <_vfiprintf_r+0x1f8>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	3307      	adds	r3, #7
 800b4d0:	f023 0307 	bic.w	r3, r3, #7
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4da:	443b      	add	r3, r7
 800b4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4de:	e767      	b.n	800b3b0 <_vfiprintf_r+0x94>
 800b4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	e7a5      	b.n	800b436 <_vfiprintf_r+0x11a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	3401      	adds	r4, #1
 800b4ee:	9305      	str	r3, [sp, #20]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f04f 0c0a 	mov.w	ip, #10
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4fc:	3a30      	subs	r2, #48	; 0x30
 800b4fe:	2a09      	cmp	r2, #9
 800b500:	d903      	bls.n	800b50a <_vfiprintf_r+0x1ee>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0c5      	beq.n	800b492 <_vfiprintf_r+0x176>
 800b506:	9105      	str	r1, [sp, #20]
 800b508:	e7c3      	b.n	800b492 <_vfiprintf_r+0x176>
 800b50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b50e:	4604      	mov	r4, r0
 800b510:	2301      	movs	r3, #1
 800b512:	e7f0      	b.n	800b4f6 <_vfiprintf_r+0x1da>
 800b514:	ab03      	add	r3, sp, #12
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	462a      	mov	r2, r5
 800b51a:	4b16      	ldr	r3, [pc, #88]	; (800b574 <_vfiprintf_r+0x258>)
 800b51c:	a904      	add	r1, sp, #16
 800b51e:	4630      	mov	r0, r6
 800b520:	f7fc f840 	bl	80075a4 <_printf_float>
 800b524:	4607      	mov	r7, r0
 800b526:	1c78      	adds	r0, r7, #1
 800b528:	d1d6      	bne.n	800b4d8 <_vfiprintf_r+0x1bc>
 800b52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b52c:	07d9      	lsls	r1, r3, #31
 800b52e:	d405      	bmi.n	800b53c <_vfiprintf_r+0x220>
 800b530:	89ab      	ldrh	r3, [r5, #12]
 800b532:	059a      	lsls	r2, r3, #22
 800b534:	d402      	bmi.n	800b53c <_vfiprintf_r+0x220>
 800b536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b538:	f7fe ffcc 	bl	800a4d4 <__retarget_lock_release_recursive>
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	065b      	lsls	r3, r3, #25
 800b540:	f53f af12 	bmi.w	800b368 <_vfiprintf_r+0x4c>
 800b544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b546:	e711      	b.n	800b36c <_vfiprintf_r+0x50>
 800b548:	ab03      	add	r3, sp, #12
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	462a      	mov	r2, r5
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <_vfiprintf_r+0x258>)
 800b550:	a904      	add	r1, sp, #16
 800b552:	4630      	mov	r0, r6
 800b554:	f7fc faca 	bl	8007aec <_printf_i>
 800b558:	e7e4      	b.n	800b524 <_vfiprintf_r+0x208>
 800b55a:	bf00      	nop
 800b55c:	0800bf30 	.word	0x0800bf30
 800b560:	0800bf50 	.word	0x0800bf50
 800b564:	0800bf10 	.word	0x0800bf10
 800b568:	0800c14c 	.word	0x0800c14c
 800b56c:	0800c156 	.word	0x0800c156
 800b570:	080075a5 	.word	0x080075a5
 800b574:	0800b2f7 	.word	0x0800b2f7
 800b578:	0800c152 	.word	0x0800c152
 800b57c:	00000000 	.word	0x00000000

0800b580 <nan>:
 800b580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b588 <nan+0x8>
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	00000000 	.word	0x00000000
 800b58c:	7ff80000 	.word	0x7ff80000

0800b590 <_sbrk_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d06      	ldr	r5, [pc, #24]	; (800b5ac <_sbrk_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f8 fde6 	bl	800416c <_sbrk>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_sbrk_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_sbrk_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20000794 	.word	0x20000794

0800b5b0 <__sread>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b8:	f000 faf4 	bl	800bba4 <_read_r>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	bfab      	itete	ge
 800b5c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5c4:	181b      	addge	r3, r3, r0
 800b5c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5ca:	bfac      	ite	ge
 800b5cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5ce:	81a3      	strhlt	r3, [r4, #12]
 800b5d0:	bd10      	pop	{r4, pc}

0800b5d2 <__swrite>:
 800b5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	898b      	ldrh	r3, [r1, #12]
 800b5da:	05db      	lsls	r3, r3, #23
 800b5dc:	4605      	mov	r5, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	d505      	bpl.n	800b5f0 <__swrite+0x1e>
 800b5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f000 fa18 	bl	800ba20 <_lseek_r>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	4628      	mov	r0, r5
 800b602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	f000 b889 	b.w	800b71c <_write_r>

0800b60a <__sseek>:
 800b60a:	b510      	push	{r4, lr}
 800b60c:	460c      	mov	r4, r1
 800b60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b612:	f000 fa05 	bl	800ba20 <_lseek_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	bf15      	itete	ne
 800b61c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b61e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b626:	81a3      	strheq	r3, [r4, #12]
 800b628:	bf18      	it	ne
 800b62a:	81a3      	strhne	r3, [r4, #12]
 800b62c:	bd10      	pop	{r4, pc}

0800b62e <__sclose>:
 800b62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b632:	f000 b911 	b.w	800b858 <_close_r>

0800b636 <strncmp>:
 800b636:	b510      	push	{r4, lr}
 800b638:	b16a      	cbz	r2, 800b656 <strncmp+0x20>
 800b63a:	3901      	subs	r1, #1
 800b63c:	1884      	adds	r4, r0, r2
 800b63e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b642:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b646:	4293      	cmp	r3, r2
 800b648:	d103      	bne.n	800b652 <strncmp+0x1c>
 800b64a:	42a0      	cmp	r0, r4
 800b64c:	d001      	beq.n	800b652 <strncmp+0x1c>
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f5      	bne.n	800b63e <strncmp+0x8>
 800b652:	1a98      	subs	r0, r3, r2
 800b654:	bd10      	pop	{r4, pc}
 800b656:	4610      	mov	r0, r2
 800b658:	e7fc      	b.n	800b654 <strncmp+0x1e>
	...

0800b65c <__swbuf_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	460e      	mov	r6, r1
 800b660:	4614      	mov	r4, r2
 800b662:	4605      	mov	r5, r0
 800b664:	b118      	cbz	r0, 800b66e <__swbuf_r+0x12>
 800b666:	6983      	ldr	r3, [r0, #24]
 800b668:	b90b      	cbnz	r3, 800b66e <__swbuf_r+0x12>
 800b66a:	f7fe fb21 	bl	8009cb0 <__sinit>
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <__swbuf_r+0x98>)
 800b670:	429c      	cmp	r4, r3
 800b672:	d12b      	bne.n	800b6cc <__swbuf_r+0x70>
 800b674:	686c      	ldr	r4, [r5, #4]
 800b676:	69a3      	ldr	r3, [r4, #24]
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	071a      	lsls	r2, r3, #28
 800b67e:	d52f      	bpl.n	800b6e0 <__swbuf_r+0x84>
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	b36b      	cbz	r3, 800b6e0 <__swbuf_r+0x84>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	6820      	ldr	r0, [r4, #0]
 800b688:	1ac0      	subs	r0, r0, r3
 800b68a:	6963      	ldr	r3, [r4, #20]
 800b68c:	b2f6      	uxtb	r6, r6
 800b68e:	4283      	cmp	r3, r0
 800b690:	4637      	mov	r7, r6
 800b692:	dc04      	bgt.n	800b69e <__swbuf_r+0x42>
 800b694:	4621      	mov	r1, r4
 800b696:	4628      	mov	r0, r5
 800b698:	f000 f974 	bl	800b984 <_fflush_r>
 800b69c:	bb30      	cbnz	r0, 800b6ec <__swbuf_r+0x90>
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	60a3      	str	r3, [r4, #8]
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	6022      	str	r2, [r4, #0]
 800b6aa:	701e      	strb	r6, [r3, #0]
 800b6ac:	6963      	ldr	r3, [r4, #20]
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	4283      	cmp	r3, r0
 800b6b2:	d004      	beq.n	800b6be <__swbuf_r+0x62>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	07db      	lsls	r3, r3, #31
 800b6b8:	d506      	bpl.n	800b6c8 <__swbuf_r+0x6c>
 800b6ba:	2e0a      	cmp	r6, #10
 800b6bc:	d104      	bne.n	800b6c8 <__swbuf_r+0x6c>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 f95f 	bl	800b984 <_fflush_r>
 800b6c6:	b988      	cbnz	r0, 800b6ec <__swbuf_r+0x90>
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <__swbuf_r+0x9c>)
 800b6ce:	429c      	cmp	r4, r3
 800b6d0:	d101      	bne.n	800b6d6 <__swbuf_r+0x7a>
 800b6d2:	68ac      	ldr	r4, [r5, #8]
 800b6d4:	e7cf      	b.n	800b676 <__swbuf_r+0x1a>
 800b6d6:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <__swbuf_r+0xa0>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	bf08      	it	eq
 800b6dc:	68ec      	ldreq	r4, [r5, #12]
 800b6de:	e7ca      	b.n	800b676 <__swbuf_r+0x1a>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f000 f82c 	bl	800b740 <__swsetup_r>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0cb      	beq.n	800b684 <__swbuf_r+0x28>
 800b6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f0:	e7ea      	b.n	800b6c8 <__swbuf_r+0x6c>
 800b6f2:	bf00      	nop
 800b6f4:	0800bf30 	.word	0x0800bf30
 800b6f8:	0800bf50 	.word	0x0800bf50
 800b6fc:	0800bf10 	.word	0x0800bf10

0800b700 <__ascii_wctomb>:
 800b700:	b149      	cbz	r1, 800b716 <__ascii_wctomb+0x16>
 800b702:	2aff      	cmp	r2, #255	; 0xff
 800b704:	bf85      	ittet	hi
 800b706:	238a      	movhi	r3, #138	; 0x8a
 800b708:	6003      	strhi	r3, [r0, #0]
 800b70a:	700a      	strbls	r2, [r1, #0]
 800b70c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b710:	bf98      	it	ls
 800b712:	2001      	movls	r0, #1
 800b714:	4770      	bx	lr
 800b716:	4608      	mov	r0, r1
 800b718:	4770      	bx	lr
	...

0800b71c <_write_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_write_r+0x20>)
 800b720:	4604      	mov	r4, r0
 800b722:	4608      	mov	r0, r1
 800b724:	4611      	mov	r1, r2
 800b726:	2200      	movs	r2, #0
 800b728:	602a      	str	r2, [r5, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f8 fccd 	bl	80040ca <_write>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_write_r+0x1e>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_write_r+0x1e>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20000794 	.word	0x20000794

0800b740 <__swsetup_r>:
 800b740:	4b32      	ldr	r3, [pc, #200]	; (800b80c <__swsetup_r+0xcc>)
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	681d      	ldr	r5, [r3, #0]
 800b746:	4606      	mov	r6, r0
 800b748:	460c      	mov	r4, r1
 800b74a:	b125      	cbz	r5, 800b756 <__swsetup_r+0x16>
 800b74c:	69ab      	ldr	r3, [r5, #24]
 800b74e:	b913      	cbnz	r3, 800b756 <__swsetup_r+0x16>
 800b750:	4628      	mov	r0, r5
 800b752:	f7fe faad 	bl	8009cb0 <__sinit>
 800b756:	4b2e      	ldr	r3, [pc, #184]	; (800b810 <__swsetup_r+0xd0>)
 800b758:	429c      	cmp	r4, r3
 800b75a:	d10f      	bne.n	800b77c <__swsetup_r+0x3c>
 800b75c:	686c      	ldr	r4, [r5, #4]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b764:	0719      	lsls	r1, r3, #28
 800b766:	d42c      	bmi.n	800b7c2 <__swsetup_r+0x82>
 800b768:	06dd      	lsls	r5, r3, #27
 800b76a:	d411      	bmi.n	800b790 <__swsetup_r+0x50>
 800b76c:	2309      	movs	r3, #9
 800b76e:	6033      	str	r3, [r6, #0]
 800b770:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	f04f 30ff 	mov.w	r0, #4294967295
 800b77a:	e03e      	b.n	800b7fa <__swsetup_r+0xba>
 800b77c:	4b25      	ldr	r3, [pc, #148]	; (800b814 <__swsetup_r+0xd4>)
 800b77e:	429c      	cmp	r4, r3
 800b780:	d101      	bne.n	800b786 <__swsetup_r+0x46>
 800b782:	68ac      	ldr	r4, [r5, #8]
 800b784:	e7eb      	b.n	800b75e <__swsetup_r+0x1e>
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <__swsetup_r+0xd8>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	bf08      	it	eq
 800b78c:	68ec      	ldreq	r4, [r5, #12]
 800b78e:	e7e6      	b.n	800b75e <__swsetup_r+0x1e>
 800b790:	0758      	lsls	r0, r3, #29
 800b792:	d512      	bpl.n	800b7ba <__swsetup_r+0x7a>
 800b794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b796:	b141      	cbz	r1, 800b7aa <__swsetup_r+0x6a>
 800b798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79c:	4299      	cmp	r1, r3
 800b79e:	d002      	beq.n	800b7a6 <__swsetup_r+0x66>
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff fb8b 	bl	800aebc <_free_r>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6063      	str	r3, [r4, #4]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f043 0308 	orr.w	r3, r3, #8
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	6923      	ldr	r3, [r4, #16]
 800b7c4:	b94b      	cbnz	r3, 800b7da <__swsetup_r+0x9a>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d0:	d003      	beq.n	800b7da <__swsetup_r+0x9a>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f000 f959 	bl	800ba8c <__smakebuf_r>
 800b7da:	89a0      	ldrh	r0, [r4, #12]
 800b7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7e0:	f010 0301 	ands.w	r3, r0, #1
 800b7e4:	d00a      	beq.n	800b7fc <__swsetup_r+0xbc>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60a3      	str	r3, [r4, #8]
 800b7ea:	6963      	ldr	r3, [r4, #20]
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	61a3      	str	r3, [r4, #24]
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	b943      	cbnz	r3, 800b806 <__swsetup_r+0xc6>
 800b7f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7f8:	d1ba      	bne.n	800b770 <__swsetup_r+0x30>
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	0781      	lsls	r1, r0, #30
 800b7fe:	bf58      	it	pl
 800b800:	6963      	ldrpl	r3, [r4, #20]
 800b802:	60a3      	str	r3, [r4, #8]
 800b804:	e7f4      	b.n	800b7f0 <__swsetup_r+0xb0>
 800b806:	2000      	movs	r0, #0
 800b808:	e7f7      	b.n	800b7fa <__swsetup_r+0xba>
 800b80a:	bf00      	nop
 800b80c:	20000018 	.word	0x20000018
 800b810:	0800bf30 	.word	0x0800bf30
 800b814:	0800bf50 	.word	0x0800bf50
 800b818:	0800bf10 	.word	0x0800bf10

0800b81c <__assert_func>:
 800b81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b81e:	4614      	mov	r4, r2
 800b820:	461a      	mov	r2, r3
 800b822:	4b09      	ldr	r3, [pc, #36]	; (800b848 <__assert_func+0x2c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4605      	mov	r5, r0
 800b828:	68d8      	ldr	r0, [r3, #12]
 800b82a:	b14c      	cbz	r4, 800b840 <__assert_func+0x24>
 800b82c:	4b07      	ldr	r3, [pc, #28]	; (800b84c <__assert_func+0x30>)
 800b82e:	9100      	str	r1, [sp, #0]
 800b830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b834:	4906      	ldr	r1, [pc, #24]	; (800b850 <__assert_func+0x34>)
 800b836:	462b      	mov	r3, r5
 800b838:	f000 f8e0 	bl	800b9fc <fiprintf>
 800b83c:	f000 f9c4 	bl	800bbc8 <abort>
 800b840:	4b04      	ldr	r3, [pc, #16]	; (800b854 <__assert_func+0x38>)
 800b842:	461c      	mov	r4, r3
 800b844:	e7f3      	b.n	800b82e <__assert_func+0x12>
 800b846:	bf00      	nop
 800b848:	20000018 	.word	0x20000018
 800b84c:	0800c15d 	.word	0x0800c15d
 800b850:	0800c16a 	.word	0x0800c16a
 800b854:	0800c198 	.word	0x0800c198

0800b858 <_close_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d06      	ldr	r5, [pc, #24]	; (800b874 <_close_r+0x1c>)
 800b85c:	2300      	movs	r3, #0
 800b85e:	4604      	mov	r4, r0
 800b860:	4608      	mov	r0, r1
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	f7f8 fc4d 	bl	8004102 <_close>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_close_r+0x1a>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_close_r+0x1a>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	20000794 	.word	0x20000794

0800b878 <__sflush_r>:
 800b878:	898a      	ldrh	r2, [r1, #12]
 800b87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	4605      	mov	r5, r0
 800b880:	0710      	lsls	r0, r2, #28
 800b882:	460c      	mov	r4, r1
 800b884:	d458      	bmi.n	800b938 <__sflush_r+0xc0>
 800b886:	684b      	ldr	r3, [r1, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dc05      	bgt.n	800b898 <__sflush_r+0x20>
 800b88c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	dc02      	bgt.n	800b898 <__sflush_r+0x20>
 800b892:	2000      	movs	r0, #0
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	d0f9      	beq.n	800b892 <__sflush_r+0x1a>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8a4:	682f      	ldr	r7, [r5, #0]
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	d032      	beq.n	800b910 <__sflush_r+0x98>
 800b8aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	075a      	lsls	r2, r3, #29
 800b8b0:	d505      	bpl.n	800b8be <__sflush_r+0x46>
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	1ac0      	subs	r0, r0, r3
 800b8b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b8:	b10b      	cbz	r3, 800b8be <__sflush_r+0x46>
 800b8ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8bc:	1ac0      	subs	r0, r0, r3
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c4:	6a21      	ldr	r1, [r4, #32]
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	47b0      	blx	r6
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	d106      	bne.n	800b8de <__sflush_r+0x66>
 800b8d0:	6829      	ldr	r1, [r5, #0]
 800b8d2:	291d      	cmp	r1, #29
 800b8d4:	d82c      	bhi.n	800b930 <__sflush_r+0xb8>
 800b8d6:	4a2a      	ldr	r2, [pc, #168]	; (800b980 <__sflush_r+0x108>)
 800b8d8:	40ca      	lsrs	r2, r1
 800b8da:	07d6      	lsls	r6, r2, #31
 800b8dc:	d528      	bpl.n	800b930 <__sflush_r+0xb8>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	6062      	str	r2, [r4, #4]
 800b8e2:	04d9      	lsls	r1, r3, #19
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	6022      	str	r2, [r4, #0]
 800b8e8:	d504      	bpl.n	800b8f4 <__sflush_r+0x7c>
 800b8ea:	1c42      	adds	r2, r0, #1
 800b8ec:	d101      	bne.n	800b8f2 <__sflush_r+0x7a>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b903      	cbnz	r3, 800b8f4 <__sflush_r+0x7c>
 800b8f2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f6:	602f      	str	r7, [r5, #0]
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	d0ca      	beq.n	800b892 <__sflush_r+0x1a>
 800b8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b900:	4299      	cmp	r1, r3
 800b902:	d002      	beq.n	800b90a <__sflush_r+0x92>
 800b904:	4628      	mov	r0, r5
 800b906:	f7ff fad9 	bl	800aebc <_free_r>
 800b90a:	2000      	movs	r0, #0
 800b90c:	6360      	str	r0, [r4, #52]	; 0x34
 800b90e:	e7c1      	b.n	800b894 <__sflush_r+0x1c>
 800b910:	6a21      	ldr	r1, [r4, #32]
 800b912:	2301      	movs	r3, #1
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	1c41      	adds	r1, r0, #1
 800b91a:	d1c7      	bne.n	800b8ac <__sflush_r+0x34>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0c4      	beq.n	800b8ac <__sflush_r+0x34>
 800b922:	2b1d      	cmp	r3, #29
 800b924:	d001      	beq.n	800b92a <__sflush_r+0xb2>
 800b926:	2b16      	cmp	r3, #22
 800b928:	d101      	bne.n	800b92e <__sflush_r+0xb6>
 800b92a:	602f      	str	r7, [r5, #0]
 800b92c:	e7b1      	b.n	800b892 <__sflush_r+0x1a>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	e7ad      	b.n	800b894 <__sflush_r+0x1c>
 800b938:	690f      	ldr	r7, [r1, #16]
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	d0a9      	beq.n	800b892 <__sflush_r+0x1a>
 800b93e:	0793      	lsls	r3, r2, #30
 800b940:	680e      	ldr	r6, [r1, #0]
 800b942:	bf08      	it	eq
 800b944:	694b      	ldreq	r3, [r1, #20]
 800b946:	600f      	str	r7, [r1, #0]
 800b948:	bf18      	it	ne
 800b94a:	2300      	movne	r3, #0
 800b94c:	eba6 0807 	sub.w	r8, r6, r7
 800b950:	608b      	str	r3, [r1, #8]
 800b952:	f1b8 0f00 	cmp.w	r8, #0
 800b956:	dd9c      	ble.n	800b892 <__sflush_r+0x1a>
 800b958:	6a21      	ldr	r1, [r4, #32]
 800b95a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b95c:	4643      	mov	r3, r8
 800b95e:	463a      	mov	r2, r7
 800b960:	4628      	mov	r0, r5
 800b962:	47b0      	blx	r6
 800b964:	2800      	cmp	r0, #0
 800b966:	dc06      	bgt.n	800b976 <__sflush_r+0xfe>
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	e78e      	b.n	800b894 <__sflush_r+0x1c>
 800b976:	4407      	add	r7, r0
 800b978:	eba8 0800 	sub.w	r8, r8, r0
 800b97c:	e7e9      	b.n	800b952 <__sflush_r+0xda>
 800b97e:	bf00      	nop
 800b980:	20400001 	.word	0x20400001

0800b984 <_fflush_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b913      	cbnz	r3, 800b994 <_fflush_r+0x10>
 800b98e:	2500      	movs	r5, #0
 800b990:	4628      	mov	r0, r5
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	b118      	cbz	r0, 800b99e <_fflush_r+0x1a>
 800b996:	6983      	ldr	r3, [r0, #24]
 800b998:	b90b      	cbnz	r3, 800b99e <_fflush_r+0x1a>
 800b99a:	f7fe f989 	bl	8009cb0 <__sinit>
 800b99e:	4b14      	ldr	r3, [pc, #80]	; (800b9f0 <_fflush_r+0x6c>)
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	d11b      	bne.n	800b9dc <_fflush_r+0x58>
 800b9a4:	686c      	ldr	r4, [r5, #4]
 800b9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0ef      	beq.n	800b98e <_fflush_r+0xa>
 800b9ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9b0:	07d0      	lsls	r0, r2, #31
 800b9b2:	d404      	bmi.n	800b9be <_fflush_r+0x3a>
 800b9b4:	0599      	lsls	r1, r3, #22
 800b9b6:	d402      	bmi.n	800b9be <_fflush_r+0x3a>
 800b9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ba:	f7fe fd8a 	bl	800a4d2 <__retarget_lock_acquire_recursive>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	f7ff ff59 	bl	800b878 <__sflush_r>
 800b9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c8:	07da      	lsls	r2, r3, #31
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	d4e0      	bmi.n	800b990 <_fflush_r+0xc>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	059b      	lsls	r3, r3, #22
 800b9d2:	d4dd      	bmi.n	800b990 <_fflush_r+0xc>
 800b9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d6:	f7fe fd7d 	bl	800a4d4 <__retarget_lock_release_recursive>
 800b9da:	e7d9      	b.n	800b990 <_fflush_r+0xc>
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_fflush_r+0x70>)
 800b9de:	429c      	cmp	r4, r3
 800b9e0:	d101      	bne.n	800b9e6 <_fflush_r+0x62>
 800b9e2:	68ac      	ldr	r4, [r5, #8]
 800b9e4:	e7df      	b.n	800b9a6 <_fflush_r+0x22>
 800b9e6:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <_fflush_r+0x74>)
 800b9e8:	429c      	cmp	r4, r3
 800b9ea:	bf08      	it	eq
 800b9ec:	68ec      	ldreq	r4, [r5, #12]
 800b9ee:	e7da      	b.n	800b9a6 <_fflush_r+0x22>
 800b9f0:	0800bf30 	.word	0x0800bf30
 800b9f4:	0800bf50 	.word	0x0800bf50
 800b9f8:	0800bf10 	.word	0x0800bf10

0800b9fc <fiprintf>:
 800b9fc:	b40e      	push	{r1, r2, r3}
 800b9fe:	b503      	push	{r0, r1, lr}
 800ba00:	4601      	mov	r1, r0
 800ba02:	ab03      	add	r3, sp, #12
 800ba04:	4805      	ldr	r0, [pc, #20]	; (800ba1c <fiprintf+0x20>)
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	f7ff fc85 	bl	800b31c <_vfiprintf_r>
 800ba12:	b002      	add	sp, #8
 800ba14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba18:	b003      	add	sp, #12
 800ba1a:	4770      	bx	lr
 800ba1c:	20000018 	.word	0x20000018

0800ba20 <_lseek_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d07      	ldr	r5, [pc, #28]	; (800ba40 <_lseek_r+0x20>)
 800ba24:	4604      	mov	r4, r0
 800ba26:	4608      	mov	r0, r1
 800ba28:	4611      	mov	r1, r2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f7f8 fb8e 	bl	8004150 <_lseek>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d102      	bne.n	800ba3e <_lseek_r+0x1e>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b103      	cbz	r3, 800ba3e <_lseek_r+0x1e>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	20000794 	.word	0x20000794

0800ba44 <__swhatbuf_r>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	460e      	mov	r6, r1
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	b096      	sub	sp, #88	; 0x58
 800ba50:	4614      	mov	r4, r2
 800ba52:	461d      	mov	r5, r3
 800ba54:	da07      	bge.n	800ba66 <__swhatbuf_r+0x22>
 800ba56:	2300      	movs	r3, #0
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	89b3      	ldrh	r3, [r6, #12]
 800ba5c:	061a      	lsls	r2, r3, #24
 800ba5e:	d410      	bmi.n	800ba82 <__swhatbuf_r+0x3e>
 800ba60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba64:	e00e      	b.n	800ba84 <__swhatbuf_r+0x40>
 800ba66:	466a      	mov	r2, sp
 800ba68:	f000 f8b6 	bl	800bbd8 <_fstat_r>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	dbf2      	blt.n	800ba56 <__swhatbuf_r+0x12>
 800ba70:	9a01      	ldr	r2, [sp, #4]
 800ba72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba7a:	425a      	negs	r2, r3
 800ba7c:	415a      	adcs	r2, r3
 800ba7e:	602a      	str	r2, [r5, #0]
 800ba80:	e7ee      	b.n	800ba60 <__swhatbuf_r+0x1c>
 800ba82:	2340      	movs	r3, #64	; 0x40
 800ba84:	2000      	movs	r0, #0
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	b016      	add	sp, #88	; 0x58
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}

0800ba8c <__smakebuf_r>:
 800ba8c:	898b      	ldrh	r3, [r1, #12]
 800ba8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba90:	079d      	lsls	r5, r3, #30
 800ba92:	4606      	mov	r6, r0
 800ba94:	460c      	mov	r4, r1
 800ba96:	d507      	bpl.n	800baa8 <__smakebuf_r+0x1c>
 800ba98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	6123      	str	r3, [r4, #16]
 800baa0:	2301      	movs	r3, #1
 800baa2:	6163      	str	r3, [r4, #20]
 800baa4:	b002      	add	sp, #8
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	ab01      	add	r3, sp, #4
 800baaa:	466a      	mov	r2, sp
 800baac:	f7ff ffca 	bl	800ba44 <__swhatbuf_r>
 800bab0:	9900      	ldr	r1, [sp, #0]
 800bab2:	4605      	mov	r5, r0
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff fa51 	bl	800af5c <_malloc_r>
 800baba:	b948      	cbnz	r0, 800bad0 <__smakebuf_r+0x44>
 800babc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac0:	059a      	lsls	r2, r3, #22
 800bac2:	d4ef      	bmi.n	800baa4 <__smakebuf_r+0x18>
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	f043 0302 	orr.w	r3, r3, #2
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	e7e3      	b.n	800ba98 <__smakebuf_r+0xc>
 800bad0:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <__smakebuf_r+0x7c>)
 800bad2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	6020      	str	r0, [r4, #0]
 800bad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	9b00      	ldr	r3, [sp, #0]
 800bae0:	6163      	str	r3, [r4, #20]
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	6120      	str	r0, [r4, #16]
 800bae6:	b15b      	cbz	r3, 800bb00 <__smakebuf_r+0x74>
 800bae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baec:	4630      	mov	r0, r6
 800baee:	f000 f885 	bl	800bbfc <_isatty_r>
 800baf2:	b128      	cbz	r0, 800bb00 <__smakebuf_r+0x74>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	f043 0301 	orr.w	r3, r3, #1
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	89a0      	ldrh	r0, [r4, #12]
 800bb02:	4305      	orrs	r5, r0
 800bb04:	81a5      	strh	r5, [r4, #12]
 800bb06:	e7cd      	b.n	800baa4 <__smakebuf_r+0x18>
 800bb08:	08009c49 	.word	0x08009c49

0800bb0c <memmove>:
 800bb0c:	4288      	cmp	r0, r1
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	eb01 0402 	add.w	r4, r1, r2
 800bb14:	d902      	bls.n	800bb1c <memmove+0x10>
 800bb16:	4284      	cmp	r4, r0
 800bb18:	4623      	mov	r3, r4
 800bb1a:	d807      	bhi.n	800bb2c <memmove+0x20>
 800bb1c:	1e43      	subs	r3, r0, #1
 800bb1e:	42a1      	cmp	r1, r4
 800bb20:	d008      	beq.n	800bb34 <memmove+0x28>
 800bb22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb2a:	e7f8      	b.n	800bb1e <memmove+0x12>
 800bb2c:	4402      	add	r2, r0
 800bb2e:	4601      	mov	r1, r0
 800bb30:	428a      	cmp	r2, r1
 800bb32:	d100      	bne.n	800bb36 <memmove+0x2a>
 800bb34:	bd10      	pop	{r4, pc}
 800bb36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb3e:	e7f7      	b.n	800bb30 <memmove+0x24>

0800bb40 <__malloc_lock>:
 800bb40:	4801      	ldr	r0, [pc, #4]	; (800bb48 <__malloc_lock+0x8>)
 800bb42:	f7fe bcc6 	b.w	800a4d2 <__retarget_lock_acquire_recursive>
 800bb46:	bf00      	nop
 800bb48:	2000078c 	.word	0x2000078c

0800bb4c <__malloc_unlock>:
 800bb4c:	4801      	ldr	r0, [pc, #4]	; (800bb54 <__malloc_unlock+0x8>)
 800bb4e:	f7fe bcc1 	b.w	800a4d4 <__retarget_lock_release_recursive>
 800bb52:	bf00      	nop
 800bb54:	2000078c 	.word	0x2000078c

0800bb58 <_realloc_r>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	460e      	mov	r6, r1
 800bb60:	b921      	cbnz	r1, 800bb6c <_realloc_r+0x14>
 800bb62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb66:	4611      	mov	r1, r2
 800bb68:	f7ff b9f8 	b.w	800af5c <_malloc_r>
 800bb6c:	b922      	cbnz	r2, 800bb78 <_realloc_r+0x20>
 800bb6e:	f7ff f9a5 	bl	800aebc <_free_r>
 800bb72:	4625      	mov	r5, r4
 800bb74:	4628      	mov	r0, r5
 800bb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb78:	f000 f850 	bl	800bc1c <_malloc_usable_size_r>
 800bb7c:	42a0      	cmp	r0, r4
 800bb7e:	d20f      	bcs.n	800bba0 <_realloc_r+0x48>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4638      	mov	r0, r7
 800bb84:	f7ff f9ea 	bl	800af5c <_malloc_r>
 800bb88:	4605      	mov	r5, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0f2      	beq.n	800bb74 <_realloc_r+0x1c>
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4622      	mov	r2, r4
 800bb92:	f7fe fcbb 	bl	800a50c <memcpy>
 800bb96:	4631      	mov	r1, r6
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7ff f98f 	bl	800aebc <_free_r>
 800bb9e:	e7e9      	b.n	800bb74 <_realloc_r+0x1c>
 800bba0:	4635      	mov	r5, r6
 800bba2:	e7e7      	b.n	800bb74 <_realloc_r+0x1c>

0800bba4 <_read_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d07      	ldr	r5, [pc, #28]	; (800bbc4 <_read_r+0x20>)
 800bba8:	4604      	mov	r4, r0
 800bbaa:	4608      	mov	r0, r1
 800bbac:	4611      	mov	r1, r2
 800bbae:	2200      	movs	r2, #0
 800bbb0:	602a      	str	r2, [r5, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f7f8 fa6c 	bl	8004090 <_read>
 800bbb8:	1c43      	adds	r3, r0, #1
 800bbba:	d102      	bne.n	800bbc2 <_read_r+0x1e>
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	b103      	cbz	r3, 800bbc2 <_read_r+0x1e>
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
 800bbc4:	20000794 	.word	0x20000794

0800bbc8 <abort>:
 800bbc8:	b508      	push	{r3, lr}
 800bbca:	2006      	movs	r0, #6
 800bbcc:	f000 f856 	bl	800bc7c <raise>
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	f7f8 fa53 	bl	800407c <_exit>
	...

0800bbd8 <_fstat_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	4d07      	ldr	r5, [pc, #28]	; (800bbf8 <_fstat_r+0x20>)
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	f7f8 fa98 	bl	800411a <_fstat>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	d102      	bne.n	800bbf4 <_fstat_r+0x1c>
 800bbee:	682b      	ldr	r3, [r5, #0]
 800bbf0:	b103      	cbz	r3, 800bbf4 <_fstat_r+0x1c>
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000794 	.word	0x20000794

0800bbfc <_isatty_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d06      	ldr	r5, [pc, #24]	; (800bc18 <_isatty_r+0x1c>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	f7f8 fa97 	bl	800413a <_isatty>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_isatty_r+0x1a>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_isatty_r+0x1a>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20000794 	.word	0x20000794

0800bc1c <_malloc_usable_size_r>:
 800bc1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc20:	1f18      	subs	r0, r3, #4
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bfbc      	itt	lt
 800bc26:	580b      	ldrlt	r3, [r1, r0]
 800bc28:	18c0      	addlt	r0, r0, r3
 800bc2a:	4770      	bx	lr

0800bc2c <_raise_r>:
 800bc2c:	291f      	cmp	r1, #31
 800bc2e:	b538      	push	{r3, r4, r5, lr}
 800bc30:	4604      	mov	r4, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	d904      	bls.n	800bc40 <_raise_r+0x14>
 800bc36:	2316      	movs	r3, #22
 800bc38:	6003      	str	r3, [r0, #0]
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc42:	b112      	cbz	r2, 800bc4a <_raise_r+0x1e>
 800bc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc48:	b94b      	cbnz	r3, 800bc5e <_raise_r+0x32>
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 f830 	bl	800bcb0 <_getpid_r>
 800bc50:	462a      	mov	r2, r5
 800bc52:	4601      	mov	r1, r0
 800bc54:	4620      	mov	r0, r4
 800bc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5a:	f000 b817 	b.w	800bc8c <_kill_r>
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d00a      	beq.n	800bc78 <_raise_r+0x4c>
 800bc62:	1c59      	adds	r1, r3, #1
 800bc64:	d103      	bne.n	800bc6e <_raise_r+0x42>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	e7e7      	b.n	800bc3e <_raise_r+0x12>
 800bc6e:	2400      	movs	r4, #0
 800bc70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc74:	4628      	mov	r0, r5
 800bc76:	4798      	blx	r3
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e7e0      	b.n	800bc3e <_raise_r+0x12>

0800bc7c <raise>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <raise+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f7ff bfd3 	b.w	800bc2c <_raise_r>
 800bc86:	bf00      	nop
 800bc88:	20000018 	.word	0x20000018

0800bc8c <_kill_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	; (800bcac <_kill_r+0x20>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	4611      	mov	r1, r2
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	f7f8 f9df 	bl	800405c <_kill>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d102      	bne.n	800bca8 <_kill_r+0x1c>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	b103      	cbz	r3, 800bca8 <_kill_r+0x1c>
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000794 	.word	0x20000794

0800bcb0 <_getpid_r>:
 800bcb0:	f7f8 b9cc 	b.w	800404c <_getpid>

0800bcb4 <_init>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_fini>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr
